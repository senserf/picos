WO100715A:

  new_il_demo:
  
  - Changed stats format: all PHYSOPT_ERROR and memfree counters, instead of
    host_id we see derived and current local_host. See new_id_demo/notes.
  - Changed stats msgs to accomodate the above. Reflash all nodes in the net.
  - All nodes go powerdown() in _APP_EXPERIMENT (used to be just odd ids).
  - Default (in options.sys) RADIO_CRC_MODE is 4 (soft crc).
  - No calls to empty (but defined in the board def.) read_sensor(). Including
    power meter on aggregators. No output format change for sensor data.

WO100727A:	VUEE >= WO100727A

  TARP retries. See new_il_demo for mandatory tarp routines and options.sys.

WO100728A:

 new_il_demo, options.sys:
  - retries:
      TARP_RTR N (number of retries (on 1s interval). 1 or 2.
      TCV_TIMERS, TCV_HOOKS 1 (_TARP_T_RTR 1 for debugging RTRs
  - PURE_FORWARDERS 1 will make all nodes with ids below 100 pure forwarders -
      they will be ignoring collector data.

  Moved annoying 'Unconfirmed ...' from INFO to DEBUG level. Note that tag's
  'Not confirmed' stays - it is more important and should be rarer.

  Added mhop.xml model for in-line multi-hopping.

  All aggregators (with master_host set) send to it status report every
  tag_auditFreq * 2^POW_FREQ_SHIFT seconds. Default: 23 * 64 ~= 25 minutes.

 Minor adjustments in tarp.c, no early killing of retried packets
 (commented out).

 Retries:
   Imperfect as they are, they seem to improve routing is some topologies
   a lot. More studies needed. Try new_il_demo with the mhop.xml model.

   Nest iteration: only packets with higher hoc (down the stream) should
   clear retries. As it is now, a retry upstream will clear retries, which
   is both common and unwanted. Thus, hoc must be added to the rtr cache.

   It seems that with the link retries, PURE_FORWARDERS should be used.
   Without, PURE_FORWARDERS have ambiguous impact: less msgs, but also
   diminished redundancy in source data gathering.

WO100729A
  Traces in new_il_demo:
    Command: t node_id [dir hop_limit]
      node_id is the target, bcast allowed, but not recommended
      dir: 0 (default): backward, 1: forward, 2: bidir
      hop_limit: killed after so many hops

    OSS should be careful, no input checks for now.

    Trace output via diags, for now (this is a debug tool anyway):
        tr 104 [0]
	    trace(104) 18 3 3:
	    trel 104 107
	    trel 3 99
	    trel 2 107

	    18 - backward (this is a msg type)
	    3 hops each way (not always equal)
	    trace element (trel) 104 - node_id, 107 - rssi

	tr 104 1
	    trace(104) 16 3 3:
	    trel 2 108
	    trel 103 97
	    trel 104 108

	tr 104 2
	    trace(104) 14 3 2:
	    trel 2 107
	    trel 3 106
	    trel 104 97
	    trel 3 98

    Ligtly tested under VUEE - be careful.

WO100801A:
  new_il_demo:
  - retry caches resist retries from upstream (better behaviour at least in
		  the in-line topology)
  - closing {local_host, rssi} reported in trace outputs.

WO110213A:
  Added CHRONOS to new_il_demo, see -110213- in 'notes' there. Major update.

WO110423A:
  mm_demo: instrumented for BT (Seatan), see mm.odt
  new_il_demo: preserved a simple BT / UART switch driven by BOARD_WARSAW_BLUE

WO110827A:
  Added kek_ned, see 'notes there. Updated Olsonet's (c) in main.c.

WO111127A:
  Updated 'survey', see survey.odt for functional changes. This, plus restored
  ee_open() and some cosmetics. Also, nov21.xml describes outdoor experiments
  comparing emspcc with Nanotron nodes.

WO111217A:
  Updated mm_demo: mostly format changes for ANDROIDEMO (set in options.sys).
  However, PEG_STR_LEN change from 15 to 33 bloats ram and nvm structs.
  Also, the alarms are used for handshakes with encoded meanings: in VUEE,
  odd nodes respond 'no', even ones 'yes', with auto-generated 'ack-alarms'.
  For demos only, in hybrid scenarios with VUEE and real hardware.

WO120226A:
  Added PROPRIETARY/vsen_demo as a (failed) attempt to unify different
  sensors. Some good was produced, see Pawel's commits. vsen will go to
  NL for lightly defined demos.

  survey: set defaults to 'no all out', mainly for UfO.

  Created PROPRIETARY/inProgress, for stuff with such status - I'm tired
  of maintaining local git branches with half-cooked and demo stuff.
  I put Ariadne, ams_demo and ert there.

  tarp: a plugin signature adjustment.

WO120301A:
  For empty sockets, SHT returns -1 -1 on 10SHT and 0 0 on ARTURO* boards,
  but we don't want to normalize this now (besides, these drivers *should* be
  independent). Changed snippets within piter_plug.tcl and econnect.tcl
  to output -1C and -1% on these boards. Note that a regexp had to be
  adjusted in piter_plug.tcl, to let '-' in -1 values through.
  Pawel should review these patches, trivial as they are.

WO120302A:
  Minute change in mm_demo, to let through to OSS msgs (profi and alrm) even
  if p_inc ('include'preferences) don't match). OSS (presumably, an Android app)
  would rate the incoming info and sort or drop it based on user's preferences.

WO120320B:
  Added Chronos to vsen_demo, updated econnect. vsen.xml says it all - it is
  a tentative setup for demos in NL. 'B' because it is after Pawel's PG120320A.

WO120419A:
  vsen_demo: added WARSAW_SONAR (as simps), updated CHRONOS with the driver
  changes. See vsen_demo/notes tail for a short summary. This version will
  update Raoul's inventory.

WO120512A:
  mm_demo updates for Android most recent works. mm_odt clearly shows the
  original and the two updates. Still, some (relatively old) functionality is
  undocumented, but an up-to-date version should wait for consistent 
  requirements and total rewrite, which are due after 1st demo / user feedback.

  In vsen_demo, options.sys shows (commented out) European settings and moves
  RF to channel 255. 'Ronin buzzer' is added. Chronos def. freq. is changed
  from 30 to 60, other nodes' from 30 to 900. All the changes were used for
  experiments with CMA and dimihished RTLS.

WO120820A:
  - inProgress/trace: Read trace.odt there. Unfinished business: Soon, we'll
    update it after DIVA slides, for DIVA and similar demos. After that, open
    problems, sensor module and OSS refinements are expected.
  - In tarp.c, trace-related castings are fixed.
  - In il_demo, sensor- and board-related symbols are updated. More updates
    and cleanup will come after board_options are streamlined and made
    available for VUEE.
  - In mm_demo, STACK_SIZE is updated 256->512.

WO121020A:
  - PROPRIETARY/tracEd, see tracEd.odt there. Significant update of what 
    used to be inProgress/trace, which is removed. To be continue.
  - Cosmetics in mm_demo:
    - TARP params changed 0xB1 -> 0xA3, for better routing in Paul's exp's.
    - HID / host_id changes to follow PicOS.

WO121103A:
  TracEd: updates after the WiSense presentation & talks with Pawel:
  - Chronos buzzes in UIoff mode
  - highlight colors
  - updated .odt, removed some code comments

WO121209A:
  inProgress/netting: Another praxis meant as blueprint, this time for
  experiments with networking. Disappointments include incombatibility with
  tracEd meant to traliblaze general OSSI structures. So, this part of
  tracEd was futile; perhaps BOSS? As to 'netting', see netting.odt in there.

WO121217A:
  - eco_demo: 
  -- For WARSAW_ILS, first four sensors show int. temp. (-2),
     int. voltage (-1), light (0), movements (1); other boards unchanged.
     My understanding is that OSS scripts running on comip.ca use sensor slots
     0, 1, so for WARSAW_ILS they'll have voltage and light, as needed for
     solar panel experiments.
  -- Power sensor on pegs corrected to -1.
  -- .xml models updated for current sensor indexing.
  -- Adjusted various options* for current VUEE status and comip.ca channel.
     BE CAREFUL to avoid interference with the live run.

 - preserved inProgress/netting in inProgress/alphat, as it was sent to
   Alphatronics. The latest Netting.odt is both in netting and alphat.

 - TESTS/RFTEST updated for current host_id PicOS status.

WO121226A:
 - cosmetic cleanup in tarp.c debug facilities
 - inProgress/netting:
 -- lword ref# everywhere, including trace
 -- ack (2-way route) is optional on odr
 -- optional odr output on transient nodes
 -- WARSAW_BLUE goes via UART 2 (not tested)
 -- updated Netting.odt

WO121228A:
TARP header changed, with hoc, hco :4 and separate weak, prox flags. Lightly
tested, but the changes are rather trivial. The new prox flag is used in
netting, significantly improving ODR with non-zero TARP's slack. Note that
other applications that use proximity messages are unchanged; there, the
similar functionality can be achieved by switching on TARP's fwd flag.

It seems that my abhorrence to bit-fields came from experience with the eCog
compiler... if so, TARP caches should be redesigned as well. However, that
should wait for some form of TARP test bed. Either we'll try something within
SIDE, as we discussed with Pawel, or we'll reheat old tries from TARP's early
days.

WO130224A:
Location-related (partial) works.
Ariadne 
- allow TARP_RTR, even if not immediately needed.
- adapt a flavour of combat10.xml, common for experiments and simulations.
- surloc.tcl - location-related (temporary) script.
Netting 
- If compiled with ODR_FILL_BCAST (by default present in options.sys), at
  'broadcast steps' in ODR nodes fill in their ids. It helps with RSSI
  recording, but also makes the ODR strict when retracting to the source;
  hence under the option.
- 'f' command formats OSS out. If set, the ODR output is suitable for
  SIMPLE experiments, where the server uses the string to set return path.
  Defaults to 0, not written to FIM. It replaces compile-time
  ODR_MHOP_SERV_EXPER, which is eliminated.
- options.sys cleaned up a bit.
- Added exp subdir, location-related, see Expernetting.odt there.
- rssi.tcl and loca.tcl - location-related (temporary) scripts.

WO130312A:
Still unfinished location-related works. I'd like to commit the status quo
before switching to the new CC1100 driver:

- in inProgress/netting:
-- loca.tcl produce 4 files: db and queries with rssi forward anc backward.
-- 2loca.tcl: an attempt to process files generatedfrom surveys (tags) and
   "proxy auto-profiling". The former is a 1-hop bcast ODR, the latter either
   2-hop bcast on bcast or several anchored bcasts. 8 files are produced.
-- combReal.xml - mirror/model of what hangs at the HQ.
-- combReal directory contains data gathered from the HQ setup, with
   several 1-hop and 2-hop surveys. Note that this is NOT the data we want to
   produce in true surveys; old driver was used, only 2 tag points.

- in LOCATION (and ./TEST):
-- locdbase.c and query.c got the infamous #define _GNU_SOURCE.
-- in params.xml, I added <slr> transforms that "work" for vuee and real
   setup at the HQ. (They'recommented out.)

WO130327A:
Location-related updates, in netting and (minimal) in LOCATION/TEST.
ExperiNetting.odt is a must if you want to continue on this thread. Changes:
- combReal directory with combReal13* is zipped in combReal1303.zip. In the
  results, the 150 node is corrected (I cheated, collecting data from 150's
  location from the 77 node).
- exp dir is cleaned and ready for experimenting descibed in experiNetting.
- 2loca.tcl and verloca.tcl create and verify location-related data
- combReal.xml uses combReal_ch.xml (instead of channel.xml)
- _coord lists coordiantes for combReal stuff
- oo_samples.txt contains samples generated from real runs. It is here for
  the convenience of running VUEE without the data re-generation.

- In LOCATION/TEST: query.c modified to provide querying id,
	params.xml contains a few <slr> (this mess is temporary here, as it
	should be by praxis / model)

WO130415A:
In netting, updated _coord, combReal.xml, added hq.gif for the engine and model.
In LOCATION/TEST, updated params.xml with exp. SLR translation.
In phys_cc1100.c, replaced overflowing RADIO_DEFAULT_BITRATE with
  RADIO_BITRATE_INDEX for startup reporting.

WO130503A:
Updates to netting: scripts, the model for Combat's HQ. Also, WIFI added for
combined or independent location tracking.

Unzip exp2013_05_03.zip and read notes there.

WO130616A:
Removed inProgress/alphat. AFAIK, it was an early version of netting and latest
updates for AT were produced from the up-to-date netting.

inProgress/alfMay2013 is a new clone of vsen_demo with updates we did and left at AT while in Lokeren. See notes there.

 Netting:
- nett20130604.zip is a compressed dir with images left at AT.
- options.sysupdated forEurope and dbg_? cleanup;
- exp_rtt.zip contains RTT experiments (see rtt_notes.txt there).
- hq_rtt.xml: name says it;
- lin250, mod_lin250, patt_line.xml - for long chains;
- sq16, mod_sq16, patt_sq.xml - 250 nodes in 16 rows;
- longs.zip - experiments with long hop chains;

 TARP:
hoc, hco changed from :4 to :7, header rearranged

Scripts/mksvm: exec sh picospath (I hope it is generally OK)

WO130627A:
Mainly netting experiments with location, see notes in exp2013_06_27.zip.

2loca.tcl: added WIFIDAT(ignore) to ignore WIFI altogether.

verloca.tcl: as in 2loca, we derive location coords for node ids > 10000 (coords for experiments with android tablets).

In tarp.h: DEFAULT_RSSI_THOLD changed from 80 to 100 (important for mhopping)

WO130823A:
MatchMaker
- LEGACY/mm_demo preserved in legacy_mm_demo.zip, just in case;
- PROPRIETARY/SEAWOLF/mm contains a "modern" version with (intended) EXACTLY
  the same functionlity (as the legacy version).
- SEAWOLF/BOOTH will keep the 'booth' attempt(s) at shows for incomplete
  Seawolf / PINDA stuff.

Minor update (implicit int to explicit byte) update in phys_cc1100.c.

inProgress/spot is intended to be a derivative from alfMay2013 for AT.
I'd like to preserve quite significant code changes (see 'notes' there),
in case the works resume.

WO130912A:
BOOTH/show is ready for HW / Android plays. Expected minor incompabilities.
Documentation missing, coming soon. alltogether, this is a messy entanglement
of PINDA-centric functionality, Seawolf and hardcoded vsen. Oh, and CHRONOS.
After the September's show, we hope to writedown reqs for the next one and
better BOOTH in unison with Android, PINDA and WEB server.

tarp.h had unreasonable 125 as tarp_maxHops; back to 10. ddCacheSize 10->20
(I thought fast hosts in BOOTH/show overwhelmed this cache, but there is more
 to it... Both sizes are arbitrary, perhaps we should make them part of
 application-specific data in options.sys?)

WO130913A:
 BOOTH/show changes continue undocumented:
 - shuffling ttags (I think the algorithm is cute, naturally extendable to 
 	k-permutations, likely known in advanced kindergarden nowadays).
 - changed leds RGB -> BGR - all the boards I have are consistently messed up.
 - gave sensors a second to measure things at startup.
 - fixed options for 'default' BT modules' configs... let's not go there.
 - updated wm_demo.xml - no way people would find tags in disjoint areas.
 - images.zip contains images handcrafted for the coming week of demos and
   testing. They WILL be removed.

WO130917A:
 BOOTH/show continues:
 - booth.doc attempts at the mess' description. Now it may be somewhat useful.
 - In SLEEP, local_host is displayed in high row.
 - Made SEN thresholds configurable via UART, saved in FIM - the i/f is real
   bad, be careful and use when needed for calibration (we need it for RH);
 - Added to SEN simple diags (on / off via UART) to trace outgoing alarms;
   may be useful, too.
 - Hunt strings (TH) are the same to PINDA nad up to the Android phone.
 - Corrected a glitch is SUI (pp, pi, pe handling)
 - Corrected a few profiles in wm_demo.xml.
 - Regenerated images.

WO130919A:
 BOOTH/show continues:
 - SEN: added CHRONOS with mobility alarms (SEN looks funny with 10SHT, SZAMBO
   and with radically different CHRONOS... but it works and there is something
   about it: modularity on #ifdefs (or .cc #includes) with a common
   root and libs?)
 - cosmetics on LCD: FINI -> END (I admit, segmented FINI looked bad)
 - booth.doc updated with mobility alarms. images.zip regenerated.

WO131031A:

 BOOTH/show v0.2 update:
 - var pinda_id (K command)
 - var beacon freqs for profi, alrm msg (F command)
 - ossi throttling (O command)
 - oss out on tag insert failures (a LOT of output if oss_out is 2 (default)
 - xmls for large models (100pattern, add100, demo100, demo100_n, neutrino,
   wm_demo_n)
 - minor internal cosmetics:
   - rearranged app_flags
   - trueconst are back
   - const char * for literals (to supress warnings

 - Still missing or outstanding:
   - documentation, any kind;
   - good tests, also over BT;
   - neutrinos take more CPU & RAM, but are stable 
   - with RF, we run out of nodes' memory (see demo100 vs demo100_n), likely
     because of LBT it starts complainig after 400-450s
   - With my laptop, I lost eeprom / restart updates, but I don't want
     to restore them before we know what we need with the server. E.g., we'll
     likely to go off on lost connections, so perhaps the server should keep
     the context and load it via commands at node's (re)start... (?) If we
     have dongles to keep context over power cycles and don't store history
     or neighbourhood data, we should scrap eeprom and go for FIM.

WO131102A:
 BOOTH/show v0.2 update:
 - some documentation (../media/booth.doc); however crappy it is, we need
   a sync point.
 - cosmetics for virt flag, as in the doc.

WO131103A:
 Minor BOOTH/show v0.2 update:
 - oss_out default changed to 1. For small models it doesn't matter, for large
   ones it can be easily changed by O2 command if massive NEW flow is needed.
 - local tag list now forces out virtual dongles if a real one is to be added.
   OSS will see output like for gone tags, with 'forcedOut' instead of 'gone'.

WO131111A:
 eco_demo touched to accommodate BVSHIFT testing:
  If BVSHIFT_TH in options_tag.sys is nonzero, it serves as the threshold
  below which the node switches to battery booster (pin_write (9, 0)). This is
  done once only. The sensors read int. temp & int. voltage as usual, then
  #3 is 0 - no booster, 1 - booster, and #4 shows uptime in minutes of the
  switch event (just at the switch). Note that this applies to ANY board
  type.
  To experimanters: rx_span = 1 is merciless on battery, i.e. best for this
  exercise. Also, I did NOT touch RF freq and threshold is 0. Change those
  as needed.
  Tested with VUEE only (large_eco). We'd have to clean the models, as only
  this one will work with nonzero BVSHIFT (the models should be tied to
  board types, as sensors are far from uniform). In any case, on large_eco
  moving voltage below threshold clears pin #9.

WO140223A:
 Synchronizing work in progress:

 - Rewritten and vuee-tested SPOT. The 'original' in old_spot.zip, including
   'notes' on its history. The current version is meant as a refreshed attempt
   at modularization. Misssing, in this order: add AP* nodes with bin i/f,
   documentation, more 'modular reshuffling'.

 - Netting: combLoca reconciles (I hope) last year's survey with VUEE. Survey
   was performed with a slightly skewed backdrop. Since the co-ordinates were
   tapped-in on this backdrop, a few nodes had to be moved. They're marked
   green in combLoca.xml. combLocaOrig.xml keeps the data from the survey's
   time. When we return to our location works, we'll decide how reliable this
   data is and if we can avoid another survey.

 - add100_1.xml, eve_1.xml for server-based Semantic Hub.

 - deleted 'sandbox' from alfMay3013 - this 'inProgress' praxis may still have
   some value...

 - removed dbg lines from options.sys.

WO140301A:
  Synchronizing update: modular reshuffling of SPOT. Not done, but closer.

WO140303A:
  Another SPOT update. Basic functionality ready for documenting, which may be
  easier with Cygwin snapshots and wrappers.

WO140314A:
  SPOT update with a few add-ons. mostly to sync with repo.

WO140323A:
  SPOT - added AP* nodes, tcve. Sync update, not tested, not documented. 

WO140405A:
  SPOT - tcve i/f on AP* nodes close to AT specs. Lightly tested, w/o
    piter's plugin for (n)acks. AT-related works cut into the 'modularization'
    attempts, with messy but potentially beneficial result. Still to do:
    - tests, 1st superficial and after the i/f is 'finalized', thorough.
    - light description of what is happening on the i/f, for AT.
    - shuffle some attributes (e.g. looper's hearbeat should be on its i/f).
    - write decent 'modular' documentation.

  apki.xml is with pure AP* net; spot_at3.zip contains what I sent Pawel when
  he was in Lokeren (Images AT has contain further modifications).

WO140411A:
 SPOT touched to conform to the latest guess about Alphanet params:
 - heartbeats: peg's 25->60; tag's: 60,60,3600 -> 900,900,3600
 - pong params: { 5, 3, 2, 0, 0x7777}
 - conistent app_dbg for master abdication / coronation
 - Renesas retries 50ms on real nodes, 500 in VUEE
 - local alarms don't go to the audited pool of tags
 - TARP slack inited to 1
 - **in Libs/LibComms** tarp_maxHops changed 10 -> 5

WO140414A:
 SPOT / alphanet:
 - periodic peg stats (app_diag go to emul)
 - better looper tracking (app_diag)
 - max reliable tags per peg introduced (_TMGR_MAX_RELIABLE 12)
 - alarm=0 are not reliable (repAcks still come back, for nothing)
 - better tag manager tracking
 - old tags (255s) removed from 'reliability list'
 - prepared options* for TARP_RTR (messy because of VUEE), but all hiddedn
 - remove atsimple.xml (became confusing)
 - added apkilot.xml

 All lightly tested, likely to be ready for Alphanet 1.0 flashing. Note
 missing variable power level - thery contradict previous feelings that
 lower levels cause delays in tags' responses.

WO140415A:
  SPOT 1.0 (?)
  - tag's pong_params = { 3, 4, 2, 0, 0x7777} (every 3s, 4 tries)
  - tag's heartbeat _HBEAT 3600
  - Renesas i/f for switching Tarp's fwd on / off
  - relays at dst come out with no 0x80 set (subject to acks, etc.)
  - real tag blinks for 3s at boot, in vuee rnd'ed 1-6s

WO140417A:
  Cosmetics in SPOT:
  - fixed peg audit (marka :3)
  - removed 50ms delay before sending stashed alarm
  - cleaned the glitch with relays' acks Pawel already fixed
  - peg's heartbeats at 15s

WO140724A:
  Updates to SPOT, dealing with tag registration (treg):
  -testNotes.txt describes rudimentary examples;
  -implemented cmds 0x13, 0x14, 0x15 more or less as requested;
  -kicked uplug.tcl - Pawel will do it better and consistent with piter
  -overloaded "alarm type" flag (global/local). When it reaches tcve, it shows:
   - b7 is set if there will be no ack;
   - b4-b6 shows try (0) and retries (now 1-3)
   - lower tuple wasted on g(1) / l(0) flag, as before.
 We must describe it for AT, especially the "alarm type". Later.

 We also should clear a bit the worst things from the i/f to Renesas, As is,
 I can construct input that will have undefined functionality.

WO140821A:
  SPOT updates for 'sympathetic learning mode', to follow Renesas functionality:
  - added relevant scenarios to tregIFnotes.txt;
  - touched uplug..tcl to show now relevant RSSI (perhaps Pawel will reconcile
    uplug with its piter's sibling...
  - updated cmds 0x13, 0x14 to accommodate the requirements: a binary flag to
    ack all tags with local alarms with rssi over 149, when it is set.
  Note: it would be even more natural to have this implemented as *exact* mirror
  of the association logic. Likely, the functionality would be better, too.
  Let's wait for 2.0 and Renesas i/f redesign, if we ever go there.

WO150129A:
 SPOT updates to neutralize mysterious events in Bruges. Hopefully, they're
 temporary kludges to unwind with a decent upgrade; hence, I list them here
 by file, commented for more permanent fixes:
 commons.h: added a structure to store attempted master change events.
 tag_mgr.cc/h introduced var roma of roguemType, to use it to record & report.
 tarp_virt.cc: crucial msg_isMaster returns false on DEF_MHOST. This is bad in
   any praxis that allows master change. Worse than bad.
 msg_io_peg.cc/h: added msg_master_in(). It triggers master beacon (after the
   master change is refused). Obviously, this goes against any procedure that
   would allow master change or master hodt with id != DEF_MHOST (1).
 root_peg.cc: init rome, plug in msg_master_in().
 oss_peg_tcve.cc: added 0x11(4) to report roma; updated 0x11(2) to return
   master_host; disallowed id change to or from DEF_MHOST; disabled master id
   change. The last item hinges on ugly if (0), if (1) for tests under vuee.

 Note that all this crap goes into a network that only master node is to be
 reflashed, possibly with a few other pegs. Most of the nodes will stay as
 before this update.

 When we ever implement master id change, the safest would be to store the
 change in iflash and reset the node to read it and init properly. Likely,
 same should happen for any local host id change. Likely, host & master id
 changes should be bundled into a single operation (reset would take care of
 its consistency).

 I don't know how we can neutralize dreadful scenarios of incidental msg_master
 occurences. Decidedly, master beacons must be triggered. Perhaps a designated
 default master should auto-assume master role if the new master doesn't
 reaffirm its role, to avoid unlikely but possible ghost masters formed from
 RF noise rendering networks  masterless.

WO150630A:
  SPOT is Alphanet 1.5 with unfinished testing. In DOC, there is a change-marked working doc about the OSSI.

WO150704A:
  SPOT - rather minor changes & testing, updated ...preliminary (with change bards waiting for removal. Code:
  - removed RC_RMT (no local RC_OK, it is coming from the relay's dst);
  - added back the call to board_out (what an annoying bug!);
  - removed opref from relay report;
  - cleanup & minor fixes.

WO150802A:    VUEE >= WO150802A
  locaspot: spot with 32-slot survey; see notes.txt in there.
  A half-failed attempt at implementing PXOPTIONS in net and tarp; see
    locaspot/notes.txt for that, too.

WO151002A:
  SEAWOLF/BOOTH/show: a minor tweak to make treasure hunt work. What is
  troubling: it used to work, likely a slightly older version was preserved
  in git. In any case, the change is a 2-liner in root_sui.cc, clearly visible.
  Also, Image_sui_Oct02.a43 was added to images.zip.

WO151021A:
 locaspot - put together location and event reporting in 1 msg (loca reading
   is on the 32B long tail). Separated location into loca.h/cc on the occasion.
   This is the intention (not motivated by true requirements): global alarms
   add 32B to event reporting, local events are supposed to send separate loca
   events to the master, exactly as it's been before. The overall trigger for
   all this was the fact that both in vuee and in real setups separate loca
   messages seemed to be severly limited at the master, in comparison with
   event messages sent right after them.

 tracEd - site_mob_types.xml aligned to serve as an illustration for VUEE
   experiments at AT.

 spot - highlighted heartbeats, reports and rep acks (msg_io_peg.cc) and
   their coloring in aa_floor_plus2.xml.

WO151217A:
 A spot fix to a major bug causing loops after memory depletion. Sort of
 hypothetical on real HW but definitely observed in VUEE. I'd like to tag
 and separate the fix before other pending changes. (file: loca.cc)

WO151229A:
 Locaspot: rather minor changes, but with serious functional impact.
  Lightly tested in VUEE only. The main goal: deliver maximum number of
  location readings without impeding alarms delivery. Parameters tweaking
  may be necessary to get acceptable performance or to reject (revert) the
  changes:
  - per hop retries (TARP_RTR) replaced praxis' report retries, i.e. NO
    praxis-level reliable report delivery. Likely, this is OK with Bruges-alike
    setups, I'm not sure about lesser redundancy (e.g. in AT buildings).
    TARP_RTR is set to 2, in options_tarp_.sys.
  - LOCA_TOUT_PING, LOCA_TOUT_PONG in LIB_PEG/loca.h, both set to 5 (seconds).
    These are timeouts after which incoming pings (bursts) or pongs (alarms)
    clear orphan burst cache (now still just 1 burst collection at a time is
    allowed). It is debatable if this (passive) burst cleanup is adequate.
    Even if it is, I don't know what are the 'right' values.
  - LOCA_TRAC (set to 1), also in LIB_PEG/loca.h, diags burst cache cleanup in
    VUEE's console (not in EMUL).
  - In root_peg.cc, tarp_ctrl.param are set with slack 0 (0xB3 and 0xB2 for the
    master). This (and appropriate TARP_DEF_RSSITH) worries me most, because
    bad values may ruin the network. Again, AT buildings should be a good
    testing ground, with lesser net redundancy than in Bruges.

  Regardless of results from testing at AT, I'll do a burst cache with
  parametrized size. It makes sense to allow 2-3 burst collections, especially
  if we obsolete peg audits and report retries.

  For testing at AT, all pegs must be reflashed. Tags are formally ok, but I
  would reflash them, too, for seemingly irrelevant but different TARP settings.

  I believe the locaspot praxis should be rewriten, when we decide about retries
  (RTR and reliable reporting). Backward compatibility with 1.0 in Bruges is a
  yet another requirement we should take seriously and treat it as a general
  net upgrade functionality.

WO160112A:
  Locaspot: fixed references for location data; readings come with consistent
  timestamps taken at sourcing tag at the beginning of ping bursts. Note that
  events without location data (potentially subject of report retries) keep
  their timestamps (from hosting peg), as they also serve audits.

  Reports with location data are not acked (and not cached for retries).

  Location data cash cleaning params, from loca.h:
// in seconds... likely, a single constant will do
// 10 comes from 4 tries 3s apart, after loca burst (3*3+1)
#define LOCA_TOUT_PING 10
#define LOCA_TOUT_PONG 10
// after _LREP loca data is cleared but not sent
#define LOCA_TOUT_LREP 30

  Added a flag to msg_report, to indicate if with location data. 2nd last spare
  bit in pongDataType is used.

  Added a byte at the end of all reports. If it is set, it is followed by
  reference and loca vestor. From oss_peg_tcve.cc:
	byte	locat; // 1 - with location data
	// locat == 1 only
	word	ref;
	byte	locavec[LOCAVEC_SIZ];

  All lightly tested in VUEE. There is still some symptoms I can't reconcile
  if large aa_floor... is run, but I'll wait for Pawel's comments and adjustments
  to location server and shared_plug. Before I forget, my main worry: why at
  the model start not a single report comes with loca data. At a single node
  restart all seems good, but at the VUEE start it is not.

WO160131A:
  Locaspot:
  - collecting up to LOCA_SNUM (now: 3) burst at a time;
  - added locaudit with LOCA_TOUT_AUDIT (14s) timeout; wakes up every
    LOCA_TOUT_AUDIT /2 s;
  - removed LOCA_TOUT_LREP, audit makes it obsolete;
  - minor cleanup after -Wall compile.

  Set LOCA_TRAC for VUEE testing location data flow & events. Diags were moved
  to EMUL windows, it is easier to trace individual pegs, as the events are
  not exceptional any more. For easy tests: run alphatest model, open
  uart(plug) on 1, connect PANEL and quickly toggle nodes 0-5 ON.

  Outstanding: we should(?) come up with a decent way for variable length of
  loca data - Renesas must cope with it as well, so this versioning is likely
  to be more explicit than packet length.

WO160303A:
 Alphanet 1.51 (locaspot with changed minor version):
Introduced remote commands. The mechanism: If within 'OSS Data' (see the preliminary document on OSSI) nonzero node_id is not local_host, the OSS Data is wrapped in a msg_rpc message and shipped with proximity flag set to this node_id. There, it is executed as if it came via OSSI, with a few exceptions and additions:
- Responses go back via msg_rpcAck to the sender, where they're sent on the OSSI. The node_id within OSS Data indicates the remote node where the command was executed.
- If the Command is too long, RC_ELEN is returned (as it was for CMD_RELAY, for example). I can't see practical examples of this limitation.
- If the Response is be too long, it is trimmed and sent with RC_ELEN. It can happen with CMD_GET and CMD_GET_ASSOC - the number of parameters or indices is reduced to fit in the RF packet. Note that it means that getassoc not always returns the association table to the end. I don't want to change the command for Renesas uncertainties, so it still takes only 'from' index, but the max. number of entries in one shot *through RF* is limited to 12 (at present).

To be able to issue RPCs, the node must be in the Custodian (PMOD_CUST (2)) mode, explicitly set or cleared. To accept commands over RF, the node must be in the Configurable (PMOD_CONF(1)) mode. Note that PMOD_CONF will unblock certain parameter changes as well, when we figure out what should be settable before 2.0.

PMOD_CONF can be set remotely but must be the 1st parameter in the CMD_SET which does it. The node remembers the Custodian's id (to be precise: 13 LSbits of it) and does not accept accept commands via RF from any other node. If there is such an attempt, the Configurable mode is cleared.

Note that only node types with TCVE support this functionality. In fact, for all practical purposes, this kind of functionality seriously questions a reason for nodes with different types of OSSIs within one praxis.

Touched shared_plugin; Pawel, please check and smooth things there, perhaps when we implement CMD_SNIFF:
- tarp -> tarpall
- added -pegmode parameter
- added RC_ERES, RC_ELEN

Same applies to the uart_plugin document. However, the changes there are temporary, to clean up when the 'preliminary i/f' is updated as well, after CMD_SNIFF implementation.

WO160319A:
 Alphanet (locaspot): (preliminary?) SNIFFER implementation as a TCV plugin collocated and deeply coupled with the praxis. Lightly tested, I'll wait for Pawel's comments, as I'm not sure about so much digression from the praxis' intended functionality (on the other hand, this may be extremely useful in the field).
  - sniffer.cc / h - the plugin and its i/f;
  - oss_peg_tcve.cc - UI to the plugin;
  - net.c - net_id ALWAYS is set in outgoing packets (for all praxes using this i/f)
  - touched shared_plugin.tcl for 'sniff'
  - commited DATAFILES/alphasamples.txt Pawel sent
  - updated (in spot) preliminary.docx and uart_plugin.odt, with 160309 prefixes.
  - SNIF_DBG is left ON, for observing crucial plugin state changes (in EMUL window).
 In LibComms, I replaced unused TARP flags with equivalent 'per packet' functionality, potentially useful. It was in preparation for a different sniffer implementation, not needed now, but the 'pp' fields are less wasteful.
 
WO160323A:
 Alphanet (locaspot): some sensitive CMD_SET are operational (not in PMOD_REG); it seems we have some anticipated 'field testing' capacity:
 - added settable PAR_TARP_RSS (0x11) (tarprss in shared_plug) - the threshold for the SPD cache updates;
 - made settable: PAR_TARP_S (tarpslack), PAR_TARP_R (tarprrec), PAR_TARP_L (tarplevel), PAR_TARP (tarpall);
 - tarp.h now provides macra to set particulars in tarp_ctrl.param; they're used within the tcve i/f;
 - note the tarpslack / tarprrec swap in shared_plug - they were inconsistent with the praxis;
 - updated (NOT renamed) preliminary.docx, uart_plugin.odt (we'll have embedded 'Histories' if we ever discover & sync with AT's nomenclature).
 
 Likely, we're away from Alphanet 2.0 by NVM operations and '(multiple) master politics'. We need inspiration from daily operations and needs.
 
WO160408A:
  Alphanet (locaspot): an attempt at facilitating migration 1.0 -> 1.5:
  - DEF_CHAN 128 -> 0, DEF_NID 78 -> 77;
  - added BTYPE_AT_BUT1_1_0 and BTYPE_AT_BUT6_1_0 and used it in 
    oss_peg_tcve.cc and tag_mgr.cc, perhaps all the rest would work

WO160415A:
  Alphanet (locaspot): ver 1.53 flashed into Antwerp nodes:
  - DEF_NID 88 (netid)
  - added settable PAR_RFCHAN (rfchan in shared_plugin)
  - default slack 1
  In netting_demo:
  - added sh (set local host), sc (set channel)
  - stats show the channel
  - changed TARP_DEF_RSSITH 40->90
  - commented out options more suitable for some tests (TARP_MAXHOPS, DEF_PLEV)
  Updated preliminary.docx, uart_plugin. Netting demo doc is NOT updated.

WO160417A:
 Alphanet:
 - Added PMOD_EXCC(3) for 'exclusive cusdtodian'. The idea is to have an option
   of bestowing custodian functionality on any peg (PMOD_CUST) or bringing
   a node capable of all peg / custodian functionality but not participating in
   networking unless for strictly defined custodian business of sniffing and
   remote comands. The recommended functionality: flash the node with alien NID;
   setparam -pegmod 3; setparam -netid <desired_netid>. When PMOD_EXCC is set:
   - guide_rtr() makes the node not participating in soft acks even with
     TARP_RTR set.
   - all watchdogs beacons and loopers are killed.
   Changing pegmode from PMOD_EXCC to anything resets the node. If we ever do
   NVM here, fo NOT write pegmode there.

WO160419A:
 Alphanet: Added CMD_RESET, CMD_NHOOD, REP_NHOOD, msg_nh, msg_nhAck.
 NOT TESTED, submission for shared_plug updates.

WO160419B:
 Alphanet 1.6: Fixed moronic typos & mistakes in CMD_NHOOD handling. Lightly
 tested in VUEE, with Pawel's updates to shared_plug.
 The version set to 1.6 - it'll be flashed in AT with tag looper set to 120s.

WO160425A:
 Alphanet: I MUST submit this, for maintenance. Note that all images I generated for AT on April 21, April 22 have those changes in and they're ver. 1.6, so I don't change the version:
 - changed burst spacing from 5 to 30 ms (plus rnd mod 7).
 - fixed loca audit looping every 7ms (now it audits every 7s.

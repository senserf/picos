PG111027A:

	Started RTAGS. Previous modifications were crudely described at the
	respective commits.

	PIP is slowly approaching a shape making it almost presentable. Here is
	the list of things that work:

	- Opening projects, handling files, adding files to projects, deleting
	  files, directories, and so on. The file handling part is practically
	  complete together with the reasonably powerfull, flexible, and
	  friendly tree viewer in the left pane of the project window.

	- Editing files. Maybe to say that elvis has been integrated with PIP
	  would be an overstatement, but it has been made to collaborate. Some
	  work remains to be done (e.g., ctags can be improved), but it is
	  quite OK already. In particular:

	  - Files are opened for editing by clicking on them, including
	    clicks in the terminal pane. Clicking on an error location produced
	    by the compiler (including picomp) opens the file at the requisite
	    position.

	  - Tagging basically works. When you click on an object in an elvis
	    window, PIP will locate the file with the object's definition and
	    try to open that file at the perinent location. Some tags still
	    don't work, but its is pretty much clear how to fix the problems
	    (so we will take care of the details after some more desperately
	    needed things have been made to work).

	  - PIP knows which files have been modified and not saved, so it can
	    notify the user and even force a file to be saved before a build.

	- Simple (skeletal) builds. PIP invokes mkmk, make, and picomp to
	  compile things.

	I am going to work next on VUEE, i.e., some integration of picomp and
	udaemon with PIP.

PG111029A:

	VUEE is now "integrated". this is the first "presentable" version
	including installation scripts for elvis and PIP. Many cleanups and
	two or three bugs fixed. Previously, the running status of a term
	action wasn't recognized properly (in particular when PIP thought it
	had killed the process, it wasn't always true). That should be OK now.

PG111030A:

	Changed the kill signal for pipe processes from QUIT to INT. QUIT would
	cause unnecessary core/stack dumps. Also the kill operation now handles
	pipes with multiple (more than 2) stages in a (hopefully) foolproof
	manner.

	A few cosmetics in README.txt.

PG111106A:

	Integrated the Elprotronic loader (sort of). Improved the handling of
	elvis commands (piped to elvis windows) by delaying them for a while
	until the window has started.

PG111107A:

	Integrated genimage.

PG111107B:

	A few cleanups (genimage integrated slightly better ;-). PIP is now
	more exact about cleaning up at termination, i.e., killing all its
	spawned programs and scripts.

PG111108A:

	Debug information is now written to stdout only when pip has been
	called with -D, i.e., pip -D.

	Ctags handling improved:

	1. static local tags are now included in the scan (the more the better,
	   I think)

	2. system files are also tagged (and opened read-only when referenced)

	For the latter, PIP needs the project's Makefile(s). Whenever a new
	Makefile is created, PIP re-runs a script (mkstags) which picks from
	all the Makefiles currently present in the project all the system
	files needed by the project and then calls elvtags for them all. This
	does take some time, but looks acceptable to me, especially that
	generating a Makefile is not exactly instantaneous.

	The action of opening a project with Makefile(s) present is now
	noticeably longer, but we can live with that, I guess. Please let me
	know if you can't.

	To do:

	1. a way to open system files for writing (so you can edit them form a
	   project)

	2. if there's a compilation error in a system file, a click on the
	   error message should open the file (possibly for writing, if the
	   right option is enabled - I guess that option can be a configuration
	   attribute of the project); at present only local files are opened
	   on such a click; I have to sleep on this to do it right

PG111113A:

	Simplified loader configuration (auto option included for the path to
	executable).

	Integrated msp430-gdb (and msp430-gdbproxy) with PIP (under Linux). It
	was in fact much more challenging that integrating the Elprotronic
	loader, because I had to write a special (and not completely trivial)
	Tk script glueing together gdb with the proxy. This script (which can
	be used independently of PIP) looks like a poor man's GUI for GDB.

	Cleaned up a few minor problems along the way.

	Genimage still doesn't want under Linux, because it requires the Image
	files to be in the Intel HEX (.a43) format. I will see what I can do.

PG111115A:

	System files can now be openened by clicking on them in the terminal
	pane, not only via ctag references. They are still always opened
	read-only. I am not sure of we should allow opening them read-write
	from a project. Should we? Always? On some flag?

	To do:

	1. Cleaning operations (a Clean button and a way to set up a .mop file)

	2. A possibility to edit an external file and/or copy its content to a
	   "standard" project file (like options.tagall -> options.sys in
	   new_eco_demo, which presently must be done from outside)

PG111118A:

	Added color schemes for elvis. The Configuration menu includes a new
	item named "Editor schemes" which allows you to create/manipulate color
	(generally elvis configuration) schemes, such that different schemes
	can be used for different file types (this may be helpful when you edit
	or view lots of files at once). A bit of documentation may be in order
	(elvis's help may be of some assistance regarding the meaning of some
	"faces"), although the basics are simple. For a quick start:

	1. Open a project and click on "Editor schemes" (note that editor
	   configuration is not part of the per-project config, but belongs to
	   global PIP settings stored in $HOME/.piprc)

	2. Click on "New" to create a color scheme (using Default for the
	   starting point); note that you assign names to your schemes

	3. The most important colors are for the face "normal"; an easy test is
	   to change the background in "normal", which is simply the background
	   color of the editor screen; do that and click "Done"

	4. Create one or two more schemes

	5. The Assignment section is interpreted in the order of rows; ignore
	   the regexp pattern for now; whenever you open a file, its name and
	   location are compared against the rows in Assignment and the scheme
	   from the first matching row (the last column) is chosen

	To do:

	1. The items from the previous "To do" list

	2. Grep-like search through files, as suggested by Wlodek

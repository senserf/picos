This file lists CVS RTAGs pointing to significal commit's:

R050722A:

	Short checksums, encryption, cleaned PHYSOPT's, added PHYSOPT_SESID
	(both in CHIPCON as well as DM2100); station Id is now inserted by
	the transmitter; access to loose pins, including ADC on GP0-GP7 (in
	fact, GP0 is not usable as it is reserved for RSSI).

	phys_dm2100 (...) accepts only two arguments (the SId argument has
	been removed).

	The SId is now automatically inserted by the transmitter (its role
	is to act as the network Id, so it makes sense), but only if it is
	nonzero. Note that you can send a packet without touching the SId
	field by setting the station's SId to zero (PHYSOPT_SESID).

	New functions available from the dm2100 driver
	(see Libs/Lib/phys_DM2100.h):

	pin_get (pn). pn is the pin number (1 - 11, corresponding to GP1-7
	and then CFG0-CFG3 (8-11). Number zero corresponds to GP0, but GP0
	is illegal because it is reserved for RSSI. The function returns the
	value (0/1) of the respective pin.

	pin_set (pn, val) sets or clears the indicated pin (1-11), depending
	on whether val is zero or nonzero.

	pin_get_adc (pin, ref, stime) returns the ADC-converted voltage on the
	indicated pin (1-7 - only P6 pins can be used for this). If ref is
	zero, the reference voltage is 1.5V, otherwise it is 2.5V. stime gives
	(roughly) the sampling time in milliseconds (64 is the max, 0 == 4
	msec should be OK for signals that don't have to be integrated).

	Note that the receiver should be stopped before calling pin_get_adc,
	as the ADC converter is used by the receiver. If the function is
	called while the receiver is active, it returns -1 and does nothing.

	The direction of a pin is input by default. Upon the first call to
	pin_set, the pin becomes output and cannot be used for input any
	more.
	
R050730A:

	Function pin_wait (word pin, word state) for dm2100. pin is between 
	8 and 11 inclusively and corresponds to CFG0-CFG3. It declares a wait
	for the specified pin to go up. The pin value must be checked after
	the event is triggered to make sure that the pin value is in fact
	high. Note: there is no trigger for the pin going down, so this state
	must be polled by the application.

R050730B:

	Fixed pin_wait to operate on CFG1 and CFG2. The value of pin should be
	1 or 2.

R050730C:

	Added p2irq.c that wasn't included in the previous release.

R050730D:

	Added clearing P2IFG after an interrupt.

R050810A:

	Use SMCLK for driving the UARTS. This allows rates above 9600. By
	default, the rate is 19,200 with 7 bits, even partiy, 1 stop.
	Added random delays before transmission to eliminate livelocks.
	In addition to CONTROL/UART_CNTRL_RATE, there is UART_CNTRL_MODE,
	with two word parameters: character width (7/8) and parity (0-even,
	1-odd). The latter only applicable if character width is 7.


R050810B:

	Minimum legitimate packet length defineable as a constant (instead
	of 4 bytes), set to 8 for now. This eliminates more false packets
	from checksumming.
	Long delays (operation ldelay (minutes, state)). Note: 1 minute is
	64 seconds. This way I could avoid a division.

R050811A:

	UART rate calibrated to compensate for the unreliability of SMCLK.
	ACLK used for rates <= 9600 bps.

R050814A:

	UART parameters determined by compilation constants rather than
	application-callable functions. The calibration for SMCLK-driven
	rates is done by UART_CNTRL_CALIBRATE. This operation is void for
	rates driven by ACLK.
	The default rate is 9600-8-N-1. Example (put this in options.sys):

		#define	UART_RATE	19200
		#define	UART_BITS	7
		#define	UART_PARITY	0	// 0-even, 1-odd

	Variables used by the RF driver made global rather than being
	allocated by malloc.

	Fixed mkmk: my previous fix made it incompatible with CyanIDE.

	Added macros: dbg_0(c) -- dbg_a(c) (16 of them). Constants settable
	in options.sys:

		#define	dbg_level	0x800c
		// Activates dbg_2, dbg_3, dbg_f
		#define	dbg_level	0
		// Deactivates all
		#define	dbg_binary	1
		// Selects binary output: 00 06 aa 00 lv xx xx 04, where
		// lv is the level (03 for dbg_03) and xx is the argument

	Modified: memfree (p,s). The second argument (word pointer) returns
	the minimum amount of free memory ever found in the pool. If malloc
	has ever failed, the value is zero.
	Added: word staticsize (void). Returns the amount of memory (in 
	words, as usual) taken by static variables.

R050817A:

	Added M_AMRD, R_AMRD to Apps. They're cleaned up equivalents of
	Master and Reader nodes sent to RFM for their AMR demo.
	Rewritten LibComms.

R050817B:

	Copyrights.

R050820A:

	A few cleanups. Eliminated a race in the scheduler (it wasn't serious,
	but it could occasionally cause a hiccup, especially on the UART).

	Included the kludge for high frequency ACLK crystals. If the declared
	UART rate is 19200, PicOS assumes that ACLK runs from a high frequency
	crystal. HIGH_CRYSTAL_RATE (settable in options.sys) then indicates
	the crystal frequency, which can be 1, 4, or 8 (this is in MHz). If you
	use lower UART rates, everything works as before. This kludge will be
	removed later. It is clearly identifiable and does no harm.

	Added (opitonal) UART buffering on the receiving end. If the constant
	UART_INPUT_BUFFER_LENGTH is set to > 1, then UART input will be
	buffered. Previously, a scheduler action was needed for every input
	character, which could (possibly) cause data loss.

R050820B:

	Attempts at flow control (the code is present, but the signals are not
	visible on the DB9). I am checking it in for the record - no harm.

R050830A:

	Added RTag_RFM, the 1st iteration sent to RFM.
	In Libs/Lib, ser_out, ser_in, __outserial, __inserial were modified
	with bin cmd kludges.
	phys_dm2100.c: adc_disable added to PHYSOPT_RXOFF handling.

R050903A:

	ADC cleanups, change from pulse mode to extended sample mode. The ADC
	clock changed to SMCLK - to make it independent of the ACLK crystal.
	This is in preparation for the truly dual crystal version.
	pin_get_adc (word, word, word, word) has a new argument. The first
	argument is the state to resume the function after signal collection.
	If the state is NULL, the function busy-waits for the result.

	LBT (Listen Before Transmit). Two option.sys parameters:
	LBT_DELAY (default == 0, meaning no LBT). Specifies the number of
	milliseconds (1/1024s) to delay before a transmission.
	LBT_THRESHOLD (default == 2). A value between 0 and 16 specifying
	the RSSI threshold. LBT only works if the receiver is active, and it
	does not damage a reception, should it occur during the waiting
	period. My experiments suggest that LBT_DELAY == 8 and LBT_THRESHOLD
	== 2 are not bad.

	RF options cleaned. Removed the dynamically settable backoff options
	and turned into compilation constants (see sysio.h). The only dynamic
	option that can affect the backoff is PHYSOPT_CAV.

R050911A:

	Crystal issues cleaned up. CRYSTAL_RATE defines the crystal rate and
	can be 32768 or anything >= 1000000. UART rates above 9600 are only
	available with rates >= 1000000.

R050919A:

	Added two functions to get the remaining waiting time of the indicated
	process. dleft (int pid) [pid is the process identifier, e.g., as
	returned by fork or running] returns the remaning waiting time in 
	msecs (1/1024s). If the process is not waiting on a delay, the returned
	value is MAX_UINT. ldleft (int pid, address s) returns the long waiting
	time in minutes (1 min = 64 seconds). If the process is not waiting on
	ldelay, the returned value is MAX_UINT. If the second argument (s) is
	not NULL, it points to a word to contain the residual number of seconds.
	For example, if the process will be awakened after 5 minutes and 61
	seconds, then ldleft returns 5 and *s returns 61. If s is NULL, the
	value returned by ldleft is rounded to the nearest minute, e.g., 3:21
	will be returned as 3, while 3:47 as 4.

	A minor change in TCV: tcvphy_rcv returns 0 if the message was not
	accepted (no claim or no memory) and 1 otherwise. Previously, tcvphy_rcv
	returned no value.

	Fixed a buglet in zzz_malloc pointed out by Wlodek.

	UART phys added: see phys_uart.doc in Docs.

R050921A:

	Changed LED interface to DM2100. If USE_LEDS is zero, LEDs are never
	used to conserve power. LEDs are now configured/unconfigured while
	being turned on/off - to reduce power usage while they are off.
	Application can use the leds (word) function, which only works if
	LEDS_DRIVER is 1.
	PHYSOPT_GETSID returns station Id.

R050928A:

	Fixed a bug in xcvcommon.h (zzr_buffer -> zzx_buffer). Station ID is
	now always set by the transmitter, also when it is zero.
	With a high-rate crystal, the radio is strobed by ACLK rather than
	SMCLK, which should result in a better signal quality.

R051106A:

	Fixed a glitch in mkmk causing misbehavior if directories contained
	files with exotic characters (like ~ for example).

	Included a driver for RF24G. The Taiwanese boards that I have don't
	seem to work, so I cannot test the driver, but it compiles and runs.
	All signals collected from the board appear to be fine.

	fork returns NONE (-1) on too many processes. Previously, the system
	would abort on this error.

R051114A:

	CVS tree restructured to make it possible to checkout and commit
	individual components. In fact, the only thing I did was to move
	Libs under PicOS. Now, PicOS constitutes the core component, with
	SimNets and Apps being independent.

R051127A:

	First cut of the CC1100 driver. Phys interface:

		phys_cc1100 (int id, int mbl);

	Maximum buffer size need not inlcude space for CRC. Also, a written
	packet (tcv_wnp) should not include room for CRC (this is a difference
	w.r.t. CC1000 and DM2100). The two extra bytes are still returned with
	a received packet. The last byte is RSSI (0-255), and the preceding
	byte returns the channel quality assessment, whatever it is. Packet
	length need not be even, but it makes sense to keep it even for
	compatibility.

	By default, the output power is set at 0dBm, which corresponds to the
	value of 127 (RADIO_CONTROL_SETPOWER), i.e., more or less the middle.

	I have also renamed everything related to the old CHIPCON to CC1000
	(constants and file names) - for compatibility.

R051128A:

	LED interface changed. USE_LEDS removed. This functionality is taken
	over by LEDS_DRIVER. Old function leds (word) has been replaced by
	leds (int n, int what), where n is the led number (0-3) and what is
	0 (off), 1 (on), 2 (blinking). Macros LEDI (x,y) used in radio
	drivers have been redefined as leds (x, y).

	mkmk improved a bit. Its expression evaluation heuristics is now
	slightly better. Note that old mkmk may complain about tricky
	#if expressions with the new system.

R051201A:

	CC1100 registers adjusted as per RFM's note.

R051206A:
R051206B:
R051206C:

	EEPROM driver included. The following two functions are available:

	void ee_read (word loc, byte *str, word len)

	Reads len bytes starting from the specified location (<8K). Locations
	wrap around at the end on memory.

	void ee_write (word loc, const byte *str, word len)

	Stores len bytes from str at the indicated location.

	To configure EEPROM driver, put #define EEPROM_DRIVER 1 into
	options.sys.

	Directory Apps/EETest contains a trivial program for testing the
	EEPROM driver.

	RSSI returned by CC1100 in the last byte of a received packet is now
	OK. The last-1 byte contains the channel quality indicator, for what
	it is worth.

R051210A:

	The argument for SETPOWER for CC1100 is between 0 and 7 (inclusively).
	Previously, it was 0-255 scaled to 0-7.
	PicOS version is now 1.5.

	For the GENESIS board:

	leds (0, .)	connectivity diode (GP1, P6.1)
	leds (2, .)	transmitter diode (used by driver) (GP3, P6.3)
	leds (3, .)	receiver diode (used by driver) (GP2, P6.2)

	As before, leds (i, 2) == blinking. One more function,
	void fastblink (f), sets the fast blinking rate (f != 0), or resets
	the default (slow) rate (f == 0). The same rate applies to all blinking
	leds.

	Genesis reset button is on GP0. PLEASE MAKE SURE THAT THE PIN IS PULLED
	UP BEFORE BOOTING THE BOARD (e.g., with a 100K resistor), as otherwise
	it will be constantly rebooting itself (and erasing EEPROM). 

	When the button is pressed, the leds (all of them) will blink once. If
	the button is released in less than 4 sec after the blink, the board
	will reset itself (as after power up). If the button is held for longer,
	the leds will go on, an the board will erase EEPROM. Then the leds
	will blink 7 times and the board will reset.

R051212A:

	Added a test application for CC1100 (CC1100Test) that works like RFPing
	without ACKs, but with a monitoring of packet loss.

	The Genesis reset button is only active if EEPROM support is compiled
	in. This way we can disable that button (note that it is active down)
	for experiments with the prototype board.

R051221A:

	Station Id was not set in the CC1100 transmitter.
	When MALLOC_ALIGN4 == 1, chunks allocated by malloc are longword
	aligned.

R051226A:

	For CC1x00, GETPOWER returns the current transmit power rather than
	RSSI.

	GENESIS reset button pressed during boot erases EEPROM.

	If DIAG_MESSAGES > 2, it represents the amount of EEPROM to be used
	for storing diag messages. In this case, diag messages will not show
	up on the UART but will be stored in a circular buffer at the end
	of EEPROM. The specified size is rounded to up to an entire number
	of pages. For example, suppose that DIAG_MESSAGES == 1020. The upper
	1K (1024 bytes) of EEPROM will be used for the diag buffer. Application
	writes (ww_write) are only allowed to the lower 7K of EEPROM.

	`void ee_erase (void)' added to completely erase the EEPROM.

	ee_write no longer wraps around on addresses exceeding 8K (or whatever
	is available to the application after accounting for the diag buffer).
	An attempt to write past the avalable area triggers a system error.
	ee_read, however, wraps around and can read anything including the
	diag buffer.

	`void ee_dump (void)' dumps the EEPROM diag buffer to the UART (in 
	ASCII). UART_DRIVER is required for that.

R051228A:

	Added Apps/Genesis, with beta 0 for RFM (that's what was sent there).
	GeneIF... and GeneOps... added to Docs.

	Libs/LibComms updated with the newest TARP (for Genesis).

	In Libs/Lib, __inserial.c has a shorter buffer (128->64).

	Removed Libs/LibDiag.

R060103A:

	Fixed an obscure bug in kernel.c causing old and cancelled delays to 
	occasionally reincarnate in most unexpected places.

R060104A:

	INFO FLASH has been made writable from the application. Set

		INFO_FLASH == 1

	in options.sys. Then

		if_write (word num, word val)

	will write val into word number num in INFO FLASH. The total size of
	the flash is 128 words. The flash is available (for reading) as

		const word IFLASH []

	Use
		if_erase ()

	to completely erase the INFO FLASH (a good idea before starting to
	write into it).
	
	If RESET_ON_SYSERR == 1 (in options.sys), syserror causes reset. If
	LEDS_DRIVER == 1 as well, all LEDs will blink 16 times before the
	reset.

	If RESET_ON_MALLOC == 1 (in options.sys), 256 consecutive failed
	mallocs (for any given pool) will trigger reset. The count starts
	from zero after a successful allocation.

R060107A:

	Modifications to TCV: 

	#define	TCV_LIMIT_RCV	n	(in options.sys)

	Imposes a limit on the number of packets queued for reception. If that
	limit is reached, received packets will be dropped. One urgent packet
	can exceed the limit, i.e., the effective limit for an urgent packet is
	n+1. This also applies to tcvp_new with disposition RCV/RCVU (the limit
	is n+1 for RCVU).

	#define	TCV_LIMIT_XMT	n

	Imposes a limit on the number of packets queued for transmission. If
	that limit is reached, tcv_wnp will fail as on insufficient memory.
	Also, tcvp_new with disposition XMT will fail. The limit is n+1 for
	an urgent packet (DSP_XMTU).

	Function tcv_wnpu added with the header identical to tcv_wnp. It 
	allocates a buffer for an urgent packet (and sets the urgent flag in
	the header). If TCV_LIMIT_XMT is defined, tcv_wnpu allows it to be
	exceeded by 1.

R060108A:

	Urgent packets are subjected to the same backoff as regular packets,
	the only difference being that they are moved to the front of the
	queues (CC1100 only).

	Channel clear indication for CC1100 disabled. Note that active receiver
	still blocks the transmitter.

	File cc1100.h in PicOS/ has a few tuneable parameters at the front.

	Packet length issues for CC1100 solved. Now things are compatible with
	the previous drivers.

R060113A:

	New CC1100 driver. The header (cc1100.h contains a few settable
	parameters). Maximum packet length is 60 bytes (including the 2-byte
	CRC).

	Constant BANNER defined in options.sys, e.g.,

		#define BANNER "Pizda Grochowa"

	overrides the standard welcome message after boot.

	Note: I am using software CRC (see constants in cc1100.h). You can fool
	around with some of those options.

R060115B:

	A few improvements to the CC1100 driver aimed at eliminating receiver
	hangups.

R060117A:

	Genesis Beta2, including LibComms. Adjusted phys_cc1100.c, main.c,
	kernel.c to use dbg_n() without diag(). SYSVERSION 1.6.

R060125A:

	For CC1100, PHYSOPT_SETCHANNEL selects a channel 0-255,
	PHYSOPT_GETCHANNEL returns the channel number currently in effect.

R060201A:

	For CC1100, PHYSOPT_SETMODE selects one of three (0, 1, 2) "modes".
	The modes primarily refer to bit rates: 0->10kbps (the default),
	1->4.8kbps, 2->38.4kbps.

	CC1100 now backoffs (randomly) after a reception. This drastically
	improves the performance of LBT in a situation when several nearby
	nodes receive a packet and try to rebroadcast it at the same time.

	The behavior of PHYSOPT_CAV modified slightly. If the argument is
	NULL, the operation forces a random backoff before the next (immediate)
	transmission.

	Note that options.sys may define two constants related to calculating
	the randomized backoff:

	MIN_BACKOFF (default 8) determines the minimum amount of backoff in
	milliseconds.

	MSK_BACKOFF (default 0xff) is the mask applied to a random bit pattern
	to extract the value to be added to MIN_BACKOFF. With the default
	setting, the value will be between 0 and 255 (milliseconds). Feel free
	to experiment with other values.

	Script esnrpl.tcl added to Scripts - for generating variants of
	Image.a43 with different ESN.

R060213A:

	No changes to MSP code. In preparation for George's boards, I have
	made sure that eCOG still compiles and runs with CC1000. Well, it
	does, but a few touch-ups were needed.

R060301A:

	Cosmetics for eCOG: separated definitions for SDRAM to enable 
	easy declarations of other external memory chips.

R060307A:

	First working version of TR8100 driver.

R060308A:

	Minor fixes to TR8100, appears quite stable. GENESIS branch created
	(checkout -r GENESIS).

R060319A:

	Insignificant cosmetics.

R060320A:

	Added VMesh2: copy of GENESIS from -r GENESIS as of G060319A.
	SYSVER 2.0.

R060320B:

	Included second crystal option for MSP430 (Versa2). If
	CRYSTAL2_RATE is defined in options.sys and nonzero, then it indicates
	that XTL2 is present and tells its rate (which must be at least
	1000000). XTL2 is then used for SMCLK, i.e., it drives UART and
	DM2200.
	
        powerup implies clockup, powerdown implies clockdown.

R060323A:

	zz_hex_enc_table in kernel.c should have been 'const'. Conditional
	code in dm2200_sys.h for selecting between two versions of the board
	(i.e., the broken one and the target one).
	
R060325A:

	Reset on CFG3 added to VERSA2. LEDS reorganized. On 3-led boards, LED
	0 has the following meaning: OFF-RxOff/TxOff, ON (steady)-RxOn or TxOn,
	ON (blinking)-RxOn and TxOn.

R060326A:

	RADIO_USE_LEDS controls globally (independently of LEDS_DRIVER) the
	usage of leds by radio drivers. RADIO_USE_LEDS implies LEDS_DRIVERS
	and LEDS_BLINKING.

R060327A:

	Genesis on DM2200, as sent to Wavetrix (nvm, tr8100).

R060409A:

	Pins + pulse monitor for DM2200. Pins are numbered 0-11 (GPIO_0 - 7 and
	CFG0 - 3). Pins 0 and 11 are marked as unavailable (GPIO_0 is used for
	RSSI, and CFG3 is used for reset). If PULSE_MONITOR == 1 appears in
	options.sys, the pulse monitor is configured and additionally pins
	1 and 2 (GPIO_1, GPIO_2) are marked as unavailable. With the pulse
	monitor configured, GPIO_1 is used for the counter, while GPIO_2 is
	used for the notifier.

	General functions on pins:

	word pin_read (word pin)
	returns bits:	0 - pin value
		   	1 - pin is output
			2 - pin is analog in
			3 - pin is analog

	void pin_write (word pin, word val) 
	val bits:	0 - value to written (if other bits are zero)
			1 - set pin to in
			2 - set pin to analog in
			the operation is void on unavailable pins, 2 is void
			on pin >= 8

	int pin_read_adc (word state, word pin, word ref, word smt)
			pin - 0-7 (minus the unavailable pins)
			ref - 0 (1.5V reference), 1 (2.5V reference)
			smt - sample time in milliseconds
			state (if not NONE) indicates restart state when
			sample is done. Function must then be re-executed.
			Returns -1 if pin unvailable or ADC used by the
			receiver (switch off the radio before using ADC).

	Operations related to the pulse monitor:

	void pmon_init_cnt (bool edge) 
			Declares edge for the counter (0 - down, 1 - up). Must
			be called before other counter operations.

	void pmon_start_cnt (long count)
			Starts the counter. If count is negative, the old
			counter value is retained. Otherwise, it is set to
			count.

	void pmon_stop_cnt () 
			Stop the counter. It won't be incremented until the
			subsequent call to pmon_start_cnt.

	void pmon_set_cmp (long count)
			If count >= 0, starts the comparator with the indicated
			values. An event will be triggered whenever the counter
			reaches the specified value. The event will remain
			pending until accepted.
			If count < 0, the comparator is stopped.

	lword pmon_get_cnt ()
			Returns the current counter value and clears any pending
			comparator event.

	bool pmon_pending_cnt ()
			Checks if there is a pending comparator event and clears
			it.

	lword pmon_get_cmp () 
			Returns the current setting of the comparator (whether
			it is active or not).

	void pmon_init_not (bool edge)
			Declares edge for the notifier. Must be called before
			the notifier is started.

	void pmon_start_not ()
			Starts the notifier. Events will be triggered whenever
			a notifier signal arrives on GPIO_2. Such an event
			remains pending until accepted.

	bool pmon_pending_not () 
			Checks if there is a pending notifier event and clears
			it.

	void pmon_stop_not ()
			Stops the notifier until the next call to
			pmon_start_not.

	word pmon_get_state () 
			Returns the state of the pulse monitor as the following
			configuration of flags:
			PMON_STATE_NOT_RISING	0x01	notifier edge is rising
			PMON_STATE_NOT_ON	0x02	notifier is on
			PMON_STATE_NOT_PENDING	0x04	notifier event pending
			PMON_STATE_CNT_RISING	0x10	counter edge is rising
			PMON_STATE_CNT_ON	0x20	counter is active
			PMON_STATE_CMP_ON	0x40	comparator is on
			PMON_STATE_CMP_PENDING	0x80	comparator event pending

	Events triggered by the pulse monitor:
			PMON_CMPEVENT		comparator event
			PMON_NOTEVENT		notifier event

R060410A:

	The pins used by counter and notifier are made "available" if the
	counter / notifier is stopped. Functions pmon_init_... eliminated.

	Modifications:

	void pmon_start_cnt (long count, bool edge)
			Combines the functionality of previous pmon_init_cnt
			and pmon_start_cnt in the obvious way. GPIO_1 is made
			unavailable.

	void pmon_stop_cnt () 
			As before but GPIO_1 is made available. Its default
			configuration (assumed after pmon_stop_cnt) is output.

	void pmon_start_not (bool edge)
			Combines the functionality of previous pmon_init_not
			and pmon_start_not in the obvious way. GPIO_2 becomes
			unavailable.

	void pmon_stop_not ()
			As before but GPIO_2 is made available. Its default
			configuration (assumed after pmon_stop_cnt) is output.

	Constant VERSA2_TARGET_BOARD included in dm2200_sys.h to choose between
	the two variants of the board.

R060411A:

	Added (conditional) code for FCC test for DM2200. RADIO_USE_LEDS is now
	a bit mask indicating which leds are used by the radio. For example, if
	RADIO_USE_LEDS is 6, led 0 is not used by the radio and is thus
	available to the application.

R060411B:

	Updated VMesh2, so it runs as is (with right VERSA2_TARGET_BOARD).
	Removed Genesis docs (they're in Genesis branch).

R060413A:

	UART rate is now settable (if UART_RATE_SETTABLE is set). Operation:
	io (NONE, UART, CONTROL, (char*) &rate, UART_CNTRL_SETRATE). With the
	slow crystal, the legitimate rates are 12, 24, 48, 96 (the argument
	is in full hundreds). With a high-speed crystal, any rate between
	12 and 384 will work.

R060417A:

	pmon_pending_cnt renamed to pmon_pending_cmp.  Added:
	pmon_dec_cnt ()           - subtract cmp from cnt
	pmon_sub_cnt (long dec)   - subtract dec from cnt
	pmon_add_cmp (long inc)   - add inc to cmp

	Pins used by counter/notifier are readable with pin_read (the 
	unavailable bit being appended to the value)
	
R060418A:

	UART rates are limited to the standard set: 12, 24, 48, 96, 144, 192,
	288, 384 (all * 100), with rates above 96 unavailable for the slow
	crystal. UART_CNTRL_GETRATE returns the current rate / 100.

R060421A:

	if_write returns a value: -1 == ERROR (word cannot be written), or
	0 == OK.
	if_erase takes an argument: void if_erase (int). If the argument is < 0,
	the entire info flash is erased; otherwise, only the block containing
	the specified word is erased, e.g., if_erase (1) erases block 0,
	if_erase (67) erase block 1.

R060422A:

	Fixed if_erase call in every_second_versa2.h.

R060428A:

	VERSA2 RESET key pressed on power up erases info flash.

R060429A:

	All the ad-hoc random number generators used by the individual radio
	drivers have been combined into a public generator available as
	word rnd (void);
	RANDOM_NUMBER_GENERATOR should be set to 1 or 2 for this to be
	available, unless a radio driver is present, in which case
	RANDOM_NUMBER_GENERATOR is defined as 1, if it was undefined or zero.
	RANDOM_NUMBER_GENERATOR == 2 selects a high-quality (32-bit) generator
	(which needs a longword location in RAM).
	if ENTROPY_COLLECTION is set, the generator uses entropy; otherwise,
	it is congruential, deterministic, and pseudo-random.

	Memory shuffled a bit in kernel.c to avoid losses on lword/word
	misalignment.

R060430A:

	VersaMesh "alpha":
	- subtree VMesh2,
	- _IF, _Ops, Test docs, hands_on term. macra (in Docs),
	- iflash.c (this may be temporary, but as is was sent to RFM).

R060501A:

	Fixed the receiver sensitivity problem as per Frank's e-mail.
	#define GLACIER 1 (in options.sys) enables the following
	function:
	           word freeze (lword nsec, word pstat, word pval);

	When called, freeze puts the system into the power-down/slow-clock
	mode for nsec PicOS seconds effectively freezing all its activities.
	Note that nsec is long.

	With pstat and pval, you can specify a port condition (for P1 or P2)
	that will unfreeze the system before the delay expires. Byte 0 (the
	less significant byte) of pstat/pval corresponds to P1, byte 1
	corresponds to P2. For illustration, suppose that

	      pstat =  0 0 0 1 0 0 1 1  0 0 0 0 1 0 0 0      and
              pval  =  0 0 0 0 0 0 1 0  0 0 0 0 1 0 0 1

	This means that the system will unfreeze as soon as P2.0 becomes low
	(position 0 in byte 1 of pval is zero), or P2.1 becomes high, or P2.4
	becomes low, or P1.3 becomes high. Note that the 1 on position 0 in
	byte 0 of pval is ignored (as pstat has zero on that position). In
	general, pstat selects the ports, while pval indicates whether they
	should be low or high.

	If the function returns zero, it means that the delay has expired.
	Otherwise, it returns a bit mask indicating the fired ports (a fired
	port in the mask is 1 regardless of the level selection in pval).
	The port conditions are checked at 1 sec intervals. Interrupts are
	disabled during freeze, leds are off, etc. Things are restored before
	the function returns, such that the freeze period is imperceptible by
	the application. In particular, no timer attributes (including the
	seconds clock) are advanced while the system is frozen.
	
R060504A:

	DM2200: improved signal timing for xmit. Added option to collect
	RXDATA on low clock (set by default).
	Simplified freeze; now it looks like this:

		void freeze (word nsec);

	and simply freezes everything for nsec seconds. It costs next to
	nothing, so the application can do it in a loop, possibly with nsec
	equal 1 or 2 (if needed), checking any wakeup conditions by itself.

R060505A:

	Cosmetics in the new driver for DM2200 (got rid of one variable - saved
	one word). The default rcvmode is now 1 (note that it can be easily
	changed from the application).

R060505B:

	Pin cleanup to make sure that: 1) all unused pins are OUT (needed for
	power savings; this assumes that the drivers/application accounts for
	all connecting pins; note that if a pin is actually connected to a low
	impedance source and it is left as OUT, there may be a current drain);
	2) to make sure that all pins are properly re-initialized after a soft
	(non-power-down) reset.

R060510A:

	Pin operations (including PULSE_MONITOR, i.e., counter, comparator,
	notifier) have been separated from radio drivers and made independent
	(parameterizeable by TARGET_BOARD). This means, for example, that the
	set of operations previously available for DM2100 now looks exactly
	as for DM2200. Pin definitions (per TARGET_BOARD) are kept in
	MSP430/pins_sys.h. Note that different configurations of pins are
	available for different boards. Here is what we have at the moment
	(see MSP430/pins_sys.h):

	VERSA2: Pins 0-11, analog 0-7, pin 0 reserved for RSSI, pin 11 reserved
	for RESET key. Counter and notifier on pins 1 and 2.

	DM2100: Pins 0-11, analog 0-7, pin 0 reserved for RSSI. Counter and
	notifier on pins 1 and 2.

	GENESIS: Pins 0-7, analog 0-7, pin 0 reserved for RESET key. If
	LEDS_DRIVER is 1 (also when RADIO_USE_LEDS is nonzero), pins 3-5 are
	reserved for the leds. On my GENESIS boards (I am not sure if what I
	have is recent) pins 6 and 7 do not seem to be connected to the micro
	(P6.6 and P6.7, where they belong according to the schematics).
	Counter and notifier on pins 1 and 2.

	Note that when the counter/notifier is not switched on, the
	corresponding pin is available for standard use or for analog input.

	Note that I have changed the positions of leds for GENESIS (was 1-3,
	is 3-5).

	IMPORTANT!! You should include "pinopts.h" in the application program
	to have access to the pins operations. Those operations are as
	described at R060409A and subsequent updates.

R060512A:

	A new operation added to TCV: int tcv_erase (int desc, int disp):

   	disp == TCV_DSP_XMTU   -> empty the entire output queue
           	TCV_DSP_XMT    -> ... except for urgent packets
           	TCV_DSP_RCVU   -> empty the input queue
           	TCV_DSP_RCV    -> ... except for urgent packets

	See also R060107A. The immediate intent of tcv_erase is to implement
	various scenarios of putting the transceiver to sleep.

	Also: tcvphys_erase (used to empty the output queue from a phys) used to
	call the xmt plugin function on every dropped packet. I don't think that
	made a lot of sense. Now a dropped packet triggers no special plugin
	action. Note that the plugin receives no feedback when a packet is
	erased (dropped without an explicit plugin disposition), so it should
	be prepared to put up with that.

R060513A:

	Fixed GENESIS/Genesis inconsistency problems in the repository.
	A couple options borrowed from GENESIS, which are generally applicable:

	MCLOCK_FROM_CRYSTAL == 1  -> MCLK is driven by XT1 (only makes sense
	if XT1 is high frequency, above 4.5MHz)
	SPIN_WHEN_HALTED == 1     -> CPU never halts (spins through the
	scheduler if formally idle).

R060515A:

	FCC test mode for Genesis (CC1100).

R060516A:

	Fixed an interrupt selection problem for DM2200 surfacing when the
	pulse monitor was active.

R060517A:

	Fixed a pin allocation problem with DM2200 resulting in the wrong
	default setting of GPIO10.

R060520A:

	Preliminary adjustements re George's new board (eCOG only). Only 128
	kB of SRAM is visible (is it supposed to be like this?). This much
	SRAM seems to work fine, two LEDs, serial port. Radio untested yet.

R060523A:

	Fixed a problem in TCV introduced with R060512A. tcvphy_get now
	removes the packet from the phys queue (previously the packet
	stayed there until a call to tcvphy_end). This means that the
	transmitter's logic in radio drivers must be changed to account
	for the fact that subsequent calls to tcvphy_get will return
	different packets. tcvphy_end still deallocates the packet after
	transmission. Added to TCV:

		int tcv_qsize (int sfd, int dsp);

	Returns the size of the respective queue:

		dsp = TCV_DSP_RCV	- receive (input)
		      TCV_DSP_XMT	- transmit (output)
		      TCV_DSP_RCVU	- urgent packets on input
		      TCV_DSP_XMTU	- urgent packets in output queue

		bool tcv_isurgent (address pkt);

	Returns true if the packet is urgent.

	Note, I think I have fixed the driver for Versa. Still am not sure
	about GENESIS.

R060524A:

	Other drivers, brought up to date regarding the new semantics of
	tcvphy_get/tcvphy_end. Fixed a problem in phys_dm2200.c causing 
	hung reception after freeze. Improved UART restart after freeze.

R060524B:

	pin_read_adc: parameter ref can now take 3 values:

		0 - REF = 1.5V
		1 - REF = 2.5V
		2 - REF = Vcc

R060525A:

	This function has been added to the library (Libs/Lib):

		void lhold (word state, lword *del);

	which holds the process for the specified number of seconds, as in
	this example:

		#include "lhold.h"
		...
		static lword del;
		...

		  del = number_of_seconds;

		enry (HOLD_ME)

		  lhold (HOLD_ME, &del);
		  ... will get here in so many seconds ...

	The function provides a way to wait for long delays expressed in
	seconds and compensates for the inaccuracy of ldelay, which truncates
	minute delays to internal minute boundaries.
	
R060525B:

	lword lhleft (int pid, lword *del);

	returns the number of seconds that the process (pid) that has issued
	lhold will still have to wait. The result only makes sense if the
	process is actually within lhold (or about to be awakened).

R060528A:

	Fixed a problem with delay causing incorrect delays over 32 seconds
	under some circumstances.

R060529A:

	Improved UART handling on freeze. Hopefuly, no spurious characters will
	be inserted by freeze any more.

R060529B:

	Code cleanup.

R060530A:

	VersaMesh2 beta.

R060624A:

	Misc updates, ported Genesis 1.9 requests.
	Only Apps/VMesh2 and LibComms updates.

R060702A:

	Data mode, a few other fixes. Only VMesh2, LibComms updated.

R060704A:

	Minor VMesh2 corrections: binder, fork(st_rep) after CMD_MODE 1.

R060712A:

	Fixed RSSI in CC1100 (in line with GENESIS). Fixed mkmk to work with
	older Tcl versions (esp. under Linux). Cosmetic mods to CC1000 for
	experiments with George's boards.

R060719A:

	tcvphy_top modified to return packet pointer instead of the packet
	priority status. This makes more sense as the priority can be inferred
	from the packet pointer (via tcv_isurgent), while the packet pointer
	is generally much more useful.

R060720A:
R060720B:

	Reorganized pin initialization, such that only the truly unused pins
	are pre-initialized to OUT, while everything else starts as IN.
	This seems to be safer. pin_write is now int and returns ERROR if the
	operation was unsuccessful (0 otherwise).

R060721A:

	VMesh changes:
	- removed esn aggregation; dedicated counter page in flash instead;
	- obsolete: msg_st, msg_stNack, CMD_SNACK, CMD_SENS, ATTR_BRIDGE;
	- msg_br output: no esn #, no st #;
	- msg_stAck, CMD_SACK: no esn #;
	- removed option to use eeprom in VMesh;
	- pin config is backed up in nvm;
	- GPIO defaults:
	  - pins 1, 2, 3, 8, 9, 10: dig in;
	  - pins 4, 5: out high;
	  - pins 6, 7: analog in;
	- counter & io state backup on [0 - 63] 15-min. units;
	- uart buffer 72 chars, dat string up to 64 bytes;
	- reset (CMD_RESET): 0 -- soft, != 0 -- nvm erase + reset.

R060721B:

	Copied GENESIS as of G060713A; to be continued here, if needed.

R060721C:

	Added void tcv_drop (address) to TCV.

R060725A:

	VMesh changes after tests. To be sent to RFM.

R060803A:

	VMesh: Added UART rate backup, removed 1 char from dat output.

R060803B:

	Eliminated binary output in MSP430/main.c of sysver and memory.
	Corrected UART restore in VMesh.

R060813A:

	VMesh updates:
	- SYSVER 2.01
	- corrected NVM_CYC_CTRL restore from nvm
	- back to startup FD output (dbg_1) 
	- attempt at streamlined (more restricted but easier to operate)
	  duty cycles

R060831A:

	Fixed a bug introduced in R060720B to pin_sys.h. The CC1100 interrupt
	pin was incorrectly initialized as output.
	TCV restructured to make it directly compatible with SMURPH simulator.
	Fixed mkmk to properly canonize file names outside cygwin tree.

R060901A:

	Jacek's Peg and Tag incorporated into Apps. They compile, but I had to
	hack them a bit, and haven't tested them yet.

R060903B:

	LibComms and a few other pieces converted to make them compatible with
	SMURPH models. TARP not tested yet (in the simulator), but TCV is fine.

R060925B:

	nRF24L01 driver. First working version.

R061003A:

	Cosmetic rearrangements in Apps. In DM2200, receiver collects data on
	L->H transition.

R061003B:

	Tags and Pegs running on MSP430. A few of known issues still there.

R061004A:

	VERSA branched off at R060813A. Superfluous files removed from Apps/Peg
	and Apps/Tag.

R061014B:

	MSP430F1611 memory map added. Cleanup in Apps.

R061016B:

	Watchdog option added to MSP430. '#define WATCHDOG_ENABLED 1' in
	options.sys enables the watchdog, which operates on two levels.
	Hardware watchdog makes sure that clock interrupts keep arriving, and
	resets the chip if the clock stops ticking for between 1/250s and
	1s, depending on the ACLK rate. Then, a software watchdog driven
	by clock interrupts makes sure that the scheduler doesn't get stuck
	on a looping process (for more than about 17s). In the latter case,
	the reset is triggered by software, and it is then possible to
	execute an application-provided function before the actual reset.
	Such a function, if provided, has to be declared in options.sys like
	this:
			#define	WATCHDOG_SAVER()	my_watch_fun ()

	where 'my_fun' is the actual function name. The function must be
	defined in the application as 'void my_watch_fun ()'.

	The function has about 1s to carry out its operation, whatever it
	is. It has even less when ACLK is driven by a high-speed crystal
	(roughly 32768/f seconds, where f is the crystal rate in Hz). If it
	takes longer than that, the hardware watchdog will kick in and reset
	the chip.

	Caveat: if ACLK is driven by a high-speed crystal (as in GENESIS),
	the watchdog is disabled when the power-down mode is entered (i.e.,
	powerdown () is called). This is because the clock cannot then run
	fast enough to clear the watchdog on time (the maximum watchdog
	interval is too short). This shouldn't affect GENESIS, which never
	enters the power-down mode.

R061017A:

	A minor improvement to watchdog. I have noticed that the variable
	I introduced to handle the software watchdog can be eliminated with
	an easy trick. Thus, the watchdog needs no extra memory at all!!

R061018A:

	Added SFU board + a simplified (educational) RFPing for the SFU
	group.

R061021A:

	A few minor changes to the parts recycled in VUEE, inconsequential
	for PicOS.

R061024A:

	Added "void savedata (void*)". The function saves the indicated pointer
	as this process's 'data'. Sometimes this will let us save one global
	variable per process (as in new __inserial).
	Added Apps/TEST/ToySimple as a simplified Toy application to be
	discussed in the new manual.
	Some mods to Tags and Pegs re VUEE by Wlodek.

R061027B:

	Modified pin access functions to provide for the DAC available on
	MSP430x1611. A couple of applicatons added (SFU, ToySimple).

R061030A:

	A few drastic changes to the way PicOS applications are parameterized
	and compiled. Directories PicOS/MSP430/BOARDS and PicOS/eCOG/BOARDS
	contain board description, each board being described by a subdirectory
	with a few board-specific files (mostly includes). Optional params.sys
	contains CPU-specific C compiler argument, which defaults to msp430x148
	(this feature is not used at present for eCOG). board_options.sys takes
	precedence over options.sys in the application's directory. The proper
	way to call mkmk is now 'mkmk board_name', where board_name is the name
	of the board, which must coincide with one of the subdirectories in
	BOARDS (for MSP430 or eCOG). For example: 'mkmk GENESIS'. The default
	board name is GENERIC_MSP430.

R061101A:

	Fixed a bug introduced in R061027B resulting in the misbehavior of ADC
	when calculating RSSI, e.g., for VERSA2.
	Cosmetics related to R061030A.

R061104A:

	- Sync'ed in Apps/VMesh2 from VERSA (V061017A), and Apps/GENESIS from
	GENESIS.
	- PicOS SYSVERSION / SYSVER_B is 2.0 now, Genesis SYSVER_B is 1.12,
	VMesh SYSVER_B is 2.2.
	- hstat() is not static if GLACIER.

R061112A:

	Watchdog stopped during FIM write/erase operations. This is how the
	manual says things should be done.

R061115A:

	LBT threshold setting changed to percentage (0-100) instead of 0-16.

R061122A:

	Directory order in Makefiles created by mkmk is now deterministic (and
	does not depend on the location of the program tree), which will
	hopefully eliminate the bizarre relocation errors.

R061128A:

	Another fix to mkmk. I have no clue what is going on, but this time I
	have moved kernel.o to be the last loadable file. This seems to fix the
	relocation problems for good.

	UART interrupts made interruptible. This is for UART0 only, but for
	both ends (TX and RX). Apparently, i_trigger was too costly timewise
	and caused lost ticks for VERSA TX strobe timer. Generally, as long
	as we are not desperate about stack space, it may make sense to keep
	the UART interrupts interruptible.
	COLLECT_RXDATA_ON_LOW set to 0 as default (as requested by RFM).

R061207A:

	if_read added as a dummy function (macro) for compatibility with VUEE
	models.

R061216C:

	The first version with Tags and Pegs (TNP) existing in a single version
	for VUEE as well as PicOS. See Apps/TNP. mkmk redone. It can now compile
	multiple praxes co-existing in the same directory. This is needed for
	VUEE because VUEE projects may consist of multiple correlated praxes.
	A few macros added to provide alternative names for those operations
	of PicOC that tend to collide with SMURPH. I am going to document this
	soon (some time, anyway).

R061222A:

	Some cosmetics related to VUEE + docs update: PicOS201.pdf,
	VNETI201.pdf, PinOps201.pdf (partial) + source directories for these
	docs.

R061223A:

	More cosmetics.

R061224A:

	Cosmetics to fix the previous cosmetics.

R061231B:

	A few tentative changes to CC1100 driver that seem to improve LBT a bit.
	Perhaps we should send this to John. I will add the same mods to the
	official GENESIS branch.

R070119A:

	VUEE directory added to Apps to store those praxes that have been 
	made VUEE-compliant. Two such praxes are present there at the momennt.
	I am planning to re-do the CC1100 driver, so stay tuned.

R070123A:

	Old EEPROM_DRIVER changed to STORAGE_M95XXX - to reflect the fact that
	we will have to deal with multiple memory types (looking like EEPROM,
	more or less), which will be covered by multiple (quite incompatible)
	drivers.

	Operations ee_... revised to be more general and compatible with new
	external flash memories. Code foe DIAG_MESSAGS > 2 removed (I don't
	think it was extremely useful - well, we have it in the CVS archive,
	so we can revive it if ever needed).

	WARSAW board added to MSP430/BOARDS. Flash memory and radio tested.

R070130A:

	Driver for MT29xxxx flash memory for Micron included and tested. Other
	"EEPROM" interfaces slightly improved and unified (as far as the
	semantics of illegal parameters).
	Driver for ST7063 LCD modules added and tested.

R070202A:

	ADC sampler implemented whereby a continous sequence of samples can be
	collected from up to 8 ADC channels at the same time and, for example,
	stored in flash or sent over the RF link. The interface consists of
	these functions (see adc_sampler.c):

	word adcs_start (word bufsize);

	Starts the sampler (its parameters come in board_adc_sampler.h in the
	respective BOARDS directory). bufsize is the buffer size (in the number
	of sample blocks, one block corresponding to the number of channels
	sampled simultaneously). cons is the PID of the consummer process to
	be awakened whenever the buffer becomes nonempty. The function returns
	0 on success and ERROR if no memory can be allocated for the buffer.
	Note that the buffer is circular and its actual size is equal to
	(bufsize + 1) * ADCS_SAMPLE_LENGTH words, with ADCS_SAMPLE_LENGTH
	defined in board_adc_sampler.h.

	void adcs_stop ();

	Stops the sampler.

	void adcs_get_sample (word state, word *b);

	Called by the consummer process to retrieve a sample from the circular
	buffer. Returns YES on success, NO on empty buffer, but only if state
	is NONE. Otherwise, on empty buffer, the caller will be suspended and
	resumed at the indicated state when a sample becomes available. The
	second argument points to a buffer of ADCS_SAMPLE_SIZE words.

	word adcs_overflow ();

	Returns the number of overflow conditions on the buffer since last
	check. An overflow condition occurs when a sample arrives and the
	buffer is full. Zeroes the overflow counter.

	On the side, unwait(state) added to kernel.c. The function removes all
	wait requests issued in the current state so far, including the timer
	request (delay). If state is not NONE, it sets the continuation state
	for the process, i.e., the default proceed state upon the completion
	of the current state.

R070217A:

	A few rather minor tweaks required by VUEE. wait, when, trigger are now
	macros because the event number argument must be usually cast from
	pointer to int. This cast may be tricky on 64-bit machines (for VUEE),
	so it is easier to do it in a macro.

	Application ILLUSTRATION added to Apps/VUEE.

R070221B:

	The old phys_uart interface renamed as phys_uartp (for persistent), and
	another interface (phys_uart) implemened to simulate simple (unacked)
	RF interface over UART (with CRC but no built-in reliability of
	delivery). 
	Fixed a problem with interruptible interrupts (introduced some time
	ago to accommodate VERSA2's transmitter). The problem was that the
	RISE_AND_SHINE status from a stacked interrupt wasn't conveyed to the
	bottom of the stack. Constant NESTED_INTERRUPTS added in case we want
	to extend this feature (selectively) over other interrupts.
	We have a new and more elegant mechanism for triggering scheduler events
	from interrupts.

R070325A:

	AT45XXX flash driver extended to accommodate AT45DB321C (as well as
	AT45DB041 from the Warsaw board). ee_size added to the set of storage
	functions.

	ptrigger (int, word) added. It triggers the event for one indicated
	process, which is more efficient when the process Id is handy.

	SETMODE removed for CC1100. The rate is now selected by a symbolic
	constant at compilation time. It was too messy for a run-time option
	(and useless). A few parameters added to the driver to facilitate
	very high transmission rates (like 200kbps).

	Another special value (0xffff) used for station (network) Id means that
	the sender should honor the network Id value in the praxis packet. On
	reception it is equivalent to 0, i.e., promiscuous mode. For now, this
	only applies to CC1100 and phys_uart.

R070402A:

	Application LOSSTEST added to Apps/VUEE to help calibrate the
	parameters of radio channel.

R070515A:

	Misc updates to SFU praxes.

R070517B:

	Bluetooth driver for LinkMatic 2.0 by www.flexipanel.com (operating as
	an extension of phys_uart). A new board type: SFU_HEART_BLUE.

R070625A:

	Added initial entropy acquisition to DM2200 based on RSSI collected
	from radio noise.
	A few adjustements to SFU heart monitor.

R070712A:

	Created an "experimental" version of SFU HeartForce board to be used
	for trying different polling algorithm for missing samples. Added 
	FCC to Apps/TEST to keep the recently requested FCC test version of
	VERSA2 (and similar things requested in the future).

R070715A:

	Minor updates and fixes for VUEE/TNP, also init in LibComms.

R070719A:

	Rtag refreshed for today's PicOS:
	- ATTIC contains 1st Rtag (ASCII i/f) and RTag_RFM
	- Doc contains docs and Tcl i/f frozen in 2005
	- untested application

R070722A:

	Fixed three issues pointed out by Nick: 1. fixed a bug in mkmk causing
	it to ignore all but the first component of an OR/AND #if; 2. one BIS
	replaced with BIC in adcs_stop_sys (board_adc_sampler.h); 3. added a
	workaround to the bug in ADC12 (at least in some versions), which
	requires the program to access the conversion memory registers to
	clear a pending ADC interrupt.

R070723A:

	Fixed mkmk (again), this time to allow simple parenthesized stuff like
	#if (BLABLA & 0x1) || (FUBAR == 2)

R070811A:

	ADC sampler has a blocking option whereby a whole bunch of samples can
	be sent to the circular buffer as a single unit. A few tweaks for the
	SFU boards.
	SFU HeartForce App redone by adding an array to store the numbers of
	those samples that knowingly couldn't be sent (because of xmt buffer
	overflow). Such samples are automatically sent at the end of the first
	round.

R070813A:

	HeartForce firmware modified for 8-byte ESN. Documentation included in
	the app's directory.

	MCLOCK_FROM_CRYSTAL == 2  -> MCLK is driven by XT2 (this is an
	extension of MCLOCK_FROM_CRYSTAL == 1, which drives MCLK from XT1)

R070814A:

	Ashik fixed a minor bug in HEART_MONITIOR/app.c - I forgot to increase
	the formal length of HELLO packet.

R070818A:

	Added ser_outb and __outserial improved (both by Wlodek).

R070822A:

	Slight adjustments to VUEE praxes corresponding to the recent changes
	in VUEE.

R070824B:

	A few safety hatches added to I/O function to admit NULLs and ignore
	them, as opposed to crashing.

R070830A:

	ser_outb.c added to ser.h (++) to be compiled when that header is
	included.

R070908A:

	Added Apps/VUEE/tnp_demo. It includes updated TNP. TNP.doc hints on
	ways to demonstrate TNP. This is TNP version with ASCII interface,
	and some functionality still missing (trace, more commands).
	The version with binary interface and complete set of commands will
	go to VUEE/TNP directory.


R070912A:

	Fixed a bug in clock setting (with MCLOCK_FROM_CRYSTAL == 1) introduced
	when cleaning up clock settings ;-).
	CRYSTAL_RATE in BOARDS/GENESIS set to 6000000 (was 8000000, assuming the
	old type of board)

R070912B:

	Fixed Apps/VUEE/RFPING. Fixed LEDs at GENESIS to match those at GENESIS
	branch.

R070915A:

	Cosmetics in VUEE/tnp_demo. Tag's rx ON by default.

R070918A:

	Fixed a bug in phys_cc1100.c exposing the driver to a race condition
	when RX was switched off immediately after TXOFF. The net outcome was
	that the transmissions of leftover packets in such circumstances was
	ineffective.
	A few minor cleanups to eliminate -Wall warnings.

R070922A:

	Fixed a bug in Apps/VUEE/RFPing causing system errors after 'q'.
	System status word made volatile. Some weird problems resulting from
	the incorrect optimization of access to some flags in it caused
	scheduler events to interfere with led blinking.

R070924A:

	Minor changes to tnp_demo:
        - added 'proxy' distance,
        - rssi calibrated for VUEE and GENESIS boards in handcrafted boxes.


R071006A:

	is_fastblink added back to sysio.h.

R071023A:

        LEDs in GENESIS (main trunk) reordered. Also the LED numbers flashed on
	key-pressed-erase have been fixed.
	LEDs in the Warsaw board are initially off, as they should be.
	Forced sync for EEPROM on syserror.
	Cleaned up code for special-key reset/eeprom/iflash cleanup. Warsaw
	board clears eeprom when P2.4 goes high.
	Fixed a bug in MSP430 zz_uart_setrate causing incorrect dynamic rate
	setting for the second UART.

R071031A:

	One more value of 'r' for pin_read_adc. 3 => use VERef+ for reference
	voltage.
	Praxis-specific macros used by TARP converted to functions for 
	compatibility with VUEE. Note, some Apps may not compile unless they
	are fixed (e.g., see Apps/Peg, which has been fixed).
	

R071114A:

	The name of intofp macro changed to ptrtoint to bring it in sync with
	VUEE. A minor extension of Apps/VUEE/EETest.

R071118A:

	Added a driver for SHT_XX temperature/humidity sensors from Sensirion
	(www.sensirion.com). The pin-oriented ADC interface reorganized a bit.
	The ADC oscillator is now used for sample timing. A new function added
	to pin_read.c (only available if ADC_AVERAGING_OPTION is defined in
	options.sys). Its header is:

	int pin_read_adc_avg (
 
 		word state,	// To restart when done
 		word pin,	// The pin
 		word ref,	// Reference: 0-1.5V, 1-2.5V, 2-Vcc, 3-Veref
 		word smpt,	// Sample hold time interval select (0-15)
 		word intv,	// Inter-sampling interval msec
 		word nsmp	// Number of samples to average
 
 		      );

	smpt is now the holding time for the sampler expressed as on page
	17-21 of slau049f.pdf. The clock is set to ADC oscillator (at ca. 5MHz)
	with the divider of 8 (111). For example, smpt = 6 translates into
	128 cycles, roughly equal to 1/5MHz * 8 * 128 = 0.2 msec. The maximum
	holding interval, for smpt >= 12, is 1/5MHz * 8 * 1024 = 1.6 ms. 
	intv is the inter-sampling interval (if nsmp > 1). nsmp samples are
	collected and averaged. The amount of time needed by the function is
	roughly equal to nsmp * (1 + intv) msec.

	Added Apps/ECOPROJECT.

R071124A:

	Added VUEE/BoardTest, modified WARSAW/board_second.h,
	WARSAW/board_leds.h. This is for the board's volume production tests.
	(WARSAW LEDS 0, 1, 2 are RGB now.)

	Updated VUEE/tnp_demo: a few details were overwritten or missing.

	Updated Apps/VMesh2 and LibComms. They should be functionally equivalent
	to V070628A in VERSA2 branch. Rssi-based rules may be useful in
	general, and VMesh2 will be moved under VUEE.

R071124B:

	Added miscellaneous fixes to make eCOG stuff work again, especially for
	George's new board. As viewed by MSP430, these were mostly cosmetics,
	I hope.

R071127A:

	Finishing touch for GEORGE's boards. RSSI calculation for CC1000
	improved.

R071128B:

	Redone support for sensors (see R071118A). There is a single operation
	for reading sensor values:

	void read_sensor (word state, word sensid, address);

	where sensid is a sensor number, and address points to the place where
	the sensor value will be returned. Note that the length of that
	value generally depends on the sensor type. For ARTURO board, the
	sensor identifiers are SENSOR_PAR(0), SENSOR_TEMP(1), SENSOR_HUMID(2).
	Operation pin_read_adc_avg (from R071118A) has been removed as overly
	extravagant. This is still pretty much how the QSO PAR sensor is
	implemented (see PicOS/qso_par.c), but the parameters (number of
	samples to average, the intervals) are defined as constants in
	board_pins.h. Note that the sensor operations are now independent of
	the pin operations (pinopts), which means that PIN_MAX in board_pins.h
	should be zero, unless actual pin operations are needed.

R071130A:

	VUEE/BoardTest. Both All and RF go to Aries for production tests.

R071201A:

	Fixed mkmk (I forgot to replace it after eCOG fixes, sorry, sorry).
	Fixed Apps/VUEE/RFPing (pinopts.h included in globals.h).

R071206A:

	Fixes to allow CYAN IDE accommodate multiple projects in one directory
	and to let tnp_demo compile. Had to add one include file in
	PicOS/Libs/LibComms (tcv_hooks.h) to eliminate the most serious of
	compilation warnings. Requires VUEE R071206A.

R071210A:

	Stub support for actuators added. A bit of cleanup in pins handling.

R071211A:

	PHYSOPT_STATUS returns now one more bit. If 0x4 is set, it means that
	the transmitter has a pending packet to send. You can check, e.g.,
	before a reset to make sure that the last packet has been expedited.
	Here is how:

		if ((tcv_control (sfd, PHYSOPT_STATUS, NULL) & 0x4) == 0)
			goto XmitIdle;

R071216A:

	Added VUEE/eco_demo, first draft. See quick.txt in there.

R071217A:

	In VUEE/eco_demo, added large_eco.xml, minor corrections.

R071217B:

	Changed the default inter-sampling delay in eco_demo to 1 min.
	mkmk now defines the symbol BOARD_xxxx, where xxxx is the board name.
	This can be used, e.g., in options.sys, to select board-specific
	tweaks.

R071222A:

	Fixed CC1100 driver to use the absolutely lowest current in SLEEP state.
	Improved initial pin configuration for WARSAW board and fixed LEDs
	restore after freeze. To do: clean up LEDs. The way they are
	paremeterized is ugly and confusing.

R071226A:

	Added econet.odt/pdf docs to VUEE/eco_demo.

R080110A:

	A cosmetic modification to the QSO PAR sensor driver. I added a
	(conditionally compiled) option to delay the first measurement for
	some time after bringing up the reference voltage and initializing
	the ADC, hoping that it might help to stabilize the (first) result
	and thus allow me to reduce the number of samples needed to produce
	a stable reading. No such luck. But the option is left just in case.

R080114A:

	It is now possible to use mkmk to create a library of object modules
	for the particular board. For that, the params.sys file in the BOARD
	directory must specify the list of "root" files. All those + all the
	dependent files will be compiled and added to the library. Also, all
	includes listed in params.sys, as well as those needed to resolve
	compilation dependencies, will be send to the include directory
	associated with the library.

	Look at BOARDS/WARSAW/params.sys for an illustration. To build a
	library for that board, create a directory in Apps, put an empty
	options.sys file in that directory (you may use a non-empty file to
	override some options), and execute:

		mkmk WARSAW -l

	followed by make. This will create a subdirectory named LIBRARY
	containing libpicos.a + include. For illustration how to link to such
	a library, look at Apps/LIB_EXAMPLE/APP (file Makefile_app). To see the
	complete picture, do this:

		cd Apps/LIB_EXAMPLE
		mkmk WARSAW -l
		make
		cd APP
		make -f Makefile_app

	The set of includes copied to LIBRARY/include is larger than needed,
	but there should be no problem with that.

	Fixed a minor bug in UART initialization, which caused that GETRATE
	(for a settable-rate UART) returned incorrect rate until it was reset
	by SETRATE.

R080128A:

	Test for the WARSAW board (Apps/TESTS/WARSAW).

R080214A:

	Removed qso_par.[ch] and replaced with analog_sensor.[ch]. As that
	functionality in fact captures the operation of a general analog sensor
	(of which you may want to have more than one), we now allow multiple
	analog sensors to be defined this way. I was tempted to do the same for
	sht_xx, but that would complicate the driver beyond decent. And, of
	course, it makes much less sense to have multiple (identical) copies
	of the sht sensor than to have multiple analog sensors that all appear
	the way the QSO PAR sensor used to appear.

	See BOARDS/ARTURO/board_pins.h for the illustration of changes. This
	board now includes two analog sensors: the PAR (as it used to be) +
	the photodiode which I added (for testing) as sensor number 3. No need
	to change anything in eco_demo.

R080228A:

	A significant rewrite of mkmk. The standard most popular invocation,
	i.e.,
			mkmk boardname

	works as before, except that for eCOG it generates a Makefile rather
	than a project. Running make (and assuming the standard installation
	of CyanIDE V1.3) will produce loadable files in subdirectory out. If
	you want to create a project, use -p at the end, e.g.,

			mkmk GEORGE -p

	To create a library for a particular board, do this:

			mkmk boardname -l

	For an MSP430 board, this will work essentially as before (R080114A).
	For an eCOG board, the library consists of three components:

	- the include files (LIBRARY/include)
	- the ASM files (LIBRARY/asm); this is as close to a binary library
	  as you can get; a special script removes comments from those files,
	  which would otherwise reveal pretty much the complete source
	- the stubs of some files (LIBRARY/Stubs); alsoe see PicOS/Libs/Stubs

	Note that CyanIDE doesn't really allow you to have a decent library.
	What they call a library is a directory with C or ASM files, which is
	searched based on the file name. If you have an external symbol defined
	in some file, but the file name is different than that symbol, the
	file will not be located automatically. This is kind of natural, as
	those files are sources.

	My options were to program a wrapper that would search those files using
	some heuristics (that wouldn't be prohibitively tricky for C generated
	ASM files), or to assume that ALL the files in the "library" must be
	loaded with every program. As the library is intended for one specific
	board, such and assumption makes some sense. Except for one thing.
	When tarp.c/net.c are loaded, they expect the application to define
	a few "virtual" functions, abd if they are absent, the linker fails.
	This is why the Stubs are needed. They are put in an actual CyanIDE
	library, which is only searched for missing symbols. The file names of
	the Stubs are the same as the names of the corresponding functions,
	so they can link automatically. 

	The files to be compiled into a library are determined by a list stored
	in BOARDS/boardname/params.sys (see BOARDS/GEORGE for illustration) and
	their dependencies (// +++ and includes). As the Stubs are kind of
	"flexible" (did I say that?), each of them is compiled and included in
	LIBRARY/stubs only if its "contingent" file is included in the library
	(otherwise, the stub wouldn't compile, as it wouldn't have the right
	includes). The standard explicit dependency sequence (// +++) in a stub,
	specifies its contingent files. If any of those DOES NOT belong to the
	library, the stub is not included. Don't worry if you have no clue what
	I am talking about. You can see, as well as I do, that I would have
	been better off with a wrapper emulating a true library search. Too
	late. This is for CyanIDE, which is broken and likely on its way out.

	To check how it works, do something like this:

	1. Create a directory, say LIB_TEST, e.g., in Apps.
	2. Move there and create an empty options.sys file.
	3. Execute mkmk GEORGE -l followed by make.

	Now you see a subdirectory LIBRARY with three subdirectories: include,
	asm, and stubs. Here you have it.

	Now do this:

	1. Move to some praxis directory, say RFPing.
	2. Execute mkmk GEORGE -P .../LIBRARY  (where ... stands for the path
	   to the LIBRARY you have just created)

	This will produce a project for your praxis that will work with the
	library. If you go mkmk GEORGE -M, you will get a Makefile. The same
	idea applies to MSP430, except that there are no projects (so -P works
	the same as -M).

	Summary of options (following boardname):

	-l	= create Makefile for building a library (in current directory);
		  note that a list of files is required in params.sys (in the
		  board's directory)
	-m	= create Makefile for a full compilation (traditional use)
	-p	= create a project (CyanIDE only)
	-M	= create Makefile for library-based compilation (should be
		  followed by library path)
	-P	= like -M, except that creates a project for CyanIDE

	Once you have created a library, you can move the directory (I mean
	LIBRARY) to the board's directory, e.g.,

		mv LIBRARY ~/PICOS/PicOS/eCOG/BOARDS/GEORGE/

	Then, you won't have to specify the library path after -M or -P. If you
	want to create a depleted version of PICOS tree for a single board, do
	this:

	1. Create the LIBRARY.
	2. Move it to the board directory.
	3. Remove everything else from the board directory, remove all sources,
	   and pretty much everything, except for (sample) applications. Also,
	   leave these scripts in Scripts: mkmk, move_ecog_asm, cleanapp.

	If there is only one BOARD in such a package, mkmk (with no arguments)
	will default to mkmk that_board_name -M.

R080304A:

	Added VUEE/mm_demo for Combat Networks. See mm2.odt/pdf in there.

R080314A:

	Updated mm_demo, see mm doc in there.

R080318A:

	Modifications for GEORGE: RSSI rescaled, also ADC code reorganized,
	hopefully cleaned up and improved.

	If you want to rescale RSSI (different boards give slightly different
	indications unders similar conditions), look into
	PicOS/eCOG/BOARDS/GEORGE/board_rf.h. At the bottom, you will see this:

	#define	RSSI_MIN	(2800-2048)
	#define	RSSI_MAX	(3500-2048)

	The indications top off at 255. If you see that 255 is not reachable,
	then INCREASE MIN (above 2800). If you see that 255 shows up a lot,
	DECREASE MIN. If you want to see the bottom is too high, DECREASE
	MAX (below 3500), and so on.

	Battery check function added (GEORGE's board only). This is what the
	application can invoke to check the battery status:

		int battery (void);

	The function returns the ADC reading on Vin3, which should be about
	1/2 of the battery voltage under the load incurred by MN1 (switched
	with A6). Specifically, the function does this:

	1. If the ADC is currently active (being running for the receiver), it
	   does nothing and returns -1.

	2. Reconfigures the ADC to take Vin3 relative to reference.

	3. Pulls up A6 and delays for 10 msec.

	4. Starts the ADC and skips 5 samples.

	5. Collects 16 consecutive samples, then pulls A6 down and
	   returns the ADC to the receiver.

	6. Returns the rounded average of the 16 samples.

	CC1100 driver modified to make it possible to switch transmission
	rates from the praxis. See Apps/TESTS/CC1100Test for illustration.
	Basically, you go:

		tcv_control (sfd, PHYSOPT_SETRATE, (address)(&r))

	where r is word containing the rate index, which can be:

	0 -    5,000 bps
	1 -   10,000 bps
	2 -   38,400 bps
	3 -  200,000 bps

	Do this with both transmitter and receiver switched off. I have
	polished out a few things in the driver (also noticed that LBT was off
	by default - put it back in).

R080320A:

	mm_demo, as shown at Combat Networks on March 19th. For the record:
	The nodes bought by Combat were loaded with images with
	host_id = BACA000A, -B, -66, -67, and eeprom set as in mm.pdf.


R080321A:

	Script genihex added to Scripts. This is how you call it:

		genihex IFile Tag Rep Count

	e.g.,

		genihex Image_peg.a43 BACA000A CABA0FF0 10

	where:

	IFile is an ihex (a43) file (to be uploaded to the microcontroller).

	Tag is a hex value to be looked up in the file. It is treated as a
	little-endian number of the specified length. The number of hex digits
	must be even, but the total number of bytes is arbitrary.

	Rep is the replacement for the Tag. Its length (the number of hex
	digits) must be even. In principle, it can be longer or shorter than
	the Tag.

	Count is the number of versions of the Image file to be created. It
	can be absent and defaults to 1.

	This is what happens:

	The specified ihex file is read into memory and unpacked. The Tag is
	located in the file as a string of bytes starting from the least
	significant byte of the Tag. Suppose its position is L. Note that it
	can cross the record boundary in the ihex file (this is not a simple
	textual search).

	Count times this procedure is performed: the replacement is written
	into the image starting at L (the least significant byte of the
	replacement goes into position L); then the resulting image is written
	to a file, whose name looks like the input file name with the
	replacement string inserted before the suffix, e.g.,
	Image_peg_CABA0FF0.a43; then the replacement is incremented by one.

	The script verifies whether the Tag is unique within the image file,
	i.e., it occurs there exactly once.

R080328A:

	Driver for the DS18B20 temperature sensor included. The ARTURO board
	includes it at sensor number 4. Note that the formula for converting
	its readings to (centigrade) temperature is (v - 2048) / 16.

R080330A:

	Modified Apps/VUEE/RFPING to include tests for counter/notifier pins.
	One of the input data files in that directory, data4.txt, modified to
	account for the change in VUEE's specification of those pins.

R080413A:

	VUEE/eco_demo rewritten. See ecoossi, econet documents in there.

R081415A:

	Updated eco_demo for genihex. E.g.
	- generate 2 aggregators with id 10, 11:
		genihex Image_peg.a43 BACADEAD BACA000A 2

	- generate 10 collectors ids 101 - 110:
		genihex Image_tag.a43 BACADEAD BACA0065 10

R080419A:

	Updated eco_demo for the new OSSI. See oss_fmt.h.
	Changed default sensor readings from 900 to 30s.
	No hex levels (one level is multiplied 4 times).
	Cleanup, cosmetics.

R080421A:

	SHTXX driver made (more) foolproof by applying a timeout when waiting
	for the data signal to go down (to indicate the end of measurement). 
	Subdirectory OSSI added to eco_demo with the OSSI stuff (not
	documented yet).
	
R080423A:

	DS18B20 driver fixed: delays adjusted, most notably: 1) the delay
	after read pull was too long (on the boundary of tolerance, actually,
	a bit beyond), 2) the conversion delay was too short, which resulted
	in one sample lag, i.e., the sample actually acquired was from the
	previous measurement. That may not have been such a bad idea,
	considering that the conversion delay is about 800ms. This is how much
	time it takes for read_sensor to unblock.
	OSSI stuff for eco_demo updated.

R080424A:

	Routing:
       	- instrumented tarp.c for testing
	- no forwarding on hoc = hco (with usual spd adjustments)
	- on no entry in spd, check_spd returns  hco - hoc + slack

	VUEE/eco_net:
	- SENS_COLL_TIME, lare_eco and eco_test to follow true sensors
	- forwarding off on the Master

R080501B:

	Reorganized UART stuff a bit, primarily to make PicOS compile for
	MSP430FG461x CPUs. In a nutshell, it is possible to use the formally
	second USART (i.e., USART1) as the (primary) UART. This is selected
	automatically for MSP430FG461x CPUs, which have no USART0. At present,
	there is no option to use USCI as a UART (we will add it as need 
	arises). As a side effect, UART's performance should improve slightly
	for systems with a single UART configured (i.e., most of them).

	Also, reorganized and cleaned the code for setting system clocks.
	It is still messy, but less so than it used to be.

	OSSI software for eco_demo updated. The userver (UART-over-socket)
	default port changed from 4442 to 4445. 4442 was used as the default
	port for SIDE/SMURPH monitor, which caused confusing errors (on which
	I wasted a whole day).

R080506A:

	eco_demo misc:
	- corrected size of the agg. slot (34 -> 32) -- EEPROM clear is needed
	  on AGG nodes (Pegs) with the data from previous versions
	- put slots properly in [EE_SENS_MIN, EE_SENS_MAX] and
	  [EE_AGG_MIN, EE_AGG_MAX] (const stay the same)
	- no ee_write() into the last slot on EEPROM FULL
	- reset on RAM depletion (after 'No mem reset' diag)

R080516A:

	Nokia LCD driver, version 0.1 ;-) - worked on all my tests today (but
	the tests were not exactly exhaustive). The test program is in
	Apps/SEAWOLF/TEST.
	SEAWOLF reference praxis (SEAWOLF/LOADER). Almost complete, but not
	tried yet (not even compiled). Have to tie up a few loose ends.

R080524A:

	Reference application for SEAWOLF started to work. We can load images
	to the node and display them on the LCD.

R080527A:

	Reference application for SEAWOLF (Apps/SEAWOLF/LOADER) basically
	completed.

R080604A:

	Added PHYSOPT_RESET, for now to CC1100 only. Rate change/channel
	change verified to work. Directory Doc in Apps/SEAWOLF/LOADER contains
	the seed of a document I am going to write explaining the file
	exchange protocol and the reference praxis (+ the oss script).
	File README.txt contains instruction for quickly testing prototype
	boards.

R080608A:

	Completed the document for SEAWOLF/LOADER (lame as it is).
	Added Apps/ECOPROJECT/POWER_TEST.
	The LOCATION stuff included in the tree (added to Linux).

R080704A:

	Added crunning as per Wlodek's request. This is the related manual
	excerpt:

	---

	int running (code_t code)
	int crunning (code_t code)

	The argument is a code function pointer. If an instance of a process
	using the specified code function is currently active, running returns
	the pid of one (any) such instance. Otherwise, the function returns
	zero. A zombie is considered "active" by this function. The second
	variant (crunning) returns the number of active processes (including
	zombies) using the specified code function. 

	If code is NULL, then running will return the pid of the current
	process (the one that has invoked the function), and crunning will
	count the number of unused process slots, i.e., the maximum number of
	processes that can still be created.

	---

	Added a new board: MSP430/ARTURO_PMTH (Par, Moisture, Temp, Humid) with
	four sensors (numbered in this order). See board_pins.h in the board's
	directory.

	The handling of SHTxx improved to quicker detect a disconnected sensor
	(in which case zero is returned).

	Docs directory cleaned up. Version numbers removed from the manual file
	names to make it easy to update them for new versions.

R080714A:

	Process kill now triggers a memory (pool 0) event, which can be awaited
	by a process trying to fork and failing.
	Operation npwait(s) defined (for this purpose) as waitmem (0, s).

	A failed fork returns zero in all circumstances.

	Removed the NONE state option for ser_in, ser_inf, ser_out, ser_outf,
	ser_outb. Functions ser_out, ser_outf, ser_outb now wait for a process
	slot (in addition to memory) if fork fails.

R080716A:
	- Added preliminary VUEE/survey. See survey.odt.
	- In LibComms/net.c/h added net_qsize, and adjusted net_tx on TXOFF
	  (VUEE/PICOS/stdattr.h is changed as well, without tagging VUEE).
	- Changed WARSAW* boards' LEDs so RGB is 012.

R080723A:

	Board ARTTURO_PMTH (representing the target for Panama/Mexico):
	ECH20 sensor's red changed to P6.7 (as per Gerry's request).

	REFON in ADC cleared when ADC is not used (required for power-efficient
	operation). Affecting RF drivers for DM2100, DM2200, CC1000. Should be
	re-tested.

	Text capability for LCDG (Nokia display), preliminary version. To be
	modified/extended (but it does work). Also the SEAWOLF praxis modified
	to accommodate it. Document not updated as the changes will change ;-).

	Fixed a bug in xcvcommon.h causing improper chip state setting (at
	least for some modules, including DM2200) when receiver was switched
	off first and transmitter second.

	Fixed a bug in phys_dm2200.c causing that the chip was not idled
	properly after initial entropy acquisition.

	Alias getpid () (for running (NULL)) renamed to getcpid ().

	Introduced alias ptleft () for crunning (NULL). This is primarily
	required for compatibility with VUEE, but makes sense anyway.

R080726A:
	- Updated VUEE/mm_demo with Seawolfie 0.4 with Noombuzz hooks.
          See mm.odt/pdf.

R080727A:

	Fixed a problem with LEDs going on after freeze in VERSA2. The default
	setting for P4OUT was missing from boards_pin.h. Thanks Nick!

	Modified net.c to accept UART_TCV/UART_TCVP (in the new version). 
	I think we have to do something about this feature that makes it
	impossible for UART_TCV/UART_TCVP to coexist with a standard UART
	device.

	Re-done the text part of Nokia LCD driver for Seawolf. The LOADER
	praxis will not work with this version (will fix it for next release).
	The way to use the new interface is illustrated in Apps/SEAWOLF/TEST.

R080809A:

	Buttons driver added (BUTTONS_DRIVER - intended for Seawolf). Nokia LCD
	interface still to be revised (so the LOADER praxis doesn't work). I
	just want to create a decent snapshot, as things are going to change,
	possibly quite drastically.

	A script added to Apps/VUEE/survey (subdirectory SCRIPT), which is the
	thing I gave to Israat to illustrate how to extract data from the
	survey praxis.

R080812A:

	LCD driver for Seawolf redone. Pictures must be Y-reversed (cbm.tcl has
	been modified accordingly). 8 bpp image format no longer supported in
	the driver (8 bpp images look lousy, and the option takes code space).

	A set of functions for implementing simple stacks of displayable objects
	on Nokia 6100 (and possibly other LCDs in the future) provided in
	dispman.h/dispman.c (Libs/Lib). See Docs/LCDGint.pdf. Also see 
	Apps/SEAWOLF/TEST for an elaborate example.

	Apps/SEAWOLF/LOADER now compiles and runs with the new LCDG driver.
	That clumsy praxis is still needed for loading fonts and images
	into EEPROM.

R080820A:

	Long delays redone, i.e., ldelay and lhold. They still suck - I believe
	that a more fundamental revision is needed. The primary difference is
	that the seconds clock is now settable from the praxis, and long
	delays are formally decoupled from the seconds clock (i.e., resetting
	that clock will not confuse pending long delays).

	The old function seconds () is now a macro (at least on MSP - eCOG SDK
	does not allow you to have parameter-less macros with ()). It directly
	returns zz_nseconds. Two operations have been added:

	void setseconds (lword nv)	- sets zz_nseconds explicitly
	word sectomin ()		- number of seconds until next minute

	The seconds clock is advanced at fixed one second intervals. The 
	invisible minute clock used to implement ldelay, which is also used
	internally by lhold, is advanced at fixed "minute" intervals, where
	1 minute = 64 seconds. Function sectomin returns the number of seconds
	remaining to the nearest minute boundary (the returned values are
	between 64 and 1 inclusively (never zero).

	Formally, the 64-second minute can be redefined by resetting the
	constant SECONDS_IN_MINUTE to practically anything (hey, how about
	60?). I am leaving 64 for compatibility with previous versions.
	The only place where it makes some difference is lhold, which may
	become a bit less efficient (not a lot).

	Freeze delay used to be one second shorter than specified. I think I
	have fixed that. Note that freeze does not depend on the seconds/minute
	clock. Neither the seconds clock nor the minute clock is advanced
	during a freeze. This is the way it is supposed to be. You can
	do setseconds after/before freeze, if you want, but it will not affect
	long delays (which remain frozen during freeze, as they should).

	I am contemplating eliminating the minute clock altogether. It is
	confusing and obscure. For the purpose of measuring accurately long
	delays, it may make sense to implement something like a seconds
	event, i.e., an event triggered at every second boundary, which
	processes can await and decrement countdown counters by themselves.
	lhold can be trivially redone with this feature in place: it may
	be a bit less efficient, although I doubt it really. This way,
	ldelay would go. Is it needed at all? I believe that the only reason
	for implementing lhold was that ldelay was practically useless because
	of the minute boundary problem.

R080823A:

	VUEE/eco_net for phase 2. Half-cooked, submitting for testing the new
	HW in the greenhouse demo:

	- Sensor names encoded, with substitute strings in options.sys.
	  As is, the strings are "Sn: ", n = 0..4. For now, the S4 doesn't
	  call read_sensor(), value++ instead.
	- Prepared for more eeprom works.
	- Half-cooked maintenance mode.
	- Powerdown / up in tags (that's the one crucial for testing).
	- Other add-ons not used yet (the app flags, nacks, etc.).
	- Obviously missing on top of unfinished changes:
	  - saving oper param in eprom of iflash!!
	  - doc updates

R080828B:

	Added line mode to UART-over-VNETI (read Docs/Serial.pdf). Various
	cleanups in TCV_UART, e.g., removed PicOS/Libs/Lib/phys_uartp.[ch] (all
	three modes are now implemented in phys_uart.[ch]). 

	Redone form/vform. Function fsize (const char *fmt, ...) returns
	now the total size (including the NULL byte) of the formatted string.
	You can use it before encoding to allocate exactly as much memory for
	the buffer as you need. It has a companion, named vfsize, which takes
	va_par for the second argument. See Apps/TESTS/RFPUTCV (this is RFPING
	with UART over VNETI in line mode) for an illustration.

	A minor fix to mkmk (crashing on some cases of udefined symbols).

R080905A:

	tcv_plug returns an int value. ERROR means failure, i.e., occupied
	slot or index too big.

	Misc updates to scripts in eco_demo/OSSI.

R080917A:

	EcoNet updates, see ecoossi ver.1.1 for details:
	- Powerdown: CRYSTAL2_RATE 0: collectors MUST be on UART_RATE 9600,
          aggregators may be recompiled with CRYSTAL2 and higher UART speeds.
	- Selective EEPROM writes (c_flags, a_flags) changed EEPROM writes
          dynamics.
	- If msg_setTag is pending, pongAck is embedded in it (1 msg sent).
	- Fixed a glitch with eeprom slot sizes.

	IT IS NECESSARY TO REFLASH ALL NODES IN THE NETWORK AND
       	CLEAR THEIR EEPROMS.

R080918A:

	VUEE/survey: Version 0.2: 'all out' flag added. See survey.odt.

R080919B:

	OEP (Object Exchange Protocol) module included: see PicOS/Libs/Lib/oep*
	and also Docs/PICOS/oep.odt.

	Fixed a bug in storage_at45xxx.c causing occasional garbage to be
	written to EEPROM when writing at random and using the retry state
	at ee_write.

	Fixed a bug in ldleft in kernel.c (forgot to update that function after
	the last modifications to handling long delays).

R081017B:

	Create PicOS/Libs/LibLCDG containing modules for handling Nokia LCD
	images and menus. Directory Apps/SEAWOLF/TEST superseded previous
	LOADER and contains a sample praxis and oss.tcl illustrating:

	- OEP coexisting with other protocol/plugin

	- reliable communication over UART using a combination of phys_uart
	  and alternating-bit protocol (see PicOS/Libs/Lib/ab.[ch])

	- creating EEPROM images for Seawolf and uploading them into the node
	  (see image.xml, mkeeprom.tcl)

	- using menus, images, and so on; files sealists.[ch] contain functions
	  for accessing Seawolf EEPROM and building menus from Seawolf records

	All this will be documented later. Note that the praxis in SEAWOLF/TEST
	doesn't use the radio. However, it illustrates how to incorporate OEP
	into any interface.

	The module in Lib/ab.[ch], in addition to implementing a reliable link
	over UART, contains replacements for the ser_in/_out interface (as
	illustrated by the sample praxis).

	Some standard functions used by multiple scrpts in Tcl have been
	encapsulated into packages and moved to the Scripts directory. Each
	of the scripts referencing any of those packages has been equipped
	with a header that tries to look them up in the directory tree and
	source them from there. Theoretically, those packages could be
	incorporated into standard Tcl libraries, but that would create
	administrative burden and, e.g., on UNIX systems, require root access.
	A special script has been provided (isource in Scripts), which, if
	needed, generates stand alone versions of dependent scripts by
	inserting into them their requisite packages.  

	For example, these packages are required for reliable (AB) UART
	interface with the praxis: oss_u.tcl, oss_u_ab.tcl. Package oep.tcl
	implements OEP over UART. All these packages are included by the
	oss.tcl script in SEAWOLF/TEST.

	Fixed dleft to allow it to be called from the current process to
	determine the residual waiting time after a timer wait has been
	preempted by another event.

	Modified the OSS script in eco_demo for the new version of the
	praxis.

	Modified mkmk to work with the new version of mspgcc, which uses
	Windows native file paths. The problem is that make doesn't like
	those paths for dependencies, which means that both version have
	to appear in the Makefile.

	PATABLE for CC1100 modified according to the recommended settings in
	the new manual.

	Operation (macros): bytepw, wordpl, bytepl added to sysio.h. These
	operations generate pointers to word fragments in an endian-transparent
	way. For example, if w is a word, bytepw (0, w) is of type (byte*) and
	points to the less significant byte of w, while bytepw (1, w) points
	to the more significant byte. Similarly, wordpl (0, lw) is of type
	(word*) and points to the less significant word of lw (which should
	be a lword). Also, bytepl (2, lw) is a pointer to the third significant
	byte of the lword lw. 

	PID verification in those kernel functions that do this can now be
	optionally removed (it takes some code and time), see constant
	PID_VER_TYPE in kernel.c.

	New/updated documents (PICOS/Docs): LCDGint.pdf, OEP.pdf.


R081021A:

	Fixes and refinements to ab.[ch], now dubbed XRS (External Reliable
	Scheme). In particular, the maximum packet length is now determined
	from the PHY (instead of being fixed at OEP length, which was too
	short for UART, and for no good reason). For that, I need a new
	tcv_control request, PHYSOPT_GETMAXPL, which is now implemented for
	UART and most radios.

	Apps/TESTS/ToySimpleAB added to illustrate XRS (used to call it AB,
	for alternating bit, but XRS sounds better, as per Frank's advice
	to use X in important names).

	Argument -i added to mkeeprom.tcl to indicate the directory with
	pictures.

	Polished out Apps/SEAWOLF/TESTS, documented XRS in Serial.pdf, written
	Seawolf.pdf (in Apps/SEAWOLF).

	Fixed oss_u_ab.tcl / oss_u.tcl (in Scripts) such that the maximum
	packet length can now be specified as a call argument. Perhaps these
	scripts (packages) should be documented some day? Added ufront.tcl,
	which is a simple front to XRS emulating a terminal.

R081104A:

	Slightly updated versions of some Seawolf documents.

	Had to fix vform.c to compile for eCOG (eCOG compiler does not allow
	functions declared within functions).

	Sensors (including analog ones and SHT) can be now configured with
	eCOG praxes.

	Board GEORGE_ECO (in PicOS/eCOG) illustrates how to attach SHT and PAR
	to an eCOG board.

R081107A:

	Minor modifications to eCOG/main.c aimed at implementing a power saving
	mode (clock rate in powerdown mode still has to be fixed).

	Script mkmk modified to work under Linux version of mspgcc.
	Script pxport added to generate "exported" versions of PICOS.
	Directory Exports added to store "export" patterns.

R081110A:

	This is the version sent to MIMUW (according to Exports/mimuw.exp).
	Added: Installation.odt/pdf.
	Minor updates to PicOS.odt/pdf.
	A few cosmetic changes, e.g., added "const" in front of some functions
	returning char* in Apps/VUEE/tnp_demo, because the new gcc compiler
	under Linux complained about some irrelevant nonsense.
	Version bumped to 2.03.

R081111A:

	LNONE/LWNONE were incorrectly defined in sysio.h. Fortunately, they were
	(practically) never used.
	LEDs definitions fixed for WARSAW, ARTURO, and ARTURO_PMTH

R081112A:

	VUEE/eco_demo ver 1.1 changes, see ecoossi docs:
	- fixed permanent reports of gone and unconfirmed if master changed
	  ('gone' reporting seizes at 4 times the heartbeat)
	- ID, SAVE, SYNCHRONIZE commands
	- timings and triggering of collections rewritten
	- negative scks added from agg. with  full eeproms
	- lightly tested, only in VUEE - expect 'adjustments'
	- 5 s. blinking at startup (green - good; red - maintenance mode)


R081117A:

	LEDs 0 and 2 swapped in BOARDS/WARSAW (did I get it right this time?),
	also in ARTURO and ARTURO_PMTH.
	Script front.tcl added to Apps/VUEE/eco_demo/OSSI/.
	Improved storage_at45xxx.c (EEPROM for WARSAW board). The buffers are
	now properly cycled through. If this constant in set to nonzero (e.g.,
	in options.sys):

		EE_NO_ERASE_BEFORE_WRITE

	then the driver will not be erasing blocks before writing them. This
	assumes that the EEPROM is pre-erased before use, and writes never
	overlap. The gain is that ee_sync can be used ad lib (without burning
	out the EEPROM) and there are no redundant erases (in case the EEPROM
	has been in fact pre-erased).

	Fixed the praxis in SEAWOLF/TEST. When searching for images the handle
	was unnecessarily incremented causing images following small images
	(1 page) to be skipped.

R081120A:

	Cleanup in storage_at45xxx.c (forgot to delete two small unused arrays).
	The name generated by genihex now includes the lower 16 bits of the ID
	in decimal (makes it easier to assign decimal labels to flashed nodes).
	Wrote a short doc (front.odt in Apps/VUEE/eco_demo/OSSI) explaining how
	the front.tcl script for Arturo & Co. works.
	SEAWOLF/TEST modified to predefine some menus on joystick push if 
	disconnected from OSS (and EEPROM contains something sensible).

	To do: eCOG doesn't work with MALLOC_SINGLEPOOL = 1. I can see with my
	bare eyes some screwup with the constants in arch.h supposed to
	determine memory bounds, but have to commit this because Wlodek needs
	SEAWOLF/TEST ASAP.

R081121A:

	VUEE/eco_demo ver 1.1.1:
	- Negative ack is sent on full eeprom only if the option to write
	  confirmed readings is set on the responding aggregator.
	- Simple grouping is introduced: aggregators filter out collectors
	  with ids not in the same thousand as their own, i.e. if
	  coll_id / 1000 != agg_id / 1000, the pong is dropped. Together with
	  ID and SAVE commands, it allows in-the-field multi-agg. extensions
	  without duplicate sensor reports.
	- Remote cmds explicitly banned from Maintenance mode where RF
          is not operational. [In te field, when dumping eeprom content, M mode
	  should be entered to avoid collecting and writing eeprom and reading
	  (other parts of) eeprom at the same time.]
	- changed default audit freq. from 13 to 59. Assuming default sensing
	  freq. 60 s.; it makes more sense, especially on a single agg.
	  setup.
	- Removed LED signalling but the initial 5s blinking - it doesn't make
	  sense with closed boxes and invisible LEDs. 
	- In options.sys set EE_NO_ERASE_BEFORE_WRITE and
	  EE_ERASE_ON_NEW_FLASH (auto eeprom erase on virgin flash).
	- On purpose feature: on power failure, up to latest 32 eeprom writes
	  on the agg. and up to 64 on the coll. (i.e. up to 2 volatile pages)
	  may disappear. Proper procedures include node reset, which preserves
	  all writes.
	- Enabled D (eprom dumps) in Maintenance mode. (They're 5 lines / sec.)
	- In WARSAW, ARTURO, ARTURO_MPTH leds 0,1,2 are R,G,B.

R081126A:

	Power down mode for eCOG. Still have to implement freeze, which must be
	done carefully as any serious operation in PD mode is out of the
	question (the CPU is just too slow). Even at 1 sec intervals the clock
	generates too much activity. When I freeze everything in the power down
	mode, I get about 5uA current at 3.3V, but with the clock running (at 1
	sec rate) the current jumps to ca. 400uA DC / 1mA RMS.

	Modified __inserial.c to make it compatible with eCOG (the notorious
	char* problem).

	Apps/SEAWOLF/TEST/mkeeprom.tcl: if the picture directory contains an
	image file named wallpaper.nok, this picture will be included in the
	EEPROM file (at the very beginning of the Image area). The label of
	that picture should look like the ASCII string "wallpaper" terminated
	with a NULL byte. Such a picture will be used as the background by the
	LCDG display manager (Libs/LibLCDG).
	Apps/SEAWOLF/TEST/cbm.tcl: if no -l is specified, the image receives
	a default label equal to the target file name in lower case minus any
	directory prefix and any suffix. For example /home/pawel/Wallpaper.nok
	becomes wallpaper.

	Removed Apps/SEAWOLF/EEDUMPER and Apps/SEAWOLF/LOADER.

        In ope.c, OEP_STOPDELAY and OEP_CHKDELAY changed from 48 / 2 to 24 / 1.

R081127A:

	The script for Arturo upgraded: Apps/VUEE/eco_demo/OSSI/front.* . Also,
	DEF_APP_FLAGS in app_peg.h changed to 0x2C (to store all samples in
	EEPROM by default).

R081202A:

	A minor fix for Arturo's script.

	Cleanups in diag handling. It is now possible to have DIAG_MESSAGES ==
	1 or 2 with UART_TCV_MODE_N. Note that it was always possible with
	UART_TCV_MODE_L. This still doesn't work with UART_TCV_MODE_P (and
	probably never will, as that mode is marked for removal).

	With the UART handled by TCV, the diag messages are sent as special
	packets with UART interrupts disabled. They preempt and possibly
	damage regular packets, which is mostly OK when AB (XRS) runs on top
	of the PHY, unless you have an avalanche of them.

	Note that a diag packet is never queued. If a regular packet is being
	transmitted when a diag is issued, the regular packet is aborted and a
	longish sequence of garbage is inserted into the UART to make sure that
	any ongoing reception of that packet will fail (on CRC).

	Binary diags (dbg_level, dbg_x) will also work.

	The oss_u package in Scripts has been modified to intercept diag
	packets and diplay them directly to stdout. In particular, this means
	that the oss.tcl script in SEAWOLF/TEST will properly handle
	diag messages.

R081204A:

	Removed the restrictive "const" qualifier from lines in
	lcdg_dispman.[ch].

	Implemented freeze for eCOG (achieving below 5uA on bare-bones board).

	Moved "evening" after "sleep" (in eCOG's mach.h). This makes better
	sense and prevents races between interrupts and processes waiting for
	interrupt-triggered events.

R081209B:

	Fixed mkmk: dependent *.h files would not appear as part of Cyan
	projects, although the project would compile OK.

	Further improvements to low power operation on eCOG (freeze should
	block UART interrupts after all - on top of disabling the UART clocks).
	Implemented three (potentially 5) CPU power modes. Mode 4 (full power)
	is used by default, with powerdown switching to mode 2 (high ref, no
	PLL) with system clock running at 1 sec intervals. This slows down the
	CPU 10 times (25 MHz -> 2.5 MHz), while still making it possible to run
	things. Mode 0 is the absolute bottom used by freeze.

	Slight adjustments to phys_cc1000.c & co. to make sure that the
	default state of the variable direction pins is OUT, which helps the
	eCOG maintain low current usage.

	Wlodek's request: function lcdg_dm_update for Seawolf.

	Revised portnames.h, i.e., a mechanism to reference I/O ports as a
	continuous range of numbers, possibly parameterized with costants.
	I needed that on eCOG to test which ports are in fact accessible under
	particular port router settings, as well as how the port settings
	affect power usage. To do it right, I had to clean it up on MSP430 as
	well. Shouldn't we rename the file to dupa.h (for Direct Uniform Port
	Access).

	Driver for the AT45DB041 flash upgraded to properly handle the new
	features of the 'D' chip (version AT45DB041D), including the deep
	power down mode. To select these features, declare:

	#define STORAGE_AT45_TYPE 410	// == 41D

	in board_storage.h (for now added only to ARTURO_PMTH). No need to
	change anything in the praxis. The deep power down mode for the flash
	is automatically entered upon freeze. This brings about further
	savings (ca. 40%) in freeze current.

R081214A:

	SEAWOLF/YEP for the Dec. '08 demo. This is modified SEAWOLF/TEST, with
	add-ons from mm_demo. It'll be documented if confirmed as the
	functionality to be implemented at YEP target devices. Another short
	iteration is expected before the YEP 'final' version, with adjustments
	to the LCDG and SEAWOLF libraries.

R081216A:

	SEAWOLF/YEP: Added selected categories display (disp_cats()).
	Fixed the bug Nick found in nonblocking net_rx.

R081217A:

	The fixed 10 colors for Nokia LCDG redefined (it appears that read was
	swapped with blue). Added command to SEAWOLF/TEST/oss.tcl to test RGB
	colors.

	If LCDG_SETTABLE_CTABLE is defined, the driver makes the fixed color
	table settable, and this function becomes available to the praxis:

	void lcdg_setct (byte co, word val);

	where co is the color number (0-10) and val is the RGB value (12 bits,
	e.g., 0x345 means red = 5, green = 4, blue = 3).

	The oss.tcl command for testing colors looks like this:

	!ctest bg fg

	where bg is the background color and fg is the optional foreground
	color (previous color is used if absent). The command writes a line of
	text to the screen (remeber to turn it on - the 'on' command) with
	the specified background and foreground colors. It resets colors 9
	and 10.

R081229A:

	SD card driver. Read Storage.pdf in PicOS/Docs/.
	Pins in WARSAW_LCD_TEST configured for SD card, as agreed with Gerry.
	I will test whether we should move to true SPI, possibly sharing the
	pins between EEPROM and SD.

R081230A:

	Automatic/optional idle mode added to the SD card driver to conserve
	power. See Storage.pdf in PicOS/Docs/.

R090110A:

	A new version of Seawolf stuff, read LCDGint.pdf, Seawolf.pdf, EOL.pdf.
	I have removed the TEST directory from Apps/SEAWOLF. My old TEST praxis
	is in Apps/SEAWOLF/YEP/app.c_test.
	I think I have fixed Wlodek's YEP praxis to work with the new setup.

R090119A:

	Added -eofchar "" in all Tcl scripts in Scripts. On Windows, at least 
	for non-binary files, Ctrl-Z would cause stupid problems. 

	SPI mode (an option) implemented form AT45 EEPROM (Warsaw board) as
	well as the SD card driver. Verified that SD can share pins (except
	for CS, of course) with EEPROM. Measured current consumption for
	AT45 as well as SD (thanks to Gerry's breakboard) - see the comments
	in PicOS/MSP430/BOARDS/WARSAW/board_storage.h. Tried a 4GB SD card, but
	it didn't work immediately (2GB is the max). There may be some rather
	fundamental differences. Will try again when/if needed.

	#define EE_USE_UART 1 selects the SPI mode for EEPROM/SD for those
	boards in which the modules are connected the right way (this is now
	the default for WARSAW and ARTURO_PMTH).

R090120A:

	EcoNet 1.1.2: New node type (_cus), 1st attempt at the sat. link i/f.
	***See satnotes.odt.
	FOR TESTINF ONLY: sanity of the existing functionality not fully
	verified yet.

R090304A:

	Added optional (INFO_FLASH > 1) access to code flash:

		void cf_write (address, word);	// write word at address
		void cf_erase (address);	// erase segment at address

	A minor bug fixed in script.tcl in Apps/VUEE/survey/SCRIPTS/ .

	Storage operations (EEPROM) must be preceded by ee_open () - see
	Storage.pdf. The primary role of ee_open is to power the module up.
	Needless to say, there is also ee_close (). Note that ee_open IS NOW
	REQUIRED even on those boards that do not allow you to power the
	module down. Even if EEPEORM happens to work on some boards without
	ee_open, it is accidental, so don't bet on it. I have gone through
	all praxes using EEPROM (or so I think) blindly inserting ee_open
	at the beginning of root. Note that you may want to use ee_open
	(and also ee_close) dynamically.

	Wlodek: please check eco_demo. I inserted ee_close/ee_open in those
	places where (I thought) the node was going to sleep.

	Definition for the new Warsaw board added. Drivers for GPS and RTC
	are still needed.

	Initially, I was going to make the power switch (for EEPROM, SD, GPS
	and LCD) visible to the praxis as something that it could use
	explicitly, thus possibly avoiding the need for ee_open. The issue
	is complicated, however, by the need to reset some pins when powering
	a module down (for example CS for EEPROM should go down and, preferably,
	the pin direction should change to input, i.e., high Z). This is
	something that must be handled on a per module basis, and the action
	of powering something down cannot be reduced to flipping the switch.
	Then, as SD requires an explicit open operation anyway, why not EEPROM?

	Miscellaneous cleanups. I have removed the weird cross-connection of
	UART pins inherited from RFM boards. This is the old definition
	from mach.h:

	#define	UART_PREINIT_A	do { \
		_BIC (P3DIR, 0x26); \
		_BIS (P3DIR, 0x10); \
		_BIS (P3SEL, 0x30); \
	} while (0)

	and this is the new one:

	#define	UART_PREINIT_A	do { \
		_BIC (P3DIR, 0x20); \
		_BIS (P3DIR, 0x10); \
		_BIS (P3SEL, 0x30); \
	} while (0)

	This is because we need the second UART pins in the new Warsaw board.
	I already had this problem at SFU.

	Note that the boards on which this weird wiring is present can set the
	respective pins in their board_pins.h files. I think I have fixed this
	for VERSA2, but GENESIS may have to be fixed (if we still need it for
	anything). This, of course, applies to the old Warsaw board (and has
	been fixed in board_pins.h).

	Board ARTURO_PYR added to BOARDS (the special one with 6 sensors).

R090308A:

	Second UART can be configured and unconfigured dynamically (while
	being visible as a standard UART device). We need this for the new
	Warsaw board, where the same UART is used for SPI (EEPROM, SD) and GPS.

	RTC (S35390) driver works. For now, you can only set time and read
	it (enhancements will be added as they are needed). 

	Configuration: #define RTC_S35390 1 (see BOARDS/WARSAW_NEW and
	Apps/TESTS/WARSAW).

	Include rtc.h in the praxis. It defines this:

		typedef	struct {
			byte	year, month, day, dow, hour, minute, second;
		} rtc_time_t;

		word rtc_set (const rtc_time_t*);
		word rtc_get (rtc_time_t*);

	year = last two digits
	dow  = day of week (0-6), e.g., 0-Monday [it doesn't matter, really]
	hour = 24h format for now (12h AM/PM possible if needed)

	Note: unitialized RTC drains current (about 150uA)!!. Thus, the
	praxis should check it and set to anything (see code at the beginning
	of root in app.c in Apps/TESTS/WARSAW. I added initialization code to
	the kernel, but then decided to remove it: the praxis may want to be
	smart about this (note that the clock ticks if power is up, even if the
	system is down).

	GPS works (it is ASCII over second UART, so there is no specific
	driver). We will have a library function (and thread) taking care of
	it.

	LCD configured into the new Warsaw board (see BOARDS/WARSAW_NEW).
	LCD driver redone a bit. "Static" initialization moved from the
	kernel to lcd_on, as now the module can be powered up and down.
	Fixed other boards using it, but keep your eyes open. Also, shortened
	(drastically) some delays (in lcd_st7036.c). They can be increased if
	the LCD exhibits problems.

R090312A:

	Fixed storage_at45xxx.c (there was a bug in ee_open/ee_close; now they
	are made idempotent).

	Further adjustments to BOARDS/WARSAW_NEW.

R090326A:

	Desperate fixes to Arturo's front.tcl (it has been painfully broken all
	this time). Hopefuly, now at least the extraction works well.

	Board ARTURO_SD added: SD card connected as requested by Gerry.

R090408A: 2 4

	System version number as well as the release tag are now automatically
	provided by mkmk. The only place where they are defined is this file,
	i.e., RTAGS. To start things off, I am defining the current system
	version with this release tag. As of now, such a definition must be
	present in this file (the last one is authoritative). The two numbers
	following the colon are the major and minor version numbers.

	The initial diag message produced by PicOS after boot includes the
	version number as well as the release tag. The latter is simply the
	last RTAG found in this file.

	Here is the list of symbols available to the praxis:

	SYSVER_U - major version number (currently 2)
	SYSVER_L - minor version number (currently 4)
	SYSVER_S - the version string (currently "2.4")
	SYSVER_B - the "binary" version number == major * 256 + minor
	SYSVER_R - release string (currently "R090408A")

R090409A:

	Fixed a bug in sdcard.c causing occasional misinterpretation of the
	cached block number on write after read.

	Added these operations:

	sd_erase (lword, lword);	 // Note: no state argument
	sd_panic ();
	ee_panic ();

	The role of the last two is to be called upon reset. The issue has
	become a bit more complicated than it used to be, mostly because the
	"open" action for SD is nontrivial (and now it can be also nontrivial
	for EEPROM, e.g., with the power switch). Thus, we cannot blindly call
	sync on reset, as this may hang the micro. Calling close might do the
	trick in most cases, but close may be unnecessarily complicated for
	this simple action, which requires no cleanup, no power down, etc.
	(while expected to be foolproof).

	SD and EEPROM are automatically panicked on soft reset.

	Note that sd_erase has no state (in the spirit of the remaining SD
	operations). The timing varies from card to card (I only tested two,
	so this isn't very authoritative). Lexar erases itself completely
	in a fraction of a second, while Verbatim takes close to 10s. 
	Assuming that global erase is drastic and infrequent, there should be
	no problem with that.

	Oh, one more thing: erased Lexar contains all zeros, but Verbatim
	erases to all ones. Is it safe to assume that no card erases to
	something weird (like 0101010 ... for example)?

	Fixed the (somewhat defunct) ARTURO board to allow for SPI EEPROM/SD
	(EE_USE_UART).

	Note that ARTURO_SD has the SD card connected to P6 (as Gerry wanted
	it) - together with EEPROM (connected the standard way). It does
	compile with eco_demo, AFAICS.

	Note: SD_KEEP_IDLE is OFF by default, not ON (as it was erroneously
	stated in the last version of Storage.pdf). The manual has been fixed,
	and the new operations have been documented. The option still remains
	to be thoroughly tested, so be careful.

R090414A:

        EcoNet (eco_demo) 1.2 (msgs, ossi have changed):
        - Changed time / date storage, propagation and format; see ossi.odt.
        - Rpc msg reappeared, for now hacked in just for sat. tests (_cus).
        - More with sat. tests: 9600 uart, text config; see satnotes.odt.
        - Event markers stored in NVM; see ossi.odt.
        - New 'marker' plot_id; see ossi.odt.
        - SD support on pegs (aggregators). In this half baked version, SD
          and EEPROM are either or.
        - New parameters in options.sys; see ossi.odt, satnotes.odt.
	- sint vs. int diminishes vuee - fixed some on the praxis level.

        I'm submitting the code with lots of #if 0 -- sat. hw is still under
        development, and users' needs still not clear. Obvious misses:
        - When we know the sat. terminal's reliable functionality, we'll
          be able to build a suitable i/f without duplication of the PDT's
          functionality.
        - Ever changing users' requirements don't yet allow optimization of
          storage, config. parameters, OSS formatting, etc. It ma be that
          EcoNet should be treated as a meta-blueprint, customizable into
          blueprints for clesses of deployment intentions.
        No doubt this is a yet another temporary version.

R090420A:

	EcoNet 1.2 (no ver. change):
	- failed ee / sd reads don't put the node in Maintenance mode. They
	  reset the node if DIAGS are OFF (e.g. if in satmode), or report the 
	  failure if DIAGS are ON. If ee / sd fails to open, red (yellow on 
	  some nodes) LED blinks and retries every few seconds.
	- In satmode, the node auto-corrects with PushMsgHex=0 when it sees
	  a hex msg (the 1st push from the server may fail).
	- If msg slots are full on the PDT, we soft-reset it (with ATZ).
	- "Sn: " removed from reports and dumps.
	- SD in options.satpeg. In general: be very careful with options,
	  especially so when dealing with SD cards (EMPTY_STORAGE_FF).
	  The intention is to satpegs on 19200 (with APPROPRIATE SD or ee),
	  and the rest on 9600 with DIAGS 2, with SD or EE.

R090430A:

	Fixed a bug in Scripts/log.tcl (did it ever work?).

	Modified satnode in eco_demo to echo a few things over the radio to
	make the new front script happy.

	A new front script + document for Arturo.

	Tentative puller application together with a simple database and web
	site to store sensor data pulled off the EMD web site (and allow for
	simple non-destructive) retrieval (eco_demo/OSSI/PULLER).

	Started a program to retrieve sensor data from an SD card by connecting
	it directly to a PC (eco_demo/OSSI/SDReader)

	Started a GUI version of front (eco_demo/OSSI/econnect.tcl).

R090510A:

	LCDG Nokia driver can now be used with the Epson controller. Philips is
	selected by default. To select the Epson controller, include this
	setting:

		#define LCDG_N6100P_EPSON 1 

	in board_lcd.h or in options.sys. This setting only affects the
	low-level driver (file lcdg_n6100p.c).

	econnect.tcl snapshot. Still a few things to do (should be ready in a
	couple of days).

R090512A:

	See eco_demo/OSSI/ECONNECT for a Tk GUI to Arturo's network. There is
	no manual, but this is how you start:

	- create directory C:\econnect\ and copy there the file snippets.dat;
	  these are the sensor value conversion snippets for standard eco nodes

	- connect whatever nodes you want to handle to COM ports

	- executue econnect.tcl (version 8.5 of Tcl/Tk prefered, but it should
	  work with 8.4, the only problem being limited validation of snippets,
	  i.e., no loop detection)

R090519A:

	A self-contained version of econnect can now be built using freewrap
	(version 6.4.2), see http://freewrap.sourceforge.net/ . This is very
	straightforward. 

	Here is what you should do to create a self-contained version of
	econnect.tcl (this also applies to udaemon in VUEE/UDAEMON). This
	should be the prefered way of using those scripts (at least on
	Windows), as otherwise we run into messy compatibility problems with
	all the different versions of Tcl/Tk.

	1. Download freewrap (e.g., from http://freewrap.sourceforge.net/). I
	am using version 642 which I have made available from our repository
	at http://www.adremnetworks.com/olsonet/freewrap642.zip .

	2. Unpack the thing (it doesn't install - the program executes
	directly). Wherever you unpack freewrap, put a link to freewrap.exe
	into you BIN directory, such that you can conveniently execute the
	program wherever you are.

	3. Move to Apps/VUEE/eco_demo/OSSI/ECONNECT/ and execute ./mkexe.sh.
	This will create econnect.exe (Note: I don't think it makes sense to
	store those versions in the CVS repository, as they take 3.7MB each
	and can be trivially built).

	4. Do the same in udaemon's directory VUEE/UDAEMON.

	In principle, Tcl-only scripts (like Arturo's front or YEP's oss) can
	be transformed this way as well; however, the resulting executable is
	going to be a "wish" application, which means that it will want to open
	a (dummy and empty) GUI window. Thus, it doesn't make a lot of sense.
	Those scripts will be eventually retired in favor of their GUI versions.

	---

	Scripts/ufront.tcl and oss_u.tcl (and also Arturo's front.tcl as well
	as econnect.tcl) have been modified to provide for a better way of
	handling COM ports on Windows (devices like "COMx:" only work from Tcl
	for x between 1 and 9). Also, we are now accommodating devices named
	CNCAx/CNCBx (introduced by com0com - see below).

	A few cosmetic changes to match forthcoming modifications to VUEE.

	As requested by Wlodek, board ID now shows up in the banner diag
	message after system boot, along with the system release version
	(see R090408A).

	---
	com0com

	This belongs to VUEE (udaemon), but relates to econnect and other
	(future) OSS scripts.
	You can now use OSS scripts to talk to praxes running under VUEE.
	At present, this applies to econnect and Arturo's front.

	Perhaps we need a separate document for this, but the setup is in
	fact very simple, so this note may do for now. Here is a quick start
	of sorts:

	1. Download com0com (e.g., from http://com0com.sourceforge.net/). I am
	using version 2.2.0.0, which I have made available from our repository
	at http://www.adremnetworks.com/olsonet/ . You will find there these
	files:

		com0com-2.2.0.0-i386-fre.zip	(for 32-bit systems)
		com0com-2.2.0.0-x64-fre.zip	(for 64-bit systems)
		com0com-2.2.0.0.zip		(the source)

	2. Unpack the driver and install it following the simple instructions
	(there were no suprises - at least in my case - on both XP and Vista).
	You will get by default two devices named CNCA0 and CNCB0 appearing as
	two UARTs connected by a NULL modem. There is a simple GUI utility
	(called setupg) for adding/deleting device pairs and changing their
	parameters. Use it and check these options for both ends of the pair:

		emulate baud rate
		enable buffer overrun

	Without the second one, the device may occasionally get into a stall
	if one party disconnects and then connects again, with the other party
	constantly writing to the UART. The first one is probably optional.

	3. Go to eco_demo and compile the praxis for VUEE. Note: you need to
	upgrade your VUEE to R090519A!!!! Run the praxis, e.g., using
	large_eco.xml as tge data file.

	4. Invoke udaemon, preferably in its stand-alone version (see above).
	If not, make sure that you are using Tcl/Tk version 8.5 or higher.
	Connect to UART (preferably to an aggeragator, e.g., node 0). At the
	bottom of the UART window you will see a new button labeled U-U whose
	intial (default) state is Off. Click on it and select CNCB0 from the
	list (note that you can connect to a regular UART as well, e.g., if
	you have a true modem connecting you to OSSI on another computer).
	The log window should say "U-U connection successful", which means
	that your com0com installation went without problems.

	5. Invoke econnect. Select CNCA0 (the matching end of the NULL modem)
	from the "Port" menu. No need to change any other (default) selections.
	Then click "Connect". You should see Aggregator window.

	This also works for front.tcl (you can specify CNCA0 instead of COM
	port number as the first argument of "connect").

	I have updated the VUEE doc commenting a bit on the U-U feature. 

R090526A:

	Fixed a minor problem with the WARSAW_NEW board making it impossible
	to use GPS together with the SPI mode of SD/EEPROM. Well, you still
	cannot use the two together (which is physically impossible), but at
	least you can switch.

	A minor modification to mkmk allowing it to intercept "#error's". If
	you have an "#error" which mkmk should not be able to intercept, put
	"S:" as the first two characters of the message. For example (see
	mach.h):

	#error	"S: untried yet CPU type: check MSP430/mach.h"

	This error would be false (when detected by mkmk) as the requisite
	symbol for the condition is declared in a file that mkmk doesn't see.

	Sensor detection for WARSAW_NEW implemented as three extra analog
	sensors.

	Popular PHY drivers, including DM2x00, CC1000, PHYS_UART modified to
	never kill the driver processes (once they have been created at
	startup). If a driver process is killed and then resurected, it may
	not find a free slot and (quietly) fail (quietly, because driver
	processes are not started in a persistent manner). Now they won't
	fail quietly, but if they fail, it will only happen at startup, as
	opposed to at random due to process congestion. There is no penalty
	for keeping a driver process formally alive, even if the device is
	temporarily off, while this prevents its process slot form being
	stolen. Note that CC1100 was OK (so don't panic). I realized this
	problem while playing with phys_uart, notably its VUEE model.

	AB (aka XRS) has been modified slightly. There are two modes: the
	passive (default) mode is non-persistent, in the sense that the
	responsibility for any losses is delegated to the other party. I will
	document it shortly, as soon as I see that this is what I wanted.

	XML data sets for VUEE praxes modified to account for the new <radio>
	element required by VUEE in <node>.

R090528A:

	Praxis Apps/VUEE/XRSTest redone to test new EEPROM features of VUEE.

This file lists CVS RTAGs pointing to significal commit's:

R050722A:

	Short checksums, encryption, cleaned PHYSOPT's, added PHYSOPT_SESID
	(both in CHIPCON as well as DM2100); station Id is now inserted by
	the transmitter; access to loose pins, including ADC on GP0-GP7 (in
	fact, GP0 is not usable as it is reserved for RSSI).

	phys_dm2100 (...) accepts only two arguments (the SId argument has
	been removed).

	The SId is now automatically inserted by the transmitter (its role
	is to act as the network Id, so it makes sense), but only if it is
	nonzero. Note that you can send a packet without touching the SId
	field by setting the station's SId to zero (PHYSOPT_SESID).

	New functions available from the dm2100 driver
	(see Libs/Lib/phys_DM2100.h):

	pin_get (pn). pn is the pin number (1 - 11, corresponding to GP1-7
	and then CFG0-CFG3 (8-11). Number zero corresponds to GP0, but GP0
	is illegal because it is reserved for RSSI. The function returns the
	value (0/1) of the respective pin.

	pin_set (pn, val) sets or clears the indicated pin (1-11), depending
	on whether val is zero or nonzero.

	pin_get_adc (pin, ref, stime) returns the ADC-converted voltage on the
	indicated pin (1-7 - only P6 pins can be used for this). If ref is
	zero, the reference voltage is 1.5V, otherwise it is 2.5V. stime gives
	(roughly) the sampling time in milliseconds (64 is the max, 0 == 4
	msec should be OK for signals that don't have to be integrated).

	Note that the receiver should be stopped before calling pin_get_adc,
	as the ADC converter is used by the receiver. If the function is
	called while the receiver is active, it returns -1 and does nothing.

	The direction of a pin is input by default. Upon the first call to
	pin_set, the pin becomes output and cannot be used for input any
	more.
	
R050730A:

	Function pin_wait (word pin, word state) for dm2100. pin is between 
	8 and 11 inclusively and corresponds to CFG0-CFG3. It declares a wait
	for the specified pin to go up. The pin value must be checked after
	the event is triggered to make sure that the pin value is in fact
	high. Note: there is no trigger for the pin going down, so this state
	must be polled by the application.

R050730B:

	Fixed pin_wait to operate on CFG1 and CFG2. The value of pin should be
	1 or 2.

R050730C:

	Added p2irq.c that wasn't included in the previous release.

R050730D:

	Added clearing P2IFG after an interrupt.

R050810A:

	Use SMCLK for driving the UARTS. This allows rates above 9600. By
	default, the rate is 19,200 with 7 bits, even partiy, 1 stop.
	Added random delays before transmission to eliminate livelocks.
	In addition to CONTROL/UART_CNTRL_RATE, there is UART_CNTRL_MODE,
	with two word parameters: character width (7/8) and parity (0-even,
	1-odd). The latter only applicable if character width is 7.


R050810B:

	Minimum legitimate packet length defineable as a constant (instead
	of 4 bytes), set to 8 for now. This eliminates more false packets
	from checksumming.
	Long delays (operation ldelay (minutes, state)). Note: 1 minute is
	64 seconds. This way I could avoid a division.

R050811A:

	UART rate calibrated to compensate for the unreliability of SMCLK.
	ACLK used for rates <= 9600 bps.

R050814A:

	UART parameters determined by compilation constants rather than
	application-callable functions. The calibration for SMCLK-driven
	rates is done by UART_CNTRL_CALIBRATE. This operation is void for
	rates driven by ACLK.
	The default rate is 9600-8-N-1. Example (put this in options.sys):

		#define	UART_RATE	19200
		#define	UART_BITS	7
		#define	UART_PARITY	0	// 0-even, 1-odd

	Variables used by the RF driver made global rather than being
	allocated by malloc.

	Fixed mkmk: my previous fix made it incompatible with CyanIDE.

	Added macros: dbg_0(c) -- dbg_a(c) (16 of them). Constants settable
	in options.sys:

		#define	dbg_level	0x800c
		// Activates dbg_2, dbg_3, dbg_f
		#define	dbg_level	0
		// Deactivates all
		#define	dbg_binary	1
		// Selects binary output: 00 06 aa 00 lv xx xx 04, where
		// lv is the level (03 for dbg_03) and xx is the argument

	Modified: memfree (p,s). The second argument (word pointer) returns
	the minimum amount of free memory ever found in the pool. If malloc
	has ever failed, the value is zero.
	Added: word staticsize (void). Returns the amount of memory (in 
	words, as usual) taken by static variables.

R050817A:

	Added M_AMRD, R_AMRD to Apps. They're cleaned up equivalents of
	Master and Reader nodes sent to RFM for their AMR demo.
	Rewritten LibComms.

R050817B:

	Copyrights.

R050820A:

	A few cleanups. Eliminated a race in the scheduler (it wasn't serious,
	but it could occasionally cause a hiccup, especially on the UART).

	Included the kludge for high frequency ACLK crystals. If the declared
	UART rate is 19200, PicOS assumes that ACLK runs from a high frequency
	crystal. HIGH_CRYSTAL_RATE (settable in options.sys) then indicates
	the crystal frequency, which can be 1, 4, or 8 (this is in MHz). If you
	use lower UART rates, everything works as before. This kludge will be
	removed later. It is clearly identifiable and does no harm.

	Added (opitonal) UART buffering on the receiving end. If the constant
	UART_INPUT_BUFFER_LENGTH is set to > 1, then UART input will be
	buffered. Previously, a scheduler action was needed for every input
	character, which could (possibly) cause data loss.

R050820B:

	Attempts at flow control (the code is present, but the signals are not
	visible on the DB9). I am checking it in for the record - no harm.

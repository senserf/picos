This file lists CVS RTAGs pointing to significal commit's:

R050722A:

	Short checksums, encryption, cleaned PHYSOPT's, added PHYSOPT_SESID
	(both in CHIPCON as well as DM2100); station Id is now inserted by
	the transmitter; access to loose pins, including ADC on GP0-GP7 (in
	fact, GP0 is not usable as it is reserved for RSSI).

	phys_dm2100 (...) accepts only two arguments (the SId argument has
	been removed).

	The SId is now automatically inserted by the transmitter (its role
	is to act as the network Id, so it makes sense), but only if it is
	nonzero. Note that you can send a packet without touching the SId
	field by setting the station's SId to zero (PHYSOPT_SESID).

	New functions available from the dm2100 driver
	(see Libs/Lib/phys_DM2100.h):

	pin_get (pn). pn is the pin number (1 - 11, corresponding to GP1-7
	and then CFG0-CFG3 (8-11). Number zero corresponds to GP0, but GP0
	is illegal because it is reserved for RSSI. The function returns the
	value (0/1) of the respective pin.

	pin_set (pn, val) sets or clears the indicated pin (1-11), depending
	on whether val is zero or nonzero.

	pin_get_adc (pin, ref, stime) returns the ADC-converted voltage on the
	indicated pin (1-7 - only P6 pins can be used for this). If ref is
	zero, the reference voltage is 1.5V, otherwise it is 2.5V. stime gives
	(roughly) the sampling time in milliseconds (64 is the max, 0 == 4
	msec should be OK for signals that don't have to be integrated).

	Note that the receiver should be stopped before calling pin_get_adc,
	as the ADC converter is used by the receiver. If the function is
	called while the receiver is active, it returns -1 and does nothing.

	The direction of a pin is input by default. Upon the first call to
	pin_set, the pin becomes output and cannot be used for input any
	more.
	
R050730A:

	Function pin_wait (word pin, word state) for dm2100. pin is between 
	8 and 11 inclusively and corresponds to CFG0-CFG3. It declares a wait
	for the specified pin to go up. The pin value must be checked after
	the event is triggered to make sure that the pin value is in fact
	high. Note: there is no trigger for the pin going down, so this state
	must be polled by the application.

R050730B:

	Fixed pin_wait to operate on CFG1 and CFG2. The value of pin should be
	1 or 2.

R050730C:

	Added p2irq.c that wasn't included in the previous release.

R050730D:

	Added clearing P2IFG after an interrupt.

R050810A:

	Use SMCLK for driving the UARTS. This allows rates above 9600. By
	default, the rate is 19,200 with 7 bits, even partiy, 1 stop.
	Added random delays before transmission to eliminate livelocks.
	In addition to CONTROL/UART_CNTRL_RATE, there is UART_CNTRL_MODE,
	with two word parameters: character width (7/8) and parity (0-even,
	1-odd). The latter only applicable if character width is 7.


R050810B:

	Minimum legitimate packet length defineable as a constant (instead
	of 4 bytes), set to 8 for now. This eliminates more false packets
	from checksumming.
	Long delays (operation ldelay (minutes, state)). Note: 1 minute is
	64 seconds. This way I could avoid a division.

R050811A:

	UART rate calibrated to compensate for the unreliability of SMCLK.
	ACLK used for rates <= 9600 bps.

R050814A:

	UART parameters determined by compilation constants rather than
	application-callable functions. The calibration for SMCLK-driven
	rates is done by UART_CNTRL_CALIBRATE. This operation is void for
	rates driven by ACLK.
	The default rate is 9600-8-N-1. Example (put this in options.sys):

		#define	UART_RATE	19200
		#define	UART_BITS	7
		#define	UART_PARITY	0	// 0-even, 1-odd

	Variables used by the RF driver made global rather than being
	allocated by malloc.

	Fixed mkmk: my previous fix made it incompatible with CyanIDE.

	Added macros: dbg_0(c) -- dbg_a(c) (16 of them). Constants settable
	in options.sys:

		#define	dbg_level	0x800c
		// Activates dbg_2, dbg_3, dbg_f
		#define	dbg_level	0
		// Deactivates all
		#define	dbg_binary	1
		// Selects binary output: 00 06 aa 00 lv xx xx 04, where
		// lv is the level (03 for dbg_03) and xx is the argument

	Modified: memfree (p,s). The second argument (word pointer) returns
	the minimum amount of free memory ever found in the pool. If malloc
	has ever failed, the value is zero.
	Added: word staticsize (void). Returns the amount of memory (in 
	words, as usual) taken by static variables.

R050817A:

	Added M_AMRD, R_AMRD to Apps. They're cleaned up equivalents of
	Master and Reader nodes sent to RFM for their AMR demo.
	Rewritten LibComms.

R050817B:

	Copyrights.

R050820A:

	A few cleanups. Eliminated a race in the scheduler (it wasn't serious,
	but it could occasionally cause a hiccup, especially on the UART).

	Included the kludge for high frequency ACLK crystals. If the declared
	UART rate is 19200, PicOS assumes that ACLK runs from a high frequency
	crystal. HIGH_CRYSTAL_RATE (settable in options.sys) then indicates
	the crystal frequency, which can be 1, 4, or 8 (this is in MHz). If you
	use lower UART rates, everything works as before. This kludge will be
	removed later. It is clearly identifiable and does no harm.

	Added (opitonal) UART buffering on the receiving end. If the constant
	UART_INPUT_BUFFER_LENGTH is set to > 1, then UART input will be
	buffered. Previously, a scheduler action was needed for every input
	character, which could (possibly) cause data loss.

R050820B:

	Attempts at flow control (the code is present, but the signals are not
	visible on the DB9). I am checking it in for the record - no harm.

R050830A:

	Added RTag_RFM, the 1st iteration sent to RFM.
	In Libs/Lib, ser_out, ser_in, __outserial, __inserial were modified
	with bin cmd kludges.
	phys_dm2100.c: adc_disable added to PHYSOPT_RXOFF handling.

R050903A:

	ADC cleanups, change from pulse mode to extended sample mode. The ADC
	clock changed to SMCLK - to make it independent of the ACLK crystal.
	This is in preparation for the truly dual crystal version.
	pin_get_adc (word, word, word, word) has a new argument. The first
	argument is the state to resume the function after signal collection.
	If the state is NULL, the function busy-waits for the result.

	LBT (Listen Before Transmit). Two option.sys parameters:
	LBT_DELAY (default == 0, meaning no LBT). Specifies the number of
	milliseconds (1/1024s) to delay before a transmission.
	LBT_THRESHOLD (default == 2). A value between 0 and 16 specifying
	the RSSI threshold. LBT only works if the receiver is active, and it
	does not damage a reception, should it occur during the waiting
	period. My experiments suggest that LBT_DELAY == 8 and LBT_THRESHOLD
	== 2 are not bad.

	RF options cleaned. Removed the dynamically settable backoff options
	and turned into compilation constants (see sysio.h). The only dynamic
	option that can affect the backoff is PHYSOPT_CAV.

R050911A:

	Crystal issues cleaned up. CRYSTAL_RATE defines the crystal rate and
	can be 32768 or anything >= 1000000. UART rates above 9600 are only
	available with rates >= 1000000.

R050919A:

	Added two functions to get the remaining waiting time of the indicated
	process. dleft (int pid) [pid is the process identifier, e.g., as
	returned by fork or running] returns the remaning waiting time in 
	msecs (1/1024s). If the process is not waiting on a delay, the returned
	value is MAX_UINT. ldleft (int pid, address s) returns the long waiting
	time in minutes (1 min = 64 seconds). If the process is not waiting on
	ldelay, the returned value is MAX_UINT. If the second argument (s) is
	not NULL, it points to a word to contain the residual number of seconds.
	For example, if the process will be awakened after 5 minutes and 61
	seconds, then ldleft returns 5 and *s returns 61. If s is NULL, the
	value returned by ldleft is rounded to the nearest minute, e.g., 3:21
	will be returned as 3, while 3:47 as 4.

	A minor change in TCV: tcvphy_rcv returns 0 if the message was not
	accepted (no claim or no memory) and 1 otherwise. Previously, tcvphy_rcv
	returned no value.

	Fixed a buglet in zzz_malloc pointed out by Wlodek.

	UART phys added: see phys_uart.doc in Docs.

R050921A:

	Changed LED interface to DM2100. If USE_LEDS is zero, LEDs are never
	used to conserve power. LEDs are now configured/unconfigured while
	being turned on/off - to reduce power usage while they are off.
	Application can use the leds (word) function, which only works if
	LEDS_DRIVER is 1.
	PHYSOPT_GETSID returns station Id.

R050928A:

	Fixed a bug in xcvcommon.h (zzr_buffer -> zzx_buffer). Station ID is
	now always set by the transmitter, also when it is zero.
	With a high-rate crystal, the radio is strobed by ACLK rather than
	SMCLK, which should result in a better signal quality.

R051106A:

	Fixed a glitch in mkmk causing misbehavior if directories contained
	files with exotic characters (like ~ for example).

	Included a driver for RF24G. The Taiwanese boards that I have don't
	seem to work, so I cannot test the driver, but it compiles and runs.
	All signals collected from the board appear to be fine.

	fork returns NONE (-1) on too many processes. Previously, the system
	would abort on this error.

R051114A:

	CVS tree restructured to make it possible to checkout and commit
	individual components. In fact, the only thing I did was to move
	Libs under PicOS. Now, PicOS constitutes the core component, with
	SimNets and Apps being independent.

R051127A:

	First cut of the CC1100 driver. Phys interface:

		phys_cc1100 (int id, int mbl);

	Maximum buffer size need not inlcude space for CRC. Also, a written
	packet (tcv_wnp) should not include room for CRC (this is a difference
	w.r.t. CC1000 and DM2100). The two extra bytes are still returned with
	a received packet. The last byte is RSSI (0-255), and the preceding
	byte returns the channel quality assessment, whatever it is. Packet
	length need not be even, but it makes sense to keep it even for
	compatibility.

	By default, the output power is set at 0dBm, which corresponds to the
	value of 127 (RADIO_CONTROL_SETPOWER), i.e., more or less the middle.

	I have also renamed everything related to the old CHIPCON to CC1000
	(constants and file names) - for compatibility.

R051128A:

	LED interface changed. USE_LEDS removed. This functionality is taken
	over by LEDS_DRIVER. Old function leds (word) has been replaced by
	leds (int n, int what), where n is the led number (0-3) and what is
	0 (off), 1 (on), 2 (blinking). Macros LEDI (x,y) used in radio
	drivers have been redefined as leds (x, y).

	mkmk improved a bit. Its expression evaluation heuristics is now
	slightly better. Note that old mkmk may complain about tricky
	#if expressions with the new system.

R051201A:

	CC1100 registers adjusted as per RFM's note.

R051206A:
R051206B:
R051206C:

	EEPROM driver included. The following two functions are available:

	void ee_read (word loc, byte *str, word len)

	Reads len bytes starting from the specified location (<8K). Locations
	wrap around at the end on memory.

	void ee_write (word loc, const byte *str, word len)

	Stores len bytes from str at the indicated location.

	To configure EEPROM driver, put #define EEPROM_DRIVER 1 into
	options.sys.

	Directory Apps/EETest contains a trivial program for testing the
	EEPROM driver.

	RSSI returned by CC1100 in the last byte of a received packet is now
	OK. The last-1 byte contains the channel quality indicator, for what
	it is worth.

R051210A:

	The argument for SETPOWER for CC1100 is between 0 and 7 (inclusively).
	Previously, it was 0-255 scaled to 0-7.
	PicOS version is now 1.5.

	For the GENESIS board:

	leds (0, .)	connectivity diode (GP1, P6.1)
	leds (2, .)	transmitter diode (used by driver) (GP3, P6.3)
	leds (3, .)	receiver diode (used by driver) (GP2, P6.2)

	As before, leds (i, 2) == blinking. One more function,
	void fastblink (f), sets the fast blinking rate (f != 0), or resets
	the default (slow) rate (f == 0). The same rate applies to all blinking
	leds.

	Genesis reset button is on GP0. PLEASE MAKE SURE THAT THE PIN IS PULLED
	UP BEFORE BOOTING THE BOARD (e.g., with a 100K resistor), as otherwise
	it will be constantly rebooting itself (and erasing EEPROM). 

	When the button is pressed, the leds (all of them) will blink once. If
	the button is released in less than 4 sec after the blink, the board
	will reset itself (as after power up). If the button is held for longer,
	the leds will go on, an the board will erase EEPROM. Then the leds
	will blink 7 times and the board will reset.

R051212A:

	Added a test application for CC1100 (CC1100Test) that works like RFPing
	without ACKs, but with a monitoring of packet loss.

	The Genesis reset button is only active if EEPROM support is compiled
	in. This way we can disable that button (note that it is active down)
	for experiments with the prototype board.

R051221A:

	Station Id was not set in the CC1100 transmitter.
	When MALLOC_ALIGN4 == 1, chunks allocated by malloc are longword
	aligned.

R051226A:

	For CC1x00, GETPOWER returns the current transmit power rather than
	RSSI.

	GENESIS reset button pressed during boot erases EEPROM.

	If DIAG_MESSAGES > 2, it represents the amount of EEPROM to be used
	for storing diag messages. In this case, diag messages will not show
	up on the UART but will be stored in a circular buffer at the end
	of EEPROM. The specified size is rounded to up to an entire number
	of pages. For example, suppose that DIAG_MESSAGES == 1020. The upper
	1K (1024 bytes) of EEPROM will be used for the diag buffer. Application
	writes (ww_write) are only allowed to the lower 7K of EEPROM.

	`void ee_erase (void)' added to completely erase the EEPROM.

	ee_write no longer wraps around on addresses exceeding 8K (or whatever
	is available to the application after accounting for the diag buffer).
	An attempt to write past the avalable area triggers a system error.
	ee_read, however, wraps around and can read anything including the
	diag buffer.

	`void ee_dump (void)' dumps the EEPROM diag buffer to the UART (in 
	ASCII). UART_DRIVER is required for that.

R051228A:

	Added Apps/Genesis, with beta 0 for RFM (that's what was sent there).
	GeneIF... and GeneOps... added to Docs.

	Libs/LibComms updated with the newest TARP (for Genesis).

	In Libs/Lib, __inserial.c has a shorter buffer (128->64).

	Removed Libs/LibDiag.

R060103A:

	Fixed an obscure bug in kernel.c causing old and cancelled delays to 
	occasionally reincarnate in most unexpected places.

R060104A:

	INFO FLASH has been made writable from the application. Set

		INFO_FLASH == 1

	in options.sys. Then

		if_write (word num, word val)

	will write val into word number num in INFO FLASH. The total size of
	the flash is 128 words. The flash is available (for reading) as

		const word IFLASH []

	Use
		if_erase ()

	to completely erase the INFO FLASH (a good idea before starting to
	write into it).
	
	If RESET_ON_SYSERR == 1 (in options.sys), syserror causes reset. If
	LEDS_DRIVER == 1 as well, all LEDs will blink 16 times before the
	reset.

	If RESET_ON_MALLOC == 1 (in options.sys), 256 consecutive failed
	mallocs (for any given pool) will trigger reset. The count starts
	from zero after a successful allocation.

R060107A:

	Modifications to TCV: 

	#define	TCV_LIMIT_RCV	n	(in options.sys)

	Imposes a limit on the number of packets queued for reception. If that
	limit is reached, received packets will be dropped. One urgent packet
	can exceed the limit, i.e., the effective limit for an urgent packet is
	n+1. This also applies to tcvp_new with disposition RCV/RCVU (the limit
	is n+1 for RCVU).

	#define	TCV_LIMIT_XMT	n

	Imposes a limit on the number of packets queued for transmission. If
	that limit is reached, tcv_wnp will fail as on insufficient memory.
	Also, tcvp_new with disposition XMT will fail. The limit is n+1 for
	an urgent packet (DSP_XMTU).

	Function tcv_wnpu added with the header identical to tcv_wnp. It 
	allocates a buffer for an urgent packet (and sets the urgent flag in
	the header).

R060108A:

	Urgent packets are subjected to the same backoff as regular packets,
	the only difference being that they are moved to the front of the
	queues (CC1100 only).

	Channel clear indication for CC1100 disabled. Note that active receiver
	still blocks the transmitter.

	File cc1100.h in PicOS/ has a few tuneable parameters at the front.

	Packet length issues for CC1100 solved. Now things are compatible with
	the previous drivers.

R060113A:

	New CC1100 driver. The header (cc1100.h contains a few settable
	parameters). Maximum packet length is 60 bytes (including the 2-byte
	CRC).

	Constant BANNER defined in options.sys, e.g.,

		#define BANNER "Pizda Grochowa"

	overrides the standard welcome message after boot.

	Note: I am using software CRC (see constants in cc1100.h). You can fool
	around with some of those options.

R060115B:

	A few improvements to the CC1100 driver aimed at eliminating receiver
	hangups.

R060117A:

	Genesis Beta2, including LibComms. Adjusted phys_cc1100.c, main.c,
	kernel.c to use dbg_n() without diag(). SYSVERSION 1.6.

R060125A:

	For CC1100, PHYSOPT_SETCHANNEL selects a channel 0-255,
	PHYSOPT_GETCHANNEL returns the channel number currently in effect.

R060201A:

	For CC1100, PHYSOPT_SETMODE selects one of three (0, 1, 2) "modes".
	The modes primarily refer to bit rates: 0->10kbps (the default),
	1->4.8kbps, 2->38.4kbps.

	CC1100 now backoffs (randomly) after a reception. This drastically
	improves the performance of LBT in a situation when several nearby
	nodes receive a packet and try to rebroadcast it at the same time.

	The behavior of PHYSOPT_CAV modified slightly. If the argument is
	NULL, the operation forces a random backoff before the next (immediate)
	transmission.

	Note that options.sys may define two constants related to calculating
	the randomized backoff:

	MIN_BACKOFF (default 8) determines the minimum amount of backoff in
	milliseconds.

	MSK_BACKOFF (default 0xff) is the mask applied to a random bit pattern
	to extract the value to be added to MIN_BACKOFF. With the default
	setting, the value will be between 0 and 255 (milliseconds). Feel free
	to experiment with other values.

	Script esnrpl.tcl added to Scripts - for generating variants of
	Image.a43 with different ESN.

R060213A:

	No changes to MSP code. In preparation for George's boards, I have
	made sure that eCOG still compiles and runs with CC1000. Well, it
	does, but a few touch-ups were needed.

R060301A:

	Cosmetics for eCOG: separated definitions for SDRAM to enable 
	easy declarations of other external memory chips.

R060307A:

	First working version of TR8100 driver.

R060308A:

	Minor fixes to TR8100, appears quite stable. GENESIS branch created
	(checkout -r GENESIS).

R060319A:

	Insignificant cosmetics.

R060320A:

	Added VMesh2: copy of GENESIS from -r GENESIS as of G060319A.
	SYSVER 2.0.

R060320B:
	Included second crystal option for MSP430 (Versa2). If
	CRYSTAL2_RATE is defined in options.sys and nonzero, then it indicates
	that XTL2 is present and tells its rate (which must be at least
	1000000). XTL2 is then used for SMCLK, i.e., it drives UART and
	DM2200.
	
        powerup implies clockup, powerdown implies clockdown.

R060323A:
	zz_hex_enc_table in kernel.c should have been 'const'. Conditional
	code in dm2200_sys.h for selecting between two versions of the board
	(i.e., the broken one and the target one).
	
R060325A:
	Reset on CFG3 added to VERSA2. LEDS reorganized. On 3-led boards, LED
	0 has the following meaning: OFF-RxOff/TxOff, ON (steady)-RxOn or TxOn,
	ON (blinking)-RxOn and TxOn.

R060326A:
	RADIO_USE_LEDS controls globally (independently of LEDS_DRIVER) the
	usage of leds by radio drivers. RADIO_USE_LEDS implies LEDS_DRIVERS
	and LEDS_BLINKING.

R060327A:
	Genesis on DM2200, as sent to Wavetrix (nvm, tr8100).

R060409A:
	Pins + pulse monitor for DM2200. Pins are numbered 0-11 (GPIO_0 - 7 and
	CFG0 - 3). Pins 0 and 11 are marked as unavailable (GPIO_0 is used for
	RSSI, and CFG3 is used for reset). If PULSE_MONITOR == 1 appears in
	options.sys, the pulse monitor is configured and additionally pins
	1 and 2 (GPIO_1, GPIO_2) are marked as unavailable. With the pulse
	monitor configured, GPIO_1 is used for the counter, while GPIO_2 is
	used for the notifier.

	General functions on pins:

	word pin_read (word pin)
	returns bits:	0 - pin value
		   	1 - pin is output
			2 - pin is analog in
			3 - pin is analog

	void pin_write (word pin, word val) 
	val bits:	0 - value to written (if other bits are zero)
			1 - set pin to in
			2 - set pin to analog in
			the operation is void on unavailable pins, 2 is void
			on pin >= 8

	int pin_read_adc (word state, word pin, word ref, word smt)
			pin - 0-7 (minus the unavailable pins)
			ref - 0 (1.5V reference), 1 (2.5V reference)
			smt - sample time in milliseconds
			state (if not NONE) indicates restart state when
			sample is done. Function must then be re-executed.
			Returns -1 if pin unvailable or ADC used by the
			receiver (switch off the radio before using ADC).

	Operations related to the pulse monitor:

	void pmon_init_cnt (bool edge) 
			Declares edge for the counter (0 - down, 1 - up). Must
			be called before other counter operations.

	void pmon_start_cnt (long count)
			Starts the counter. If count is negative, the old
			counter value is retained. Otherwise, it is set to
			count.

	void pmon_stop_cnt () 
			Stop the counter. It won't be incremented until the
			subsequent call to pmon_start_cnt.

	void pmon_set_cmp (long count)
			If count >= 0, starts the comparator with the indicated
			values. An event will be triggered whenever the counter
			reaches the specified value. The event will remain
			pending until accepted.
			If count < 0, the comparator is stopped.

	lword pmon_get_cnt ()
			Returns the current counter value and clears any pending
			comparator event.

	bool pmon_pending_cnt ()
			Checks if there is a pending comparator event and clears
			it.

	lword pmon_get_cmp () 
			Returns the current setting of the comparator (whether
			it is active or not).

	void pmon_init_not (bool edge)
			Declares edge for the notifier. Must be called before
			the notifier is started.

	void pmon_start_not ()
			Starts the notifier. Events will be triggered whenever
			a notifier signal arrives on GPIO_2. Such an event
			remains pending until accepted.

	bool pmon_pending_not () 
			Checks if there is a pending notifier event and clears
			it.

	void pmon_stop_not ()
			Stops the notifier until the next call to
			pmon_start_not.

	word pmon_get_state () 
			Returns the state of the pulse monitor as the following
			configuration of flags:
			PMON_STATE_NOT_RISING	0x01	notifier edge is rising
			PMON_STATE_NOT_ON	0x02	notifier is on
			PMON_STATE_NOT_PENDING	0x04	notifier event pending
			PMON_STATE_CNT_RISING	0x10	counter edge is rising
			PMON_STATE_CNT_ON	0x20	counter is active
			PMON_STATE_CMP_ON	0x40	comparator is on
			PMON_STATE_CMP_PENDING	0x80	comparator event pending

	Events triggered by the pulse monitor:
			PMON_CMPEVENT		comparator event
			PMON_NOTEVENT		notifier event

R060410A:

	The pins used by counter and notifier are made "available" if the
	counter / notifier is stopped. Functions pmon_init_... eliminated.

	Modifications:

	void pmon_start_cnt (long count, bool edge)
			Combines the functionality of previous pmon_init_cnt
			and pmon_start_cnt in the obvious way. GPIO_1 is made
			unavailable.

	void pmon_stop_cnt () 
			As before but GPIO_1 is made available. Its default
			configuration (assumed after pmon_stop_cnt) is output.

	void pmon_start_not (bool edge)
			Combines the functionality of previous pmon_init_not
			and pmon_start_not in the obvious way. GPIO_2 becomes
			unavailable.

	void pmon_stop_not ()
			As before but GPIO_2 is made available. Its default
			configuration (assumed after pmon_stop_cnt) is output.

	Constant VERSA2_TARGET_BOARD included in dm2200_sys.h to choose between
	the two variants of the board.

R060411A:

	Added (conditional) code for FCC test for DM2200. RADIO_USE_LEDS is now
	a bit mask indicating which leds are used by the radio. For example, if
	RADIO_USE_LEDS is 6, led 0 is not used by the radio and is thus
	available to the application.

R060411B:
	Updated VMesh2, so it runs as is (with right VERSA2_TARGET_BOARD).
	Removed Genesis docs (they're in Genesis branch).

R060413A:
	UART rate is now settable (if UART_RATE_SETTABLE is set). Operation:
	io (NONE, UART, CONTROL, (char*) &rate, UART_CNTRL_SETRATE). With the
	slow crystal, the legitimate rates are 12, 24, 48, 96 (the argument
	is in full hundreds). With a high-speed crystal, any rate between
	12 and 384 will work.

R060417A:
	pmon_pending_cnt renamed to pmon_pending_cmp.  Added:
	pmon_dec_cnt ()           - subtract cmp from cnt
	pmon_sub_cnt (long dec)   - subtract dec from cnt
	pmon_add_cmp (long inc)   - add inc to cmp

	Pins used by counter/notifier are readable with pin_read (the 
	unavailable bit being appended to the value)
	
R060418A:
	UART rates are limited to the standard set: 12, 24, 48, 96, 144, 192,
	288, 384 (all * 100), with rates above 96 unavailable for the slow
	crystal. UART_CNTRL_GETRATE returns the current rate / 100.

R060421A:
	if_write returns a value: -1 == ERROR (word cannot be written), or
	0 == OK.
	if_erase takes an argument: void if_erase (int). If the argument is < 0,
	the entire info flash is erased; otherwise, only the block containing
	the specified word is erased, e.g., if_erase (1) erases block 0,
	if_erase (67) erase block 1.

R060422A:
	Fixed if_erase call in every_second_versa2.h.

R060428A:
	VERSA2 RESET key pressed on power up erases info flash.

R060429A:
	All the ad-hoc random number generators used by the individual radio
	drivers have been combined into a public generator available as
	word rnd (void);
	RANDOM_NUMBER_GENERATOR should be set to 1 or 2 for this to be
	available, unless a radio driver is present, in which case
	RANDOM_NUMBER_GENERATOR is defined as 1, if it was undefined or zero.
	RANDOM_NUMBER_GENERATOR == 2 selects a high-quality (32-bit) generator
	(which needs a longword location in RAM).
	if ENTROPY_COLLECTION is set, the generator uses entropy; otherwise,
	it is congruential, deterministic, and pseudo-random.

	Memory shuffled a bit in kernel.c to avoid losses on lword/word
	misalignment.

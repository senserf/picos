PG100628A:

	First for some git-related cleanups:

	1. I propose to use separate RTAG files for the different developers
	   (all two of them ;-). This is RTAGS_PG. I am leaving the original
	   RTAGS file as it was (for the record). I have also created a new
	   file named Version holding the system version to be used by mkmk.

	2. I have modified mkmk (see above), so grab the new version and copy
	   it to your bin. The script fetches the system version from Version
	   and then scans all RTAGS_... selecting the most recent release tag.
	   Tags are expected to contain six digits (according to our tacit
	   standard, e.g., 100628), but may also contain arbitrary other
	   characters, e.g., WO100629A:

	3. We should be using commit messages for meaningful comments. Also, we
	   shouldn't shy away from many small commits (not all of them being
	   necessarily tagged our way), equating pushes (which should be
	   tagged - the last commit before a push) with previous CVS commits.
	   Note that present commits are lighter weight than old CVS commits.

	=======================================================================

	The four values returned by PHYSOPT_ERROR for CC1100 redefined. Here is
	the description from phys_cc1100.cc

	0 - receptions (all events when receiver is awakened to check for a
	    pkt)

	1 - successfully received packets; note that with hardware CRC +
	    AUTOFLUSH, 0 and 1 will be equal

	2 - LBT/congestion indicator: EMA d(n) = 0.75 * d(n-1) + 0.25 * b,
	    where b is the backoff experienced when trying to access the
	    channel for TX; this is counted over all attempts to access the
	    channel and maxed at 0x0fff, i.e., 4095

	3 - the maximum accumulated backoff time suffered by a single packet so
	    far

	Also read doc.odt from Apps/VUEE/RFTEST.

	The RFTEST Praxis, which I wrote for Gerry a few weeks ago, has been
	brought to a PiComp-compatible form.

	Simplified utimer_set in kernel.c (insignificantly). I have been 
	searching there for weird reasons why a transmit queue might get
	stuck on LBT. One of them would be a stuck utimer, but it doesn't
	seem plausible at all.

	I have done some tests with RFTEST. It seems that setting XMIT queue
	size limit in TCV, say #define TCV_LIMIT_XMT 8 (in options.sys) may be
	a good idea. I did see a few memory problems under the outgoing packet
	rate of 4 pkts/sec (nodes becoming unresponsive to UART because of
	choked up malloc) which diappeared after I introduced the limit. It
	appears that the reception queue size is not a problem.

PG100629A:

	Fixed file permissions. Cygwin creates a lot of mess with file
	permissions (which get screwed up when copying, archiving, untarring,
	etc.). Unfortunately (or rather fortunately, but not in this case),
	when you change the permissions of a file, git recognizes the file as
	modified, which occasionally becomes annoyoing.

	The upshot:

	There is script in Scripts, named permissions, which has been there
	for a while (and I have been using it every now and then). I recommend
	to run it:

		cd PICOS
		Scripts/permissions

	whenever you suspect that file permissions may have been messed up
	(git status shows modified files that haven't really been modified).
	It runs through the tree and sets the right permissions of files (which
	are mostly guessed, but mostly correctly and, most importantly,
	deterministically). In particular, you should do it before checking the
	status, adding, and/or committing.

PG100630A:

	Converted Apps/VUEE/survey to PiComp. Perhaps "converted" is not a good
	word, as the job consists in undoing the previous VUEE hooks. Along the
	way, detected (and fixed) one problem with PiComp: when tokenizing
	initializers, PiComp would split constructs like << into < < (i.e.,
	introducing a space between the two characters).

	Also, PiComp now parses crunning. The case of crunning (NULL) was
	impossible to handle in a macro (so it didn't work under VUEE), as the
	(non-NULL) argument of crunning had to be converted to a SIDE process
	type ID, i.e.,

	#define	_pt_id_(pt)	(&zz_!!THREADNAME(pt)!!_prcs)
	#define	crunning(pt)	zz_crunning (_pt_id_ (pt))

	So when you said crunning (NULL), the macro would produce nonsense. To
	do it right, I would have to remove the macro (crunning) and parse
	crunning in PiComp into zz_crunning recognizing the special case of a
	NULL (generally non-symbol) argument. That, however, would cause
	problems for the old VUEE-compliant praxes (which are not handled by
	PiComp and must rely on the macro).

	As the macro is expanded before PiComp sees the code, I handle two
	cases:

	crunning -> zz_crunning (not used now, waiting for the macro to
	disappear)

	zz_crunning -> zz_crunning (fixing the problem introduced by the macro
	for a non-symbol argument)

	Note that this requires a modification in VUEE. Please use VUEE with
	the same (or higher) release tag, if you want to have crunning working
	correctly with the PiComp-compatible praxes.

PG100705A:	VUEE >= PG100705A, SIDE >= PG100705A

	Introducing type lint (along the line of sint) intended to be PicOS's
	replacement for long. While it is not absolutely required to use this
	type (instead of long) in praxes, it is recommended in order to avoid
	problems with VUEE, especially on 64-bit machines. This required a
	modification in VUEE (PG100705A), which was directly inspired by the
	recent problem signaled by Nick (and his fix). That in turn required
	a (very slight) modification to SIDE. So you should get them all.

	I am not sure if I have fixed Nick's second problem. Nick, please let
	me know.

	I have gone through the source, including most praxes, replacing
	long with lint. Note that the problem of eliminating int and
	replacing it with sint everywhere is a bit more complicated. One reason
	why you have to be careful there is that PicOS (and consequently VUEE)
	uses int for some handles, notably PIDs, which are in fact addresses
	(using type word to store event numbers is another messy feature).
	This may change in the future. Probably, we should have two more types
	(or maybe just one) to take care of process and event handles. This
	cannot be done quickly as a lot in VUEE depends on the assumption that
	PID is an int derived from an address. Note that any problems caused by
	this "overloading" of types will be amplified on 64-bit systems.

	A minor cleanup in kernel.c (code for killing processes improved a
	bit).

	A few fixes to PiComp. Line count (for error diagnostics) would go off
	after an #if(def) or #else, for one thing. For another, PiComp now
	(when compiling for VUEE) recognizes and compiles out heapmem (it
	could not be eliminated by a null macro because of the weird syntax).

	Apps/VUEE/RFPING un-converted from manual VUEE to PiComp
	Apps/TESTS/ToySimple made PiComp-compatible

PG100706A:	3 1	SIDE >= PG100706A, VUEE >= PG100706A

	There is a new script, named deploy, located in this directory (i.e.,
	PICOS). It takes no arguments. When called, it will:

	1. verify whether the versions of all three packages (PICOS, SIDE,
	   VUEE) match,

	2. install/setup all three packages; this includes compiling mks/vuee
	   of SIDE, setting up links in VUEE/PICOS, and copying mkmk and picomp
	   from PICOS/Scripts to bin or BIN

	For 1, it is now possible to declare version (RTAG) dependencies, e.g.,
	see the present tag (i.e., 13 lines up). This particular tag says (in
	addition to providing a release number) that:

	1. the PicOS official system version is now 3.1

	2. PicOS requires SIDE and VUEE to be at least at the same RTAG level

	Similar specifications can be inserted into RTAG files in SIDE and
	VUEE, except that the version numbers in those packages are defined
	differently (and you normally don't care about them). I have also
	unified a couple of things:

	1. In all packages, RTAGs are stored in files named RTAGS..., where ...
	   is an arbitrary suffix (allowing for multiple files, e.g., used by
	   different developers). ALL files with such names are examined and
	   the LAST (most recent or highest-valued) RTAG is selected from
	   amongst them all as the effective release tag. What counts to a
	   tag's value is its number and the (optional) single letter following
	   that number, e.g., WO100711A > WO100711B > PG100710C.

	2. Not all tags must specify dependencies (or system version numbers
	   for PicOS). The version dependency of a package is determined from
	   the most recent tag that actually specifies a dependency. For
	   example, suppose that we have this chronological sequence of most
	   recent tags for PICOS:

	   WO100706A:	SIDE >= PG100704A
	   ...
	   WO100711A:	VUEE >= PG100709A
	   ...
	   PG100712A:
	   ...

	   The system requires VUEE at 100709A (or newer) and SIDE at 100704A
	   (or newer). Note that VUEE and SIDE may declare their own
	   dependencies on the other packages, although SIDE normally does not
	   depend on PICOS.

 	3. I have removed the (short-lived) Version file from PICOS. Its role
	   is now assumed (or resumed) by RTAGS (mostly as it was before our
	   move to git, except that then there was a single RTAGS file).

	4. Each of the three packages now has two scripts at the top level:
	   deploy (to deploy the particular package) and cleanup (to clean it
	   up). They must be called from their respective directories.
	   PICOS/cleanup invokes cleanup from the Apps directory followed by
	   Scripts/permissions, while VUEE/cleanup removes the links from
	   VUEE/PICOS (and executes permissions as well). SIDE/deploy accepts
	   two arguments (defaulting to bin and SOFTWARE/VUEE/PICOS) specifying
	   the destination directory of the mks/vuee compiler and the extra
	   library containing VUEE stuff.

	The PICOS's version of deploy is a bit different from the other two,
	because it calls them to set up the whole thing. So normally you will
	be only invoking deploy in PICOS. This is the recommended thing to do
	after updating any of the packages.

PG100714A:

	Board WARSAW_NEW_BLUE added (includes interface to LinkMatik 2.0 which
	I used for testing Bluetooth connections with the Android). See also
	Apps/TEST/BlueTest.

	Minor cosmetics:

	The deploy script now shows also the version number (not just the
	RTAG release) of PICOS.

	There is an -all option in the cleanup script that cleans up all
	three packages.

PG100716A:	VUEE >= PG100716A

	Naming of "hidden" variables and functions cleaned up (such names now
	begin with __pi_) in preparation for the upcoming revision of PICOS's
	implementation of strands.

	Eliminated the distinction between system and user events (the ETYPE
	attribute of events has been removed from the kernel). I have spent
	some time contemplating this step. It does simplify a lot of things in
	the kernel and appears generally safe. The implication for a praxis
	programmer is that event identifiers should be always derived from
	addresses as to make them unique. Note that generally, even if those
	identifiers are not abolutely unique, there should be no problem, as
	long as we always follow the standard paradigm of re-checking the
	respective condition after receiving an event. One exception (and a
	potential source of problems) is process termination (for join and
	joinall), because the events awaited for those operations are always
	assumed to be authoritative.

	I will explain all this in the new edition of the manual, which will
	probably materialize later, after strands have been redone. You may
	want to know, for example, that the event awaited by join is the PID
	of the child process. Thus, the praxis shouldn't deliver (trigger)
	such an event (unless it knows what it is doing). Note that PIDs are
	basically addresses of data structures in the kernel, so they cannot
	be confused for addresses in the praxis area. Similarly, the event
	awaited by joinall is the address of the process's code function.
	Previously, even though those events were represented in the same
	way, they had an extra attribute differentiating them from user/praxis
	events.

	OK, so the bottom line is this: use addresses for event identifiers,
	pretty much as you have been doing so far. Those addresses may point
	to your static data or code, except that the addresses of process code
	functions trigger joinall. The standard practice of using the addresses
	of global/static variables is always safe.
	
	I have simplified some operations (and even removed some of them)
	eliminating those "features" that have never been used in praxes.
	Again, it will be all described in detail in the new manual, but
	here is an approximate list:

	- Zombies have been eliminated. I introduced them originally in order
	  to provide for foolproof handshakes whereby, say, strand A formally
	  terminates (delivering a join/joinall event), but remains present
	  for a while (as a zombie) until some other (joining) process B
	  is given a chance to see it (or its data). Scenarios like this
	  have never been used, and, if needed, they can be implemented using
	  extra events.

	- Operations kill, killall, join, joinall, trigger, ptrigger used to
	  return values (which nobody ever used). Now they return nothing.

	- Operation status has been eliminated.
	  
	Fixed deploy to correctly handle locations outside the HOME directory
	tree on cygwin.

	The new versions of mkmk and picomp can now handle eCOG compilation
	(the makefile variant). I don't think Cyan SDK projects will ever be
	compatible with picomp. Who cares!

	There is a new option for picomp. With -e it will simply run vuee on
	the existing VUEE_TMP (without recompiling the original sources).
	Any errors from picomp are now stored in a special file in VUEE_TMP
	(named __status__, if you are curious). Using both -e and -n you can
	see those errors without running picomp again. Previously picomp would
	refuse to run vuee after warnings from the C preprocessor. Now, it
	can beter tell warnings from fatal errors.

PG100718A:

	As it turns out, hardware CRC on CC1100 shouldn't be used with the
	AUTOFLUSH mode, as it hangs the chip. Apparently, the chip gets into
	the "received" state (its status changes to IDLE) without properly
	presenting the reception/FIFO status (FIFO is empty unless the CRC
	is correct, which is probably the confusing factor). I have tried
	several (three to be exact) events signaled on GDO0 (1, 7, 15) and
	none of them really works as the correct indication of what has
	happened.

	For now, I am disabling that option, i.e., if you select RADIO_CRC_MODE
	= 2 or 3, you will get compilation errors. I don't want to remove it
	altogether, because there is a chance that the problem has been
	eliminated in newer versions of the chip.

	I have added a few sentences at the end of the document (doc.odt) in
	Apps/VUEE/RFTEST explaining how you can use the praxis to determine
	a good PATABLE setting (by trial and error). Coming up: a command to
	do this automatically.

PG100720A:

	A new command added to praxis RFTEST (Apps/VUEE/RTFEST) allowing you
	to collect statistics correlating PATABLE settings with perceived RSSI
	(for CC1100). Read doc.odt in Apps/VUEE/RFTEST.

PG100721A:	VUEE >= PG100721A

	Hooks and timers in TCV/VNETI (cleaned, redone, and tested). The delay
	is now in (PicOS) milliseconds (not in seconds, as stated in the
	manual). TCV timers have been integrated with the kernel delay
	mechanism.

	Praxis Apps/VUEE/HOOKS (or rather the acknowledging plugin that comes
	with it) illustrates how to use the hooks and timers.

	Irrelevant cosmetics in PiComp.

PG100722A:

	Praxis Apps/VUEE/TIMERS is better than Apps/VUEE/HOOKS. I am removing
	Apps/VUEE/HOOKS. TCV_HOOKS is probably redundant (as an option) and not
	needed.

	Fixed a serious bug in PiComp causing two 'shared' variables with the
	same name in the same file (used by different processes) to be mapped
	into one.

	A minor fix to CC1100 driver. Admitting RX chip state after a
	reception (nonempty FIFO), which may result from two packets being
	received (almost) back to back. While the second packet will not
	always succeed in such circumstances, it doesn't absolutely have to
	fail.

PG100723A:

	RADIO_OPTIONS & 0x80 (together with ENTROPY_COLLECTION) initializes
	entropy (for rnd) from the air when the node resets (CC1100 only).
	The driver 1) enters RX mode, 2) delays for 1 msec, 3) collects RSSI,
	4) appends four least significant bits of the RSSI to entropy,
	5) enters IDLE. This procedure is repeated 8 times to collect 32 bits.
	Optical inspection convinces me that the randomness of a thusly
	collected value is very good.

	Praxis Apps/VUEE/TIMERS modified slightly to facilitate some tests.
	For example, I have added there a command to produce a sequence of
	random numbers, which I am going to subject to formal conformance
	tests.

	A minor fix to tcvp_settimer (in tcv.c). Things should be a tiny bit
	more efficient.

PG100723B:

	Sorry, sorry, sorry! PG100722A is crap. Mea culpa. The HOOKS are
	required after all. The present version of Apps/VUEE/TIMERS contains
	my last word (so far ;-). I forgot that TCV/VNETI can drop packets
	silently (when TX goes off) in which case the plugin will not now that
	its hooked packets are gone (unless it is using TCV_HOOKS).

	By the same token, the plugin cannot have an internal tally of hooked
	packets, so I have removed the variable NFreeHooks, along with the
	event supposedly triggered when a hook becomes free. There can be no
	such thing unless we add something (like an extra plugin function) to
	convey the message. Do we need it? Probably not. So there's now a
	function that you can call to get the number of free hooks, which are
	counted explicitly on each request.

	Upgraded uf.tcl (in Scripts) to make it possible to copy the UART
	output to a file. This is much better than Terminal, especially that
	I am now working with Linux.

PG100724A:

	The random number generator improved. If entropy fails to collect, it
	will fall back to a decent linear congruential 32-bit based generator
	with a long cycle.

	Cosmetics in phys_cc1100 to appease the compiler.

	Fixed a problem in tcv.c causing a compilation error with VUEE.

PG100724B:

	tcvp_unhook(p) accepts p == NULL (and does nothing in such a case).

	The random number generator improved even more. We now have two RNGs:

		word rnd ()
		lword lrnd ()

	basically for the price of one. They are both available with options:

		#define RANDOM_NUMBER_GENERATOR 1

	as well as 
	
		#define RANDOM_NUMBER_GENERATOR 2

	Recall that the second option selects a better quality generator (the
	first option sucks, but is more efficient, and, probably, with entropy
	collection:

		#define	ENTROPY_COLLECTION 1

	will not be perceptibly worse than 2.

PG100725A:

	tcv_drop(p) accepts p == NULL (and does nothing in such a case). This
	is a logical consequence of the last mod to tcvp_unhook.

	Fixed a problem in TCV/VNETI concerning packets that have been removed
	from the buffer pool with their timers (and hooks) dangling.
	This relates to two operations: tcv_rnp and tcvphy_get. Each of them
	produces a packet that:

	1. FAPP has been extracted (eliminated) from the buffer pool
	2. has not been deallocated yet
	3. it may have to remain available for processing beyond the state
	   in which it has been acquired

	Thus, if the packet has a timer set, and the timer goes off while the
	packet is being handled after its extraction, we are likely to get into
	a mess. Note that this also concerns hooks, which can also be handled
	asynchronously (by other threads) yielding races.

	The fix consists in making sure that a packet returned by tcv_rnd and
	tcvphy_get has its timer cleared and its hook removed.

PG100727A:	VUEE >= PG100727A

	Correction: hooks are left intact with tcv_rnp and tcvphy_get (while
	timers are cleared). This makes more sense.

	New functions added to TCV/VNETI (to be documented, as lots of other
	things):

	Boolean tcvp_isqueued (address packet);
	Boolean tcvp_issettimer (address packet);
	address *tcvp_gethook (address packet);

	I have introduced a tentative fix into Wlodek's LicComms/tarp.c (to be
	revised and cleaned up by Wlodek).

	Some prerequisite cleanups for improving the parameterization of LBT,
	mostly for CC1100, but not only. Don't be concerned about the large
	number of modified files. These are mostly renames of different
	constants with the same meaning, so they are consistent across all
	drivers.

	CC1100 driver augmented by options to better control LBT. This is still
	half cooked. The size of the array returned by PHYSOPT_ERROR increased
	to 6 words. See PicOS/cc1100.h for their description as well as for 
	new driver options. Note that there will be more coming up shortly.

	Praxis VUEE/RFTEST modified for the new version of PHYSOPT_ERROR, but
	untested yet.

PG100727B:

	A few minor (but essential) fixes to the CC1100 driver (I have tested
	it [roughly] and it seems OK). I have started writing a doc explaining
	its workings and parameters, but it will take me a couple of days
	(being a low-priority task). If desperate, see PicOS/cc1100.h for
	hints.

PG100729A: VUEE >= PG100729A

	Headers of the new functions added to tcv.c included in tcvplug.h
	(I forgot to put them there).

	A few cosmetic cleanups of little consequence. I am tagging because a
	matching VUEE version is required (one extra constant must be defined
	in VUEE's sysio.h).

PG100730A:

	A few cleanups in the CC1100 driver mostly related to option constants.
	The options are described in Docs/PICOS/cc1100.odt.

PG100804A:

	A minor correction to the counters (PHYSOPT_ERROR) in phys_cc1100.c.
	Previously, the transmission counter (2) would stop on MAX; now, it
	wraps around resetting the failure counter (3) to zero. This is the
	same behavior as for counters 0 and 1.

	New commands added to VUEE/RFTEST: C and P (see the doc).

	The declaration of guide_rtr in Libs/LibcComms/tarp_hooks.h made
	conditional on TARP_RTR (non-TARP_RTR praxes wouldn't compile for
	VUEE without that).

	Modified picomp: the declaration parser made a bit smarter in
	preparation for the upcoming reimplementation of strands.

	Irrelevant cosmetics here and there.

PG100806A:	3 2 	VUEE >= PG100806A

	I was going to introduce considerably more consequential modifications
	to the implementation of strands (i.e., threads with private data), and
	had them almost ready, but backed off. They sucked. Even though, from
	some elevated methodological point of view, being able to declare
	"context" variables in a strand might seem a nice idea, the implied
	automatic memory allocation/deallocation in the kernel for strand
	contexts would in fact get in the way of many simple solutions
	(involving trivial private data areas) which are quite natural and
	effective. 

	So I was torn for a while between:

	1. complicating the issue by introducing a de facto third process type;

	2. putting up with the increased complexity of strands for the alleged
	   high-level benefits (which I find difficult to appreciate in our
	   practical setup);

	before deciding to abandon the idea. In my rather trivial and pretty
	much pathetic attempt to make the contexts a bit more friendly, I did
	this:

	1. The type argument for a strand, i.e., in "strand (fun, type)" or
	   "fsm fsm_name (type)" now stands for itself, rather than for a
	   pointer to whatever you've put in there. This means that when you
	   say, e.g.,

	   	fsm dowol (int) { ...

	   the data variable available to the process function will be of type
	   int, not int*. Then, if you want to have a char pointer, you should
	   say:

	   	fsm dowol (char*) { ...

	   instead of:

	   	fsm dowol (char) { ...

	   as before. I have gone through all the relevant praxes and made the
	   requisite changes occasionally simplifying things (like removing
	   weird and clumsy casts).

	2. There is now a system variable pointing to the current process's
	   data which, for example, allows it to be referenced directly from a
	   non-process function. I am not sure if this is useful at all.
	   Here is an example:

		typedef struct { ... } pcs_data_t;
		...
		fsm dowol (pcs_data_t*) {	// Note the '*'
			...
			...
			val = fun ();
			...
		}
		...
		int fun () {
			context pcs_data_t *data;
			// data refers to the current process's data object
			...
			data->something = U;
			...
		}

	   In other words, the data area of the currently running strand
	   can be directly accessed by functions via the context construct
	   (handled by picomp). This isn't extremely helpful, as you can
	   always pass it through an argument, but it comes for free.

	3. I have removed the limits on the number of process instances that,
	   in old days, you could specify as an argment of endprocess, e.g.,
			
		endprocess (4)

	   With the introduction of threads and strands, there was an implied
	   limit of 1 for a thread, and no limit (0) for a strand. There are
	   no limits now. I do not think any of our praxes has ever depended on
	   those limits (except for some weird examples of mine), so this
	   change shouldn't affect anything, but you may want to check to make
	   sure.

	You can pretty much ignore all these "revolutionary" enhancements and
	just remember one thing: the type argument of a strand now stands for
	itself, rather than a pointer to itself.  Before introducing any more
	changes of any substance, I will try to catch up on the documentation.

PG100811A:

	The type name for fsm can now include a variable replacing the default
	"data", e.g.,

		fsm dowol (char *msg) {

	Makes more sense, doesn't it? Except that this isn't compatible any
	more with the old macro strand, i.e.,

		strand dowol (char *msg) {

	won't work (for pretty obvious reasons).

	Fixed eCOG/main.c for the new fsm/process layout.

	The way picomp generates code around states now makes it possible to
	insert local declarations there, as in:

		state STATE_1:
			word a, b;
			... some code ..

	which practically obviates the need for having auto (non-shared
	declaration at the fsm header. I am contemplating forcing all such
	declarations to be shared, thus eliminating the need for the shared
	type qualifier.

	You can now use sameas (like in SIDE), instead of proceed, e.g.,

		state STATE_1:
			... do something ...
		state STATE_2:
			... do something else ...
			sameas STATE_1;
		...

	which behaves like a goto, i.e., the scheduler is not involved. This
	should only be used if you are worried that the possible preemption by
	another process is harmful.

PG100816A:

	The biggest news is that I have eliminated the "shared" type qualifier.
	This keyword is no more. Sorry about all this confusion. This is how it
	works now:

	1. A variable declared locally at the top of an FSM declaration, e.g.,

		fsm foo {
			word var;

	   is AUTOMATICALLY "shared", i.e., non-volatile. From the viewpoint
	   of the FSM function, it is declared as static.

	2. If you want to have automatic, state-local (volatile) variables, you
	   should declare them at states, e.g.,

		entry MY_STATE:
			word var;

	Note that previously you couldn't declare variables at states, not
	without introducing blocks, i.e., { ... }, which wasn't natural.
	Now picomp creates such blocks automatically, which means that you can
	"naturally" declare variables there. This pretty much obviates the
	need for declaring such (i.e., automatic) variables at the top of the
	FSM function (I couldn't think of a single reason to keep them around).
	Consequently, it makes now perfect sense to assume that if you declare
	a variable at the top of an FSM, you want it "shared", i.e., static.

	This works for all praxes respecting the new format, i.e., those using
	the fsm construct (and being compiled by picomp), including their VUEE
	models, but, of course, not for the old ones. Thus, if you want to
	convert an old-style praxis to the new format, make sure to move all
	declarations of automatic variables to the states that need them, as
	otherwise they will become static.

	I have edited and fixed all the present new-format praxes (including
	new_il_demo). Or at least I think so ;-).

	===

	Note that the keywords "state" and "entry" are equivalent. My (not so
	strong) opinion is that "entry" should be phased out (no hurry).

	===

	Many cleanups in picomp, e.g.,

	References to fsm functions (addresses), e.g., turning them into
	events, like this:

		fsm foo ...
		...
			when (foo, SOME_STATE);

	are now handled correctly by picomp (for VUEE). So are multiple fsm
	announcements per line, e.g.,

		fsm foo (const char*), muka, bar (struct d_t *u);

	The script now avoids interpreting special keywords (like entry or
	state) in the context of a remote reference to a struct/union
	attribute, e.g.,

		ptr->state or str.state

	===

	Similar to mkmk, options.sys is now optional for VUEE.

	===

	CyanIDE project files generated by the new version of mkmk could not be
	opened by the SDK because of the quotes around the options.sys include.
	I have converted those quotes to the proper XML escapes, and it now
	seems to work. We haven't used CyanIDE SDK for a longish while, so
	nobody noticed.

	===

	Still working on the doc.

PG100827A:	3 3	VUEE >= PG100827A

	Updated documentation: PicOS, PiComp, mkmk, VNETI, Serial, Installation.
	Added new document: Internals (separated from PicOS).

	The context construct has been removed. It was useless and stood in the
	way.

	Changed the way a strand gets hold of its data pointer. Now, the data
	pointer appears as a true local variable, which can be reset in the
	strand, the change being valid until the strand leaves its current
	state. VUEE mimics this correctly.

	The argument of unwait removed (it didn't make sense).

	uf.tcl has been renamed to piter (PIcos TERminal emulator).

	If you have Tcl8.5 form ActiveState (and it is on your PATH), deploy
	will now copy piter and udaemon to your bin directory correctly setting
	it for execution with Tcl/Tk 8.5.

	Fixed the board definition for CHRONOS (it missed a minor upgrade to
	the LEDs interface).

	Miscellaneous cosmetics here and there.

PG100830B:

	Added new options for organizing the scheduler queue. Here is how it
	works (this is also described in PicOS.odt):

	MAX_TASKS > 0
	As before. There is a table of PCB slots MAX_TASKS entries long.

	MAX_TASKS == 0
	PCBs are malloc'ed and linked. There is no explicit limit on the number
	of processes. New processes are added at the end, so the oldest process
	has the lowest priority.

	MAX_TASKS < 0
	Like MAX_TASKS == 0, except that new processes are inserted at the
	front of the list, so the oldest process has the highest priority.

	I have tentatively set the default to MAX_TASKS == 0. Those praxes that
	expect the number of processes to be well bounded (like survey, for
	example) have to define MAX_TASKS in their options.sys (survey does).

	I have also updated the PicOS document (not much) to describe the
	options.

	Note that crunning (NULL) with MAX_TASKS <= 0 doesn't work (it always
	returns 0).

	The gcc optimization option for MSP430 changed from -O2 to -Os, which
	seems to give slightly shorter code.

PG100909A:

	Macro tcvp_isdetached(p) added to tcvplug.h. Its role is to tell
	whether the packet is (not) present in any queue, including the timer
	queue (if TCV_TIMERS is nonzero). Fixed the tarp plugin (tarp.c) to
	use that macro (instead of calling tcvp_issetimer and tcvp_isqueued),
	which looks a bit better.

	I discovered a weird behavior of the piter script (when installed by
	deploy) apparently resulting from some incompatibilities between Cygwin
	and ActiveState Tcl (which, as we remeber, is intended for plain
	Windows). Some arguments passed to the script would have CR characters
	appended to them; also, the hardcopy file produced by the script would
	have superfluous blank lines. It seems that I have fixed those
	problems, but without understanding what I was doing.

	A few cosmetics.

PG100915A:

	Sorry, the previous commit had a semi-intentional bug in tcvplug.h (the
	thing wouldn't compile with TCV_TIMERS == 0).

	Nothing new, except for a few changes to Apps/TESTS/CLOCK_TEST/ - to
	test for the alleged bug in timers/hooks reported by Wlodek. BTW: my
	tests have discovered no problem.

PG101016A:

	Added new board: WARSAW_IR250LP looking like WARSAW_ILS, except that:

	1. the IR sensor has reverse polarity (i.e., it is active low)
	2. there is no analog IR sensor (number 3).

	Added new board: WARSAW_BLUE which is the old WARSAW board with
	LinkMatik 2.0 (BlueTooth) connected via the second UART.

PG101019A:	VUEE >= PG101019A

	A slight modification to PiComp for compatibility with the newest fix
	to VUEE.

PG101107A:

	LBT for the CC1100 modified (read Docs/PICOS/cc1100.odt). I have
	removed the previous (complicated) combination of staging (i.e.,
	decreasing the sensitivity of thresholds) with limiting the number
	of retransmissions. The LBT mode is now determined by a single
	constant, RADIO_LBT_MODE, which can be 0-3:

	0 - LBT completely switched off, all transmissions are blind

	1 - only check (and refuse access) if receiving a packet

	2 - refuse access if receiving a packet or RSS above threshold(s),
	    with the thresholds described (as before) by RADIO_CC_THRESHOLD
	    and RADIO_CC_THRESHOLD_REL

	3 - try up to 8 times gradually decreasing LBT sensitivity; the last
	    attempt is carried out with LBT completely switched off

	Previously, I was under the impression that you can switch off the
	thresholds completely without setting CCA_MODE to 0 by storing the
	smallest threshold values in AGCCTRL1 (this is what the document says). 
	Apparently, as Wlodek's problems indicate, this is not the case. His
	setups seem to suffer some strange interference which makes it
	impossible to acquire the channel for a very long time unless you set
	CCA_MODE to 2 (or 0).

	Improved the recognition of Tcl location by the deploy script (esp.
	under Linux)

PG101127A:

	CMA3000 driver for EZ-CHRONOS fixed to make sure that the sensor is
	always initialized properly. Previously, the acceleration sensor would
	not initialize on some watches on the first try. Persistent
	initialization until the configuration register reads correctly seems
	to do the trick.

PG101210A:

	Flash definitions modified to account for the "non-standard" FIM setup
	on CC430 (4 blocks x 64 words). Note that this requires the new fixed
	version of mspgcc (the flash definitions for cc430 were incorrect).
	I will be shortly putting the Cygwin source package into:

		http://www.olsonet.com/REPO/101210_mspgcc_source.tar.gz

	This is for a complete re-installation; it takes time, as the entire
	package is recompiled. There's a simple README file explaining the
	installation procedure.

	If you prefer to upgrade the easy way, then fetch this file instead:

		http://www.olsonet.com/REPO/101210_mspgcc_changes.tar.gz

	Then do:

		zcat 101210_mspgcc_changes.tar.gz | tar -xvf -
		cd 101210_mspgcc_changes
		cp -r * /cygdrive/c/mspgcc/msp430/include/

	which operation will just replace the modified include files. Note that
	flash write/erase operations will not work on the CHRONOS with the
	previous version of mspgcc (although reading is fine).

	The word addresses of the FIM blocks on CC430 are 0 (block D), 64
	(block C), 128 (block B), and 192 (block A). The interesting feature of
	the last block (A) is that its contents survive reflashing the device
	and can only be erased and overwritten by an explicit action of the
	program.

	A minor extension to Scripts/xml.tcl.

PG101224A:

	Added a new option to PiComp. When compiling for VUEE, you can now
	specify -i, which will force all functions that are not explicitly
	declared as static to be implemented as idiosyncratic, i.e., as node
	methods. This is recommended in those cases when a multiprogram praxis
	uses the same names for functions in different programs. Read
	PiComp.pdf.

PG110114A:

	Battery sensor (internal) added to the CHRONOS board definition. As
	requested by Wlodek, this is sensor number 0, with the previous two
	sensors renumbered 1 and 2. It goes like this:

	#define	SENSOR_BATTERY	   0	// Analog internal battery sensor
	#define	SENSOR_MOTION	   1	// CMA3000 acceleration sensor
	#define	SENSOR_PRESSTEMP   2	// SCP1000 pressure/temp. combo

	The value returned by the battery sensor is (Vcc/5.0V)*4096.

PG110122A:

	Our standard setting of the global ADC options included REFOUT to make
	sure that the reference voltage was always available on the respective
	pin. This is not such a terrific idea for CC430 where this function is
	shared, and REFOUT must be combined with the proper redefinition of the
	pin function to make sense (otherwise, if the pin is used for another
	purpose, the ADC may misbehave). So now there is this new option:

	#define ADC_REFERENCE_OUT 1

	with the default setting corresponding to our previous way of handling
	the reference voltage. On CC430-based boards, it should be set to zero
	(which I have done), unless you in fact want the reference voltage to
	go out (and the pin function is properly selected). The option is not
	applicable to eCOG.

	When called with the program tag (for multiprogram praxes), mkmk
	wouldn't clear the previous KTMP_... directory of the program; it
	does now.

PG110123A:

	CMA3000, the acceleration sensor in CHRONOS used for motion detection,
	now has two modes. The new version of the function initializing the
	sensor:

	void cma_3000_on (word mode);

	accepts one argument which can be:

	0 - selecting the old low sensitivity mode, with the sensor operating
	    in the motion detection mode within 8g range. In that mode, the
	    nominal sensitivity is 67mg (milli-G) in any axis. Its advantage
	    is the absolutely minimum energy usage. Being entirely interrupt-
	    driven, it facilitates power-down operation of the CPU. The chip
	    drains about 9uA of current.

	1 - selecting the high sensitivity mode, with the sensor operating in
	    measurement mode within 2g range. The nominal sensitivity is 17mg.
	    The mode requires a constant periodic readout by a special process,
	    which is presently done at 20 msec intervals. The chip itself
	    drains about 70uA.

	I have simplified the return value of the sensor removing the time
	stamp (which was pretty much useless). The third argument of
	read_sensor is now a word pointer. The single returned word value is
	proportional to the perceived amount of movement since the previous
	take (stopping at 0xffff). In mode 0, it counts the interrupts. In
	mode 1, it stores the aggregated difference in perceived acceleration
	summed over all three axes (and tends to be much larger than in mode
	0 - for the same amount of movement, actually showing the amount of
	movement as opposed to its mere occurrence).

PG110204A:

	A few cosmetic adjustments inspired by Wlodek's habitual experiments
	with -Wall in Makefiles. Basically, all compiler warnings can be
	eliminated, although eliminating some of them doesn't warrant the
	effort. This time Wlodek did detect one true problem: the constant
	ccodes in ez430_lcd.c had no explicit type, which defaulted to int,
	whereas it should have been byte. That resulted in some wastage of
	(code) memory (i.e., flash).

	One class of warnings that I cannot eliminate are those generated by
	PiComp-inserted labels of the form __stlab_... corresponding to FSM
	states. Those labels are needed to implement the operation sameas, and
	they will generate warnings when not used (which is most of the time).
	Needless to say, they are completely harmless despite those warnings,
	and eliminating them would require a considerable effort in PiComp,
	which would serve no other purpose.

PG110206A:

	While cleaning up my laptop, switching to Windows 7, reinstalling
	Cygwin and stuff, I went through the Installation document fixing this
	and that. One thing I noticed in the new Cygwin was that the first
	invocation of mkmk would fail because of Cygwin's warning about DOS-
	style paths in execs issued by Tcl (the message went to stderr
	triggerring exec abort in Tcl). Apparently, having issued the warning,
	Cygwin ignores subsequent cases of DOS-style paths, so I simply had to
	make sure that the first error was caught and ignored. Note that this
	is the same Tcl that comes with Cygwin, so the incompatibility is not
	mine.

	To sum it up:

	1. A minor change in mkmk.
	2. Updated Installation.pdf.
	3. Added mspgcc.pdf (Steve Underwood's manual) to Docs, so it is always
	   easy to find.

	I am putting in our REPO (http://www.olsonet.com/REPO) two files which
	now represent our official recommended version of mspgcc:

	mspgcc_source.tar.gz	- the source files to compile (both for Linux
				  and Cygwin)

	mspgcc_linux.tar.gz	- tarred and zipped precompiled /opt/mspgcc for
				  Linux

	These files are referenced in Installation.pdf.

PG110207A:

	As pointed out by Wlodek, the problem described above concerns other
	scripts, notably picomp. In most cases it doesn't show up (or isn't
	very annoying) as after the first failure of ANY script, the remaining
	invocations of all scripts within the current Cygwin session will be
	OK. So this is a more comprehensive fix involving picomp, piter, mkmk,
	and cleanup.

PG110220A:

	Removed (or so I hope) the hangups of CHRONOS detected by Wlodek in
	new_il_demo. Wlodek noticed that the hangups did not occur if the
	RX wasn't switched off and on. Apparently, the problem was caused by
	enter_rx (in phys_cc1100.c) executed after reset to exit the power
	down mode. Inserting a slight delay between two consecutive attempts
	to enter the RX state appears to have helped, although I don't
	understand why. I've been lucky to have found it at all, considering
	the lack of debugging (and very mediocre tracking) capabilities on the
	CHRONOS.

	Fixed a race in phys_cc1100.c causing incorrect setting of the chip
	when the TX and RX status was changed simultaneously. For example,
	in this sequence:

	tcv_control (sfd, PHYSOPT_TXOFF, NULL);
	tcv_control (sfd, PHYSOPT_RXON, NULL);

	if the previous state of TX and RX was both OFF, the RX would not
	switch on properly.

	All this still sucks. Most of the problems are caused by the different
	stages of switching off the transmitter: draining, erasing, holding.
	A question to Wlodek: do we need TXHOLD at all? (It is OK if we do ;-).

PG110226A:

	Nothing of formal relevance. A minor fix to BlueTest (one of the lines
	written to the UART wasn't terminated properly). Added a new data set
	(data8.xml) and a geometry file (geometry8.geo) to Apps/VUEE/RFPing to
	demonstrate pin-controlled node coloring in the ROAMER window. See
	README_PG.txt.

PG110421A:

	Updated the com0com driver included in UTILS.zip to the newest version.
	Have checked it on Windows 7 and it seems to work fine.
	Board WARSAW_BLUE and the praxis BlueTest modified to accommodate
	BTM-182 (a new module to replace LinkMatik). As it turns out, the
	replacement will be short lived (and, probably, another replacement
	will be coming shortly), but the extension was almost trivial.
	The piter script upgraded a bit:
		1 - command "!q" quits the emulator gracefully
		2 - the RTS signal is pulled down on open, which is needed
		    by some exotic UARTs, even with hardware flow control
		    switched off (I needed it to talk to arduino, which you
		    probably don't care about)

PG110519A:

	The OSSI script in eco_demo revived and tested. See README.txt in
	Apps/VUEE/eco_demo/OSSI for a brief case study.

	Note that eco_demo is not picomp-compliant yet (this will be my next
	commit, I guess).

	Voltage sensor (internal) added to BOARDS/WARSAW_BLUE. The sensor
	(number 0) returns (Vcc * 4095) / 5.

PG110522A:

	I have converted eco_demo to a picomp-compliant form (basically undoing
	the old-style VUEE-compatibility mess). The new version is stored in
	Apps/VUEE/new_eco_demo. The old version has been left as it was, except
	that I removed from it the OSSI subdirectory and the docs (which are
	now stored with the new version of the praxis. Note that I haven't
	tested the converted version except for compiling it (in all possible
	ways) and running briefly a large VUEE model (large_eco.xml). Use with
	care.
	
	Fixed a typo in BOARDS/ARTURO/board_pins.h.

PG110529A:

	Macro emul added to make sure that emul calls (see the corresponding
	entry for VUEE) are converted to NOPs by default.

PG110610A:

	A few cosmetic modifications to picomp, mkmk, deploy (as well as some
	adjustments in the documentation: PiComp, mkmk) facilitating the SDA
	(Software Development Assistant) that I have begun to work on. This
	work has a low priority and is likely to be preempted, so don't hold
	your breath. The temporary code name of this project is PiSDA (for
	PicOS Software Development Assistant), but it will certainly not stay
	(it just doesn't sound nice in Polish).

PG110613A:

	Made sure that eco_demo (and new_eco_demo) compiles with WARSAW for
	the aggregator node (i.e., the aggregator doesn't absolutely have to
	be equipped with a voltage sensor or an SD card).

PG110618A:

	Fixed (or rather patched) a problem in the CC1100 driver detected by
	Paul whereby a large fraction of a collector's packets wouldn't make it
	to the aggregator. The problem was caused by multiple status change
	requests that were sent by the praxis to the driver basically in the
	same event (i.e., without letting the driver's thread run in between).
	The way a status change (TXOFF, TXON, RXOFF, RXON, TXHOLD) is handled
	consists of two steps: 1) an immediate action carried out by
	tcv_control (the driver's options function), 2) some action performed
	by the driver's thread in response to the event caused by the first
	action. This is messy because you may, for example, execute TXON and
	later TXOFF (e.g., in the same state) without giving the driver's
	thread a chance to respond to the first change (action 2 must be
	asynchronous). This is allowed and in fact quite natural, as in:

		tcv_control (rfd, PHYSOPT_TXON, NULL);
		tcv_endp (packet);
		tcv_control (rfd, PHYSOPT_TXOFF, NULL);

	However, when the above sequence was followed by:

		tcv_control (rfd, PHYSOPT_RXON, NULL);

	executed before the driver's thread responded to the first sequence, it
	would, with a large probability, quietly abort the transmission in
	progress.

	I (think I) have fixed this for now, but I don't like it. So I will
	think of a way to simplify the matters and implement a better solution.

PG110618B:

	A minor improvement to PG110618A (probably inconsequential for
	eco_demo).

PG110622A:

	BlueTest modified to allow resetting the baud rate of BTM-182 to
	factory setting. README.txt fixed a bit and updated.

PG110806A:

	TESTS/BlueTest completely rewritten (see doc.odt). Added commands to
	automatically configure BT modules for one of two roles: UART or
	SCANNER.

	Added praxis TESTS/BlueScan with a sample scanner function, as
	requisitioned by Wlodek for VeriLoyal. See doc.odt in that directory.

	The default UART rate for WARSAW_BLUE (both BT modules) changed to
	9600. Read doc.odt in TESTS/BlueTest.

	Added (tentatively) board CC430W describing the new Warsaw board.

	CMA3000 sensor driver updated to be compatible with the new Warsaw
	board (where the sensor is connected via regular pins rather than SPI).
	Not tested yet.

	Added board KRAKOW_SHT (required for Wlodek's demo in Krakow). It
	describes a Warsaw board with three sensors: battery voltage + the
	two components of a single SHT sensor.

	Added a couple of potentially useful macros to Libs/Lib/form.h.

	A few minor cleanups in phys_cc1100.c.

	A table of available UART rates (a symbolic constant) is now defined
	in PicOS/MSP430/uart_def.h.

	Option -S added to piter to report the list of available (openable)
	UARTs.

PG110807A:

	Added a driver for an array version of the SHT sensor. Board
	WARSAW_10SHT (see board_pins.h) shows sample defs for such a sensor.
	The idea is that all the multiple SHT sensors share Vdd, Ground, and
	Clk lines. Identical commands are sent to all of them at the same time,
	and data is extracted individually but in unison. The array is visible
	as two sensors (temp + humid, as for the scalar variant), but the value
	returned by read_sensor is actually an array of values.

	For example, WARSAW_10SHT defines 10 SHT sensors, to the pointer passed
	to read_sensor, i.e., val in

		read_sensor (STATE, sensnum, val);

	must be an array of 10 words (the function assumes that there's enough
	room for 10 word values).

	The pins assignment in WARSAW_10SHT is as requested by Gerry, i.e.,

	CLK  = P1.7
	DATA = P2.5, P2.3, P2.4, P6.7, P2.2, P1.6, P6.6, P6.5, P6.4, P6.3

	The above ordering of pins corresponds to the ordering of values in the
	array (0 through 9).

	To test, use the praxis in Apps/ECOPROJECT/SENSOR_TEST (I have modified
	it, so that it can handle arrays of values):

		mkmk WARSAW_10SHT
		make

	Commands:

		s 10	[says that values are arrays of 10 words each]
		r 1	[read the temp array]
		r 2	[read the humid array]

	Each time you do r, you will see as many values as specified in the
	last argument of s (with 1 being the default).

	Note: sensor 0 is the battery (voltage) sensor. It doesn't hurt to view
	it as an array (the unused values are zero).

	Note: if some SHT sensors are disconnected, their values will be
	0xFFFF or 0x0000 (depending on whether the pull up resistor for the
	data pin is present or absent).

PG110815A:

	Added an option to slow down the clock for the array version of SHT
	(see the previous tag). As predicted, there seem to be problems with
	longer cables. You can now set SHTXX_CLOCK_DELAY in options.sys to the
	number of microseconds (roughly) separating two clock ticks, e.g.,

	#define	SHTXX_CLOCK_DELAY 10

	BTW: some files are tagged as modified although they haven't really
	changed. Don't be alarmed: I have fixed a few erroneous permission
	bits.

PG110828A:

	Wlodek is forcing my hand, so a couple of items in this commit are
	incomplete, but that's OK. Nothing serious.

	Added piter_plug.tcl to Apps/VUEE/krk_ned. This is the (tentative)
	conversion plugin to piter. Invoke piter this way (in that directory):

		piter -p ... -P

	The -P is critical. Also, read Serial.pdf (it has been updated),
	especially the part about piter.

	Lots of changes to piter, see above.

	Default setting of SHTXX_CLOCK_DELAY in BOARDS/WARSAW_10SHT changed
	from 0 to 1, as per Gerry's experiments.

	Fixed a problem with picomp whereby the VUEE compiler would ignore
	function declarations and other definitions in "external" (library)
	files, especially those that used non-method functions (like LibXRS).
	The present fix is a crude hack (involving "special sequences" in the
	affected files) and a better solution is called for. I think I know
	what to do and there's no rush.

	Modified the way diag was handled in phys_uart.c (and a few related
	places). One curious feature was that if a diag message started with T,
	that T was discarded.

	Apps/VUEE/ILLUSTRATION/OSSEXAMPLE added to illustrate my new ideas
	about OSS. Still to be described, discussed, and probably revised.
	Stay tuned.

	BOARDS/CC430W in this version is a mess, but I will fix it soon. Just
	got the mended boards from Warsaw.

PG110831A:

	Fixed ossi.tcl in Apps/VUEE/new_eco_demo to properly handle multi-digit
	power specification for collectors.

	A couple of cleanups in BOARDS/CC430W related to my recent testing of
	the new Warsaw board.

PG110902A:

	Apps/VUEE/ILLUSTRATION/OSSEXAMPLE includes an illustration of my
	tentative OSS framework (for discussion with Wlodek). Read notes.odt
	in that directory.

	The plugin mechanism of piter extended by plug_init and plug_reset
	(read Serial.pdf). Fixed a bug in piter rendering the binary mode
	in the PG110828A version inoperable.

	Changed the diag preamble character for phys_uart from 0x00 (introduced
	in PG110828A) to 0x10 (ASCII DLE). With 0x00, binary diags will not 
	work. Does anybody still need them? I don't think so (not with
	phys_uart, anyway), but, in any case, DLE is better for this role than
	0x00.

PG110918A:

	A new version of piter. Here is the note that has been inserted into
	Serial.odt:

	===

	When called without parameters, the script runs in a simple GUI mode
	whereby the terminal is presented in a window (similar to udaemon's
	UART window). The script's parameters (corresponding to command-line
	arguments) are entered in a special dialog, which should be
	self-explanatory. The device (UART) can be selected from a menu (the
	list of available UARTs is determined by the scrip via a scan
	(equivalent to -S). A device that does not appear on the menu can be
	entered manually into the "Other" field (which takes precedence over
	the menu).

	Note that the log file (equivalent to -f or -F) is controlled from the
	terminal window (in a manner similar to udaemon's UART window).
	Logging can be started and stopped on the fly.

	There is an option to save the settings in an "rc" (.piterrc) file in
	the home/user directory. If a saved setting is available, it will be
	assumed as default upon the next call.

	===

	The script can be run through freewrap to become executable as a 
	stand-alone program (it did work for me). Combined with the possibility
	to save the settings (including the locations of plugins and macro
	files), the GUI version should be more convenient than the old
	command-line script.

	One problem: copying to clipboard from the terminal window doesn't
	work (udaemon has the same issue). I am not sure if this isn't a
	fundamental problem with Tcl/Tk on Windows. Will investigate.

	===

	Script "release" included in the root directory. Its purpose is to
	create a clean "platform package" (cleaned up, no .git) to be used for
	creating live USB sticks.

PG110919A:

	A tiny little fix to the deploy script. Piter is now installed in
	$HOME/bin as piter.tcl, which makes it clickable (when clicked, it
	executes in the GUI mode). A symbolic link to piter.tcl is also set
	from $HOME/bin/piter, which makes the old command-line invocation
	available as well.

PG110919B:

	Device scan in piter (GUI mode) made optional (via a special button).		In some cases (Bluetooth ports) the scanning may take a while. A few
	cleanups done along the way.

PG110920A:

	Wlodek discovered that piter was having problems with port numbers > 9
	(on Windows). Hopefully, I have fixed that. Also (which I discovered),
	it would hung on Linux when exiting. Hopefully, not any more.

PG110920B:

	Cleaned up device names in piter (no more weird names like \\.\COM17).
	Hopefully, this is the last one of the quick series of commits inspired
	by the Krakow project.

PG111013A:

	Clipboard selection in piter's terminal window (the GUI version) now
	works. Just drag the text with the left button (as in X-Windows). The
	same applies to the line input area at the bottom. Additionally, the
	middle button in the line input area does the paste (as for X-Windows).

	The TESTS/WARSAW praxis made picomp-compatible.

	Board definition for the present (broken) version of the new Warsaw
	board (BOARDS/CC430W) now corrects for the frequency shift incurred by
	the faulty crystal, so the board can talk to other boards.

	Fixes/corrections to the new Warsaw board included in
	BOARDS/CC430W/FIXED (by way of documentation), so we have a ready
	board definition when the mended version of the actual board
	materializes.

PG111104A:

	Added an option to piter (-C filename) to specify an alternative to the
	"rc" configuration file (i.e., $HOME/.piterrc). This is useful, e.g.,
	for PIP which wants to associate piter configurations with projects.

	Fixed a bug in piter causing incorrect interpretation of arguments
	under Linux.

	A few cosmetics in deploy.

PG111106A:

	Fixed picomp to recognize and diagnose illegal node types (in
	multiprogram praxes) instead of defaulting to something.

PG111207A:

	See this:

		http://www.olsonet.com/REPO/contents.html

	This is our new way of strong things in REPO such that we know what
	is there.

	Files options.nogood, options.satpeg, options.tagall in new_eco_demo
	renamed to options_nogood.sys, etc. to make them formally visible as 
	options files by PIP. I hope Wlodek doesn't mind.

	A few documents upgraded.

	Script usefetdll added (it deploys into bin) to switch the DLLs used
	by gdbproxy - to cater to the different FET programmers: FET430UIF,
	Olimex Tiny, and parallel (practically defunct). This will only work,
	if you download the new (binary) mspgcc set (for Windows) from the
	REPO. Try the binary first. If it doesn't work, compile from the
	source.

	The deploy script modified to account for PIP (you should keep it at
	the same directory level as the rest). It will only work if you fetch
	the new PIP as well.

	Some cosmetic changes to piter and Apps/TEST/WARSAW.

PG111208A:

	Fixed a nasty bug in picomp (introduced in PG111106A) causing 
	segmentation faults when a node type in the data file was unlabeled
	(which is a standard for single program praxes).

	Fixed the trivial VUEE data files for the three INTRO praxes by
	removing the false node type ID, which was harmless before PG111106A,
	but now would cause exceptions.

	Some irrelevant cosmetics in piter.

PG111209A:

	Added a new argument to piter. With -T, PIP can set an identifier in
	piter's window title, so multiple piter windows can be told apart.

PG111213A:

	Fixed the GP pin list in BOARDS/WARSAW and BOARDS/WARSAW_BLUE to
	exclude P2.4, which is used as the soft reset button (and was included
	in the list by mistake). When you set it to output (e.g., during auto
	test, as in Apps/TESTS/WARSAW), it will reset the CPU.

PG111214A:

	I have reorganized the Apps directory rather drastically:

	- VUEE has been eliminated

	- Apps/LEGACY contains all praxes that cannot be handled by picomp,
	  including those manually adapted to VUEE (the old pre-picomp way),
	  except for those that have been put into PROPRIETARY

	- PROPRIETARY contains those praxes that we should never be giving out

	- new_eco_demo/new_il_demo renamed eco_demo/il_demo (old versions
	  put into LEGACY; probably they should be removed altogether)

	- I have removed a few old and irrelevant test praxes

	Note that NOT ALL non-legacy praxes are VUEE-compliant (in the sense
	that they can be immediately compiled into VUEE models), but they are
	all picomp-compliant (except for some praxes in PROPRIETARY). The idea
	is that anything non-proprietary, is either picomp-compliant, or is
	considered LEGACY, which means one of these:

	- old trash that we want to keep around for sentimental reasons (some
	  of it may be deleted after a more thorough investigation)

	- something that is probably needed; we will convert it to a
	  picomp-compliant form as soon as we need a demo
	  
	I don't want to count the old-style, manually converted,
	VUEE-compatible praxes to the "presentable" pool, because they are 
	confusing.

	Modified some docs to reflect the new layout of Apps.

	Wlodek, please have a look and tell me what you think.

PG111222A:

	More reorganizations following Wlodek's suggestions:

	- eco_demo and il_demo made PROPRIETARY

	- Docs reorganized, added PROPRIETARY subdir, old PICOS and VNETI
	  subdirs merged into SOURCE, some documents cleaned (like, for
	  example, updating references to Apps directories, removing
	  references to things that no longer exists)

	Not sure what to do with SimNets. Probably should be removed. I am in
	fact tempted to remove all eCOG stuff (we can always excavate it if
	needed).

PG120103A:

	A new version of the experimental location engine in Linux/LOCATION
	(read the doc).

	The release script modified to include PIP.

PG120105A:

	Fixed a bug in piter (introduced at PG111209A) causing an error when
	piter was called without arguments (outside of pip).

PG120115A:

	Fixed a nasty bug in sysio.h: the definition of MAX_ULONG was one 'f'
	short (with disastrous consequences for whoever ever used MAX_ULONG or
	MAX_LWORD).

	A couple of preliminary (and harmless) add ons in preparation for our
	forthcoming "spectrum analyzer".

PG120120A:	3 4

	System version bumped to 3.4 (from 3.3).

	A couple of irrelevant cosmetics needed for the spectrum analyzer
	project.

	Export/generic.exp now describes PICOS export configuration for UOttawa
	(and, possibly, other places as well). Scripts release and Apps/cleanup
	modified a bit to allow for convenient export packaging. For example,
	to create the picospack file for UOttawa do this:

	1. cd to PICOS
	2. execute ./release Export/generic.exp

	Note: release without the argument works exactly as before, i.e., it
	packages everything.

	With the argument, the created picospack file will include all the
	components: PICOS, SIDE, VUEE, PIP, with PICOS taylored to the
	recipient as per the specified export file:

	- proprietary and garbage stuff removed; Wlodek may want to verify if
	  I haven't missed anything (and adjust generic.exp to taste)

	- project (PIP) configuration files removed from App subdirectories

	Note: the App/cleanup script now accepts an argument; when called with
	-p it will (additionally) remove PIP config files.

	The Installation doc corrected as per Paul's suggestion. Indeed, the
	suggestion to jump to the Windows exercise before the section on how
	to invoke gdbproxy under Linux was misleading. Thanks Paul!

PG120201A:

	Fixed Apps/cleanup such that cleanup -p works properly under Linux
	(i.e., removes project config files as it should).

	Inspired by the above fix, I have decided to remove project config
	files before a comit. Those files tend to change and may be confusing
	sometimes. It will be safer if you reconfigure your project (which
	operation is typically very simple) rather than use some accidental
	config file from a test or something. If you are attached to your
	config files, copy them before syncing to the repo.

	Praxes VNETI_TIMERS and OSSEXAMPLE moved from EXAMPELS to PROPRIETARY
	(as suggested by Wlodek). Added a comment to LIB_EXAMPLE/README.txt.
	Also, README files added to Apps/EXAMPLES and Apps/EXAMPLES/INTRO
	explaining in which documents the examples are referenced.

	Added a hard option (constant AUTO_RADIO_START) to TEST/WARSAW to make
	it possible for the test to start with the radio active, which is
	useful for experiments. This option is now ON.

	BOARDS/CC430W modified to correspond to the correct (fixed) version of
	the new board. The "broken" files are still available in subdirectory
	BROKEN.

	A few cosmetics, e.g., cygfix sequence added to scripts pxport and
	release to walk around the notorious "first file reference" problem.

PG120210A:	3 5 	VUEE >= PG120210A

	Slight modifications to TCV (VNETI), but requiring changes in the
	signatures of some plugin functions. Read the blue bits in VNETI.pdf.
	Nothing revolutionary, but still ... VNETI isn't changed that often.
	While working on a plugin for OSS (which I later decided to scrap) I
	discovered that some potentially useful functionality was difficult
	to accomplish:

	1. There was no way to block tcv_wnp/tcv_wnpu from a plugin, i.e.,
	   as long as memory was available the function would always grab a
	   packet buffer. Any decision regarding the packet's fate had to
	   be postponed until tcv_endp.

	2. These plugin functions: tcv_xmt, tcv_out, tcv_tmt would benefit
	   from the session ID passed as the second argument, especially in
	   those cases when the plugin admits multiple sessions.

	I have located all VNETI plugins and modified them accordingly
	(including TARP, of course), so they all should be OK.

	Also, I have removed some code from tcv_open and tcv_close (or rather
	made it conditional: #define TCV_OPEN_CAN_BLOCK 1) needed only when
	the plugin decides to block the operation. None of our plugins comes
	close to requiring this feature.

	Added a section to cc1100.odt/pdf on adjusting the base RF frequency
	by setting options.sys constants. It seems that we have to resort to
	such measures with the new boards on which the oscillator tends to be
	off a bit.

	Even though I did bump the system version not so long ago, I have
	decided to do it again, because there are some semi-serious
	consequences of the present set of changes:

	1. The signature and semantics of some VNETI functions have changed
	   (so old app code may not be compatible without a modification)

	2. A (slight) matching VUEE modification is required

PG120215A:	VUEE >= PG120215A

	OK, following a discussion with Wlodek, I've decided to unscrap the
	plugin mentioned in the previous entry, test it, and document it.

	Plugin plug_boss in Libs/LibOSS. BOSS stands for Binary OSS, but it
	doesn't have to be binary. Read Serial.pdf.

	Modified piter to accommodate:

	- raw N mode (without XRS on top, as mode n)
	- BOSS on top of N (as mode s)

	plus a few cosmetics. Keep your eyes open. Modifications are (sort of)
	documented in Serial.pdf.

	Apps/TESTS/XRSTest moved to Apps/LEGACY (it follows the old VUEE-
	compatibility scheme)

	Apps/EXAMPLES/BOSS trivially illustrates how to set up the BOSS plugin.

PG120220A:

	A new version (clone) of the econnect script in Scripts. The old
	version is still available in eco_demo/OSSI/ECONNECT. Note that the
	old version is only for Windows and must be installed. It was
	intended for Arturo and needed a special program (esdreader + Cygwin
	DLL) for extracting data from SD cards. In the clone (which is
	standalone, needs no Cygwin, and also run on Linux) I have diabled
	the SD card data extraction, but it should become available
	(automatically), when esdreader is around (not a big deal, but quite
	likely such a setup won't ever be necessary).

	I have created a Tcl package for setting up direct connections to
	VUEE UARTs (Scripts/vuart.tcl). The econnect clone takes advantage
	of that package and can connect directly to a VUEE UART bypassing
	the udaemon U-U kludge. I am going to outfit piter with the same
	feature.

	Some cosmetic corrections to the Serial doc. Don't look there for
	a description of econnect (it doesn't exist).

PG120221A:

	A new argument type added to picomp to make it possible to define
	symbols for the VUEE model, specifically:

		-Dsym			just defines sym
		-Dsym=val		defines sym to have value val
		-Dpeg+sym
		-Dpeg+sym=val		the same but only for the peg program

	Such arguments are used by PIP to pass to the model the board info,
	if board(s) is/are configured for the praxis.

	Updated documents: PiComp, mkmk. See also PIP.

	A previously undocumented feature, symbol SYSVER_B defined as the
	stringified board name, is now documented in the mkmk doc.

PG120222A:

	Added the capability to test the CMA3000 sensor in TESTS/WARSAW. The
	problem is that the sensor must be explicitly switched on (in one of
	two modes) before appearing usable.

	Also cleaned up a couple of items in BOARDS/WARSAW/CC430W.

PG120223A:	VUEE >= PG120223A

	Accommodates negative numbers of sensors (and actuators - we don't
	use them a lot, do we). Look at BOARDS/ARTURO/board_pins.h for an
	illustration.

	I have defined a macro, INTERNAL_VOLTAGE_SENSOR, to cover all the magic
	needed to define an ANALOG_SENSOR describing the internal voltage
	sensor (Vcc/2 referenced to 2.5V). So there is no need to repeat all
	the detailed definitions (hold time, source, reference, and so on)
	at all boards that may want to use that (standard) sensor. Here is
	another standard one: INTERNAL_TEMPERATURE_SENSOR.

	The conversion formula: Temp(C) = V * 0.1032 - 277.75.

	I haven't removed (or reshuffled) any sensors defined in existing
	boards (yet), except for adding the internal voltage sensors
	(numbered -1) to all ARTURO* boards (as asked by Wlodek).

	The second argument of read_sensor (and write_actuator) is now sint
	(not word, as it used to be).

	VUEE knows about all that (see eco_demo/collector.xml for a definition
	of a negatively numbered sensor).

	I have added to VUEE the same trick we do in PicOS: for a nonexistent
	sensor, the return value is incremented (rather than triggering
	errors).

PG120223B:

	Both mkmk and picomp (for VUEE) now define these symbols:

	#define PGMLABEL_xxx
	#define	PGMLABEL xxx

	where xxx is the program's file suffix (label). This only applies to
	multiprogram praxes. Additionally, for mkmk, the praxis must be
	compiled in the multi-makefile mode; otherwise, the symbols are not
	set.

PG120224A:

	As suggested by Wlodek, I have changed sensor definitions in
	(practically) all MSP430 boards, such that the internal voltage
	sensor is -1 and the internal temperature sensor is -2.

	On those boards that defined the so-called external-internal sensor,
	i.e., a pin-based battery sensor, that sensor has been removed,
	except for WARSAW_NEW_REVISED where that kind of sensor was explicitly
	used for testing the internal-internal voltage sensor.

	On those boards defining the external-external voltage sensor, i.e.,
	a voltage sensor for a pre-regulator external power source, that
	sensor has been renumbered as -3 (e.g., see CC430W).
	On WARSAW_NEW_REVISED, the (retained) external-internal sensor is -4.
	So we have this convention:

	-1		- internal voltage sensor
	-2		- internal temperature sensor
	-3		- external voltage sensor (if present)
	-4 and down	- other exotic "special" sensors

	On some boards that defined no sensors I have added sensors -1 and -2.

	On some other boards that defined no sensors (GENESIS, VERSA), I have
	added sensors -1 and -2 conditional on #if 0, so I haven't added them
	really.

	Some yet other boards that defined no sensors (G4619, GENERIC_148) I
	haven't touched at all.

	Some boards (notably all SFU_ ones) I have packed into archived.tgz and
	removed.

	Note that sensors have been renumbered on some boards. Wlodek has
	promised to update the relevant praxes accordingly. Until then those
	praxes may be out of sync with their boards.

	Fixed EEPROM pins on CC430W.

PG120225A:

	Both mkmk and picomp have been fixed to:

	1. accept defined in #if's, e.g.,

		#if defined A || !defined(B)

	2. handle #elif's, e.g.,

		#if ...
		#elif ...
		#elif ...
		#else

PG120228A:

	The first cut of econnect.tcl (in Scripts) compatible with Wlodek's
	vsen_demo. The conversion snippets seem to be OK for Wlodek's SENSET,
	as per this list:

	#define SENSET_GENERIC	0
	#define SENSET_ECO_12	1
	#define SENSET_ECO_45	2
	#define SENSET_ILS	3
	#define SENSET_CHRO	4
	#define SENSET_10SHT	5

	GENERIC		IT, VOL
	ECO_12		IT, VOL, SHT_T, SHT_H
	ECO_45		IT, VOL, SHT_T, SHT_H
	ILS		IT, VOL, LIGHT, IR
	CHRO		IT, VOL, ACC_CMA3000, TEMP_SCP1000
	10SHT		IT, VOL, (SHT_T, SHT_H) * 3

	Modified the snippets package in Scripts. The new version should be
	compatible with the old snippets data format. The only significant
	difference is that the range of what was previously considered the
	collector number now starts at zero, with the number interpreted
	as the SENSET index.

PG120228B:

	It is now possible for piter to connect directly to a VUEE UART model
	in way of econnect. Examples:

	piter -p 3:localhost:4445 	(node 3)
	piter -p :some.host.com: 	(node 0, default port 4443)
	piter -p 1: 			(node 1, localhost, 4443)
	piter -p :			(node 0, localhost, 4443)

	Of course, the reamining arguments are as before.

	Replaced piter_plug.tcl in vsen_demo with the new piter plugin for the
	praxis. Try it.

	Changed the description of snippets (for econnect as well as for the
	piter plugin in vsen_demo) to include "units". Note: your old snippets
	in .econnect/ will NOT be compatible.

PG120229A:

	A new version of econnect, as per my discussion with Wlodek:

	- When you STOP a node, you get a list of options including simple
	  reset, factory reset, maintenance mode, cancellation.

	- There is no lower bound (other than 1) on the sampling interval, but
	  note that "Y" is always issued at start. Previously, the interval
	  could be auto-adjusted, if it didn't divide 24 hours evenly, now I
	  leave it alone. Not sure how it fares with Y for intervals >= 60 sec.

	- I have removed the "a" command from all sequences.

	A slight modification to piter to make it easier to insert into its
	code a replacement default plugin. The place to insert the plugin
	(just write there the contents of the plugin file) is clearly marked
	at the end of the code. The plugin can be overriden (in the same way
	as the standard default plugin) by an explicitly specified one.

	I have tested econnect and piter with freewrap. They both seem to be
	doing fine. Note that their .rc files (.piterrc and econnect,
	respectively) are created under C:/Users/username.

	I haven't renamed econnect (yet), although I have changed the banner
	name in the code to ConSenT (as suggested by Wlodek). Feel free to
	change the filename -> consent.tcl.

PG120229B:

	Fixed sensors_sys.h, so "INTERNAL SENSORS" can compile in on CHRONOS
	(and other CC430 boards).

PG120303A:

	Fixed the snippets package (in econnect as well as piter_plug.tcl in
	vsen_demo) to admit one special non-numerical value, ?, returned by
	a snippet and interpreted as none. SHT snippets modified to interpret
	-1 and 0 as a signal that there is no sensor (so the snippet returns
	?).

PG120304A:

	Fixed piter_plug.tcl in vsen_demo to account for "gone" collectors.

PG120320A:

	Fixed a minor bug in BOARDS/CC430W causing that the external voltage
	sensor didn't work.

	Added board WARSAW_6SHT with the SHT array truncated to 6 units and the
	remaining slots used as analog sensors, with P6.3 intended for the
	sonar. Read README.txt in WARSAW_6SHT.

	Board WARSAW_LCD_TEST moved back from the archive and renamed
	WARSAW_N6100. That board is needed to compile SEAWOLF, which is an
	active praxis, so it shouldn't have been removed.

	A few cosmetic changes in the LOCATION document.

PG120323A:

	Fixed a problem with vsen_demo causing extensive current drain for
	CHRONOS in the apparent SLEEP state. Note: there is a minor (but still
	nasty, as it turns out) incompatibility between PicOS and VUEE, namely:

	- in VUEE, a missing finish at the end of a state devoid of wait
	  requests causes the process to terminate

	- in PicOS, such a process will immediately restart in its last state
	  (effectively looping)

	I promise to do something about it, although the problem is more
	difficult than it would seem at first sight.

PG120323B:	VUEE >= PG120323A

	Node data for CHRONOS in vsen_demo now declares a null EEPROM (meaning
	"no EEPROM").

	A cosmetic change to BOARDS/CHRONOS/board_sensors.h.

PG120324A:

	A couple of corrections to the input data set for vsen_demo. Note that
	to properly set the power tracker parameters for CHRONOS (e.g., to
	eliminate the standby current drawn by EEPROM), you have to redefine
	<ptracker> for the node. Removing the EEPROM itself won't do as long
	as the EEPROM remains present in <ptracker>, because its standby power
	usage (declared in <ptracker>) will always take effect. Also note that
	you should define a separate <ptracker> set for CHRONOS anyway, as the
	power usage parameters for CHRONOS components are quite specific and
	different, e.g., from those for the WARSAW board.

PG120409A:	VUEE >= PG120409A

	There is a new sensor-related function:

		void wait_sensor (sint sensor, word state);

	which waits for a sensor event. The function forces release, so it
	should be called last in a state. The function is only available
	(compiled in) if one of the board's critical files (board_pins.h or
	board_sensors.h) defines the constant SENSOR_EVENTS (the CHRONOS board
	does that).

	At this time, only digital sensors offer this option. Note that
	"digital" is a formal classification that should be interpreted as
	"processed". I want to say that harnessing an analog sensor to trigger
	events (e.g., thresholds) can be accomplished by implementing it as an
	"honorary" digital sensor.

	Function read_sensor made void. There was not a single case of using
	its value, besides, the VUEE variant has always been void.

	CMA3000 driver COMPLETELY redone: read cma3000.pdf in Docs. Directory
	Apps/TESTS/CHRONOS/CMATEST contains a test praxis for CMA3000/CHRONOS
	(described in the document). I have modified my praxes referencing
	CMA3000, but Wlodek will have to take care of his (notably vsen_demo),
	preferably after having a quick look at the above-mentioned document.
	I have crudely fixed the praxis to compile, but:

	1. it doesn't use the new event-driven interface to CMA3000

	2. it doesn't even correctly interpret the new value returned by the
	   sensor, which is 4 bytes long

	The single-sensor variant of the SHT driver now returns WNONE when the
	sensor is physically absent, in accord with the multiple-sensor
	variant.

	A few cleanups here and there. Don't be alarmed by the huge number of
	modified files: many of those modifications are re-sets of permission
	bits.

PG120411A:

	Board WARSAW_SONAR replaces WARSAW_6SHT which didn't quite work. This
	is a sonar-only board with the sonar on P6.3 (analog input) and P1.7
	(power supply).

PG120417A:

	A crude and tentative driver for the SCA3100 accelerometer. Board
	WARSAW_SCA is configured for a single sensor (number 0) with these
	pins:
			P6.7	= Vcc
			P2.2	= CSB
			P2.3	= MISO
			P2.4	= MOSI
			P2.5	= SCK

	The sensor (read_sensor) returns an array of 3 sints: X,Y,Z (signed
	16-bit acceleration values). Temperature can be added trivially, if
	needed.

	Functions:

		void sca3100_on ();
		void sca3100_off ();

	There are no modes and no events (unlike CMA3000). The sensor operates
	solely in measurement mode, so read_sensor is the only interface.

PG120418A:

	A new version of the CMA3000 driver, as per my discussion with Wlodek.
	Read cma3000.pdf.

	A new version of the SCA3100 driver, remotely tested and debugged with
	Gerry.

PG120419A:

	A slightly improved version of the CMA3000 driver (see the blue text in
	cma3000.pdf).

	Previous commit (untagged): added buzzer_off to CHRONOS/CMATEST and
	CHRONOS/RFTEST. I have no clue why that stupid command disappeared
	from app.cc for a second time (I distinctly recall fixing the same
	problem some time ago).

PG120421A:	PIP >= PG120421A

	Modified the deploy script to automatically use Cygwin's/Linux's native
	Tcl, if it is version 8.5 or above. I think I have finally managed to
	eliminate the need for a special installation of Tcl (on both systems).
	If you still want to use the "special" (ActiveState) Tcl, even though
	your native Tcl is 8.5, call deploy with -l.

	On Cygwin, this will only work with a recent version of Cygwin (my
	present version (uname --all) is:

	CYGWIN_NT-6.1 MNIV 1.7.13(0.260/5/3) 2012-04-05 12:43 i686 Cygwin

	On Ubuntu, you have to make sure that you have installed packages
	Tcl8.5 and Tk8.5.

	A new (simple) praxis for Gerry to collect data from SCA3100
	(TESTS/SCA3100). Gerry has it already.

PG120422A:

	Updated the Installation doc in accordance with the previous mod.

PG120424A:

	The euphoria about using native Tcl under Cygwin was a bit premature.
	There are problems with piter (opening COM ports, especially the
	exotic variants, like "CNCx:" used for COM-COM emulation). So I am
	disabling the default behavior of deploy on Cygwin systems (not on
	Linux), i.e., on Cygwin deploy will select the old setup by default
	(using Active State Tcl). If you want to try the native version, you
	have to specify -n.

	Hopefully, I will be able to fix that soon (so I am not updating the
	docs [yet]), but I don't want to feel pressed, especially if the
	problem with exotic devices turns out to be serious.

	Fixed piter.tcl in Scripts to get rid of DOS lines apparently causing
	problems on Ubuntu.

PG120425A:	VUEE >= PG120425A

	OK, we are back with PG120421A, i.e., deploy WILL automatically use
	native Tcl/Tk on Cygwin, if it is 8.5 (unless you specify -l).

	There were two problems with piter, which translated into corresponding
	problems with udeamon, specifically:

	1. Serial device names were wrong. The Cygwin native version of Tcl
	   does not accept Windows style COM names, like \\.\COM12, which the
	   script would issue. It will accept instead starightforward COM
	   names, like COM7: which, however, are discouraged under recent
	   Cygwin. The recommended style of naming serial devices is now
	   completely UNIX-like with COM1 translating into /dev/ttyS0, COM2
	   into /dev/ttyS1, and so on (note the shift by 1). Notably, Cygwin
	   now implements pseudo-ttys (virtual, open-ended tty's) which can be
	   used instead of the CNCAx/CNCBx pairs. The procedure is exactly as
	   for Linux (described in the VUEE doc). This is good news, because
	   I could find no way to access the CNCAx/CNCBx devices from native
	   Tcl.

	2. If udaemon is to run under native Tcl, the same problems must be
	   addressed. Also, it must use pseudo-ttys (rather than CNCAx/CNCBx
	   devices) for U-U connections.

	3. There is actually a bug in native Tcl/Tk causing weird window
	   hangups, if you issue "fileevent $fd readable" to a non-blocking
	   COM file descriptor.

	Regarding 3, I spent a whole day chasing the bug, and the most specific
	diagnosis that I have been able to procure is that when you issue
	"fileevent $fd readable" to a COM fd, then text widgets will stop
	receiving update events. Weird, isn't it? For now I have circumvented
	the problem by emulating the readable event via a looping "after"
	callback with dynamically adjustable delay. It is effective but ugly.
	Needless to say, I will remove it as soon as I see that the problem has
	been rectified in Tcl/Tk.

	I have redone the handling of COM names in piter and udaemon. The
	operations have been unified into a package (see unames.tcl in
	Scripts). Note that for U-U connections both piter and udaemon now use
	pseudo-ttys (also under Cygwin in native mode), so the CNCAx/CNCBx
	devices can be considered obsolete (one less thing to carry around).

PG120426A:

	A tentative board definition for the solder reflow project
	(WARSAW_REFLOW) with this pin assignment:

	THERMOCOUPLE SENSOR (MAX6675):	Vcc=P1.6, SO=P2.2, CS=P2.3, SCK=P2.4
	OVEN SWITCH: 			P1.7

	A simple driver for the MAX6675 sensor.

	A simple praxis to test the board and connections: TESTS/REFLOW.

PG120502A:	VUEE >= PG120502A

	Added highlighting as a simple "visualization" feature (read the last
	section of VUEE doc). I have inserted some naive highlighting commands
	into il_demo and RFPing_u. They translate into CNOP for PicOS, so there
	is no harm. To see them in action (say in il_demo), make sure to run
	udaemon with the geometry file included in the project's directory.

	Fixed mkmk to fail if there's no path to msp430-gcc.

	I think I have fixed deploy to work correctly on pre 1.7.13 Cygwin.
	Wlodek, please check.

PG120524A:

	Praxis PROPRIETARY/SA as the first (somewhat) working version of our
	"spectrum analyzer". To be enhanced and documented.

	A few modifications to the BOSS plugin, mostly to give the "reliable"
	traffic a higher priority.

	A minor modification to tcv.c to provide for more flexible queue size
	limits (if this option is used), like setting aside a nontrivial pool
	of buffers for "urgent" traffic.

	A few irrelevant cosmetics here and there.

PG120601A:

	The first presentable and (lamely) documented version of "spectrum
	analyzer". Read Apps/PROPRIETARY/SA/OSS/Doc/SA.pdf.

PG120603A:

	Praxis BlueTest upgraded to handle BT modules connected to single-UART
	boards (see the document). In such a case, the user communication goes
	through an Access Point node.

	Praxis AP (a simple generic Access Point), which is now a bit more
	useful than it used to be, has been moved from Apps/TESTS/CHRONOS to
	Apps/TESTS.

	The symbol UART_B is now defined only if the board actually has the
	second UART.

	Board CC430W_BLUE has been defined (according to Gerry's prescription).
	I have verified things with my version of CC430W. Note that the present
	configuration of CC430W_BLUE assumes that the board is broken, i.e.,

	1. CMA3000 power supply is confused with EEPROM CS

	2. the RF frequency needs to be offset (NB: my new "spectrum analyzer"
	   has verified our earlier [ad-hoc'ish] calculation of the required
	   offset).

	Gerry, if you want to use a fixed variant of the board (no frequency
	offset, no misconnections), do this:

	   cd PicOS/MSP430/BOARDS/CC430W/FIXES
	   cp * ../

	Still to do (assuming that we want to follow up on the idea of
	connecting BT modules to CC430W): make sure that the UART on CC430W
	can use rates higher than 9600 (this is now the limit to the BT serial
	rate).

PG120605A:

	A few improvements to the spectrum analyzer. For example, the starting
	frequency for a band scan is now randomized to reduce the likelihood of
	a time correlation with the transmission frequency of a monitored node.

	Added back the contects of /BOARDS/CC430W/FIXES/ which accidentally
	disappeared in the previous commit.

PG120605B:	SIDE >= PG120605A, PIP >= PG120605A, VUEE >= PG120605A

	All programs and (serious) scripts now show the version number which
	always includes at least the last RTAG of the respective package. For
	command line programs, the version number can be obtained by specifying
	the -V option. GUI scripts include the tag number in the title of the
	main window.

PG120606A:

	CC430W (and other CC430-based boards) can now use UART rates above
	9600. When you put:

	    #define UART_FROM_SMCLK 1

	in options.sys, the UART will be driven by SMCLK (fed from the FLL) at
	12,025,856 Hz (give or take a few Hz ;-). Then you can use UART rates
	from 4800 up to 115,200.

	CC430W_BLUE has the respective definition in board_options.sys, so you
	need not do anything (this is for Gerry).

	Note that the UART_FROM_SMCLK option applies only to CC430-based
	boards. On MSP430F1xx-based boards, the UART is driven from SMCLK
	whenever a second (high-speed) crystal is present (CRYSTAL2_RATE is
	set). The two issues can be easily separated, although there is
	probably no rush.

PG120606B:

	Fixed a little problem with the triple clock (see R100411A). The idea
	was just great, except for one tiny glitch. In a situation like this:

		fsm one {
			state INIT:
				diag ("one");
				delay (1024, INIT);
		}

		fsm two {
			state INIT:
				udelay (10);
				proceed INIT;
		}

	i.e., FSM one (of a higher priority) executing delay, while FSM two (of
	a lower priority) looping through the scheduler, the delay of FSM one
	would never go off. That was because the duration of the scheduler loop
	at FSM two is below 1/4 of a millisecond, and the scheduler would keep
	resetting the timer for FSM one before it could be given a chance to
	make a tick.

	Arguably, the situation is pathological. We do not have praxes like
	this, especially in the low-power environment for which triple clock
	was primarily intended. But I did hit upon this very problem in the
	spectrum analyzer praxis. I could easily circumvent it by switching the
	triple clock off, but ... still ... I didn't like it.

	The way it is now the code has become marginally more complicated, but
	in fact considerably more efficient timewise.

PG120614A:

	Fixed a problem in unames (this is a Tcl package for locating openable
	COM/tty devices) causing that the xterm window from which a script
	(using unames) was invoked was subsequently left (as a tty) in a messed
	up (raw) state (requiring a reset). As it turns out, such a state
	results when you open and close the pseudo tty of the current terminal.

	I have also reduced the number of different kinds of tty devices that
	are shown as options and scanned, basically to COMn (for Windows, or
	"non-native" Cygwin), ttyUSBn for Linux, and ttySn for "native" Cygwin,
	plus virtual devices: CNCAn/CNCBm, pts/n, ptyn.

	A couple of trivial cosmetics, e.g., in anticipation of the
	solder-reflow praxis.

PG120620A:

	Removed the old (and long ago obsoleted) symbol RADIO_BITRATE from all
	places replacing it (wherever required) with RADIO_DEFAULT_BITRATE.
	Wlodek has just discovered that his attempts to set the radio bit rate
	to 200K were illusory.

	A few (mostly) cosmetic fixes to the spectrum analyzer.

	Added a command to TEST/WARSAW to show stack/memory usage data.

PG120724A:	VUEE >= PG120724A

	PiComp has been made aware of the host_id variable. If present, it
	will be made available to VUEE to determine the node ID displayed in
	udaemon's ROAMER window instead of the station's serial number as
	known by SMURPH.

	Note: this way, host_id has been turned into a de facto standard. If
	a praxis declares host_id this way:

		lword host_id = ...;

	or

		const lword host_id = ...;

	then the contents of that variable (the less significant half-word)
	will be also used by VUEE (udaemon) as the node identifier. Otherwise, 
	udaemon will be using simple SMURPH node numbers, as before.

	A cosmetic fix in Apps/EXAMPLES/SIMPLE and SIMPLE_TWO (the Count
	variable [used to count received packets] was incorrectly incremented).

	A few cosmetic improvements to the documentation.

PG120726A:	VUEE >= PG120726A

	I have redone the interpretation/assignment of host_id. For the
	SEDATIVE project, I need the host_id to be present in some conspicuous
	place in the XML data file. So I believe that this solution makes
	better sense:

	host_id is now implanted into PicOS! There is a global "code" constant
	declared as:

		const lword host_id = 0xBACADEAD;

	This means that both host_id and BACADEAD are now "standards". Also,
	any other ways of defining the same thing, like the different names
	used by some praxes (ESN, for example) should be converted to the
	standard.

	In a praxis, you have to:

		1. Get rid of the hostid.cc file (or whatever it is called),
		   including references to it like //+++ hostid.cc.

		2. Remove all declarations of the sort "extern lword host_id"
		   (although legit for real-life compilation, they will
	           interfere with VUEE's handling of host_id). Note that
		   host_id is always available to the praxis and need not be
		   declared.

		3. Remove from the XML data file all preinits of the form:

			<preinit tag="HID" type="lword">0xBACA0001</preinit>

		   referring to host_id. Instead, insert a hid attribute at the
		   node, e.g.,

			<node number="0" hid="0xBACA0001">

		   This is now the proper way of setting host_id in VUEE.

	Note that I have already fixed some praxes in PROPRIETARY, notably:
	eco_demo, il_demo, vsen_demo, KRK_NED, SEAWOLF, and also Ariadne and
	ams_demo in inProgress. I am putting into Scripts a Tcl script named
	fixxml which you can use to automatically fix the XML data files, i.e.,
	do the changes prescribed in point 3 above. You call it with possibly
	multiple filenames passed as arguments, e.g.,

			fixxml data.xml test.xml

	It won't harm a file that doesn't include a preinit with tag="HID",
	so going fixxml *.xml is probably the best idea.

	Note that some praxes, notably ert (in inProgress) use a different
	convention for host_id (like ESN). If we still need those praxes,
	then they must be fixed by replacing ESN with host_id (and fixing
	the problems mentioned above). I can take care of that, but perhaps
	Wlodek should have a look there first.

	Arguments to piter can now include items addressed to the plugin
	following --, e.g.,

		piter -p 1 -m d -- this goes to the plugin

	The list of arguments following -- is passed to plug_init as the
	(single) function call argument.

PG120728A:	VUEE >= PG120728A

	The TXOFF/TXON/TXHOLD physopts have been removed from the CC1100
	driver. Following Wlodek's insightful suggestion, I have simplified
	things such that the transmitter is now implicitly switched on whenever
	there is a packet in the output queue, and switched off otherwise.

	That has got rid of the mess related to the various states of the
	driver caused by emptying the queue, holding it, draining it (in TXOFF,
	TXHOLD), and the product of those states with the receiver states. As
	of now, the only on/off physopt is RXON/RXOFF (a.k.a. ON and OFF),
	i.e., these constants: PHYSOPT_RXON and PHYSOPT_RXOFF can be replaced
	with PHYSOPT_ON and PHYSOPT_OFF (these aliases have been around for
	some time). The old TX-related constants (and physopts) are still
	formally legal, but their actions are void. As needed, we shall be
	implementing the same mode of operation in other RF drivers (but for
	now only CC1100 works this way).

	A single transmission while the receiver is switched off costs
	considerably more (timewise) than when the receiver is on. This is
	because the chip must be powered up and (fully) reset (its registers
	reloaded) before the transmission. Following the first transmission in
	such a state, the chip will remain powered up for as long as the output
	queue is nonempty, but when it gets drained, the chip will be powered
	down again. The moral: if you have several packets to transmit in the
	RXOFF mode, either make sure that the queue is being filled faster than
	the transmitter drains it, or turn on the receiver for the entire
	series of packets.

PG120803A:	VUEE >= PG120803A

	Numerous cleanups to the VUEE-udaemon interface reulting in
	modifications to piter and econnect, as well as some illustrative
	modifications to XML data/geometry sets.

PG120814A:	VUEE >= PG120814A, PIP >= PG120814A

	Following the (rather drastic) changes to the VUEE agent protocol (see
	the VUEE doc), I have updated some data sets augmenting them with what
	was previously known as udaemon geometry data (which used to be stored
	in separate files, their names typically ending with .geo).

	Specifically, I have updated these data sets:

	Seawolf: 	sixnodes.xml, removed geometry.xml
	eco_demo:	collector.xml, large_eco.xml, removed large_eco.geo
	il_demo:	mlakes_27_?.xml, removed mlakes.geo
	ams_demo:	ams.xml, removed ams.geo
	RFPing_u:	data8.xml, removed geometry8.geo

	The new versions of those data files can be used as illustrations.
	Read the VUEE doc, especially the section on udaemon.

PG120822A:

	Fixed a (really stupid) bug in phys_cc1100.c introduced along with the
	features in PG120728A. If you initialized the driver (by phys_cc1100)
	and then (within the same state) immediately powered the chip up
	(PHYSOPT_RXON), the latter action was ineffective.

	Fixed the CMA3000 driver. Added delays in write operations for non-SPI
	access; otherwise write to registers wouldn't work for CC430W. I have
	made sure that the fixed driver works with CHRONOS as well.

	For BlueTooth boards and praxes, I have changed the names of constants
	selecting the bluetooth module (in anticipation of new selections). So
	it is now:

	#define	BT_MODULE_LINKMATIK
	#define	BT_MODULE_BTM182

	One of the two must be defined (there's no fallback to BTM182). This
	will extend over any future additions. I have started work on the BC4
	module sent me by Gerry:

	#define	BT_MODULE_BC4

	but I haven't been able to get it to respond yet.

	A cosmetic fix in TESTS/WARSAW/app.cc.

PG120829A:

	Added a new function qualifier, nonidiosyncratic, to PiComp (read the
	blue paragraph in the doc). The keyword is ugly and rightfully so.

PG120902A:

	Cleaned up the UART PHY code. Removed the ON/OFF options of the
	transmitter, so the PHY is now compatible with the CC1100 driver
	(see PG120728A). In a nutshell, the transmitter is never switched on
	or off; its status is determined by the output queue.

	Added hooks to the UART PHY (all three modes) for half duplex
	operation (as in RS485). The hooks assume a special signal to enable
	transmission + delays on both ends of the transmitted packet. Further
	tests are required to determine the delays (we may also need an
	after-reception delay), but the framework is ready (albeit undocumented
	yet).

	Fixed a minor bug in UART configuration defs (that part has not been
	tested until now).

	Fixed the vuart package (piter, econnect) to use the new handshake when
	connecting to a virtual (VUEE) UART.
	
PG120916A:

	Configuration options for the BC4 BOLUTEK BlueTooth module, see the
	document in Apps/TESTS/BlueTest + board_pins.h for WARSAW_BLUE and
	CC430W_BLUE. The scanner role (Apps/TESTS/BlueScan) seems to work as
	well (in case we ever need it).

	Let it be known that I have wasted a lot of time and patience on this
	module, and I am still far from being 100% sure that it really works
	(Gerry will take over the testing). The required functionality has been 
	determined largely by trial and error.

	I have started to put into the board directories some essential
	documentation related to the boards: schematics, pinouts, etc. This may
	be useful (at least I find it so).

PG120930A:

	While trying the BC4 BOLUTEK module with CC430W I discovered (and
	fixed) a bug in BlueTest/app.cc causing that lines longer than the
	payload capacity of an XRS packet over CC1100 would hang the praxis.
	Of course, that could only happen in the AP (access point) mode.

	Modified (extended) the reflow test praxis for Gerry:

	1. The temperature is now reported in degrees C with the resolution of
	   1/10 degree (plus the old raw reading from the sensor). The
	   conversion is done according to the table that Gerry sent me a few
	   weeks ago. The table appears at the front of app.cc and can be
	   easily edited as needed.  You can modify the table by replacing an
	   entry or entering a new entry between a pair of existing entries.
	   Remember that the values (in both columns) must be monotonically
	   increasing for the interpolation algorithm to work.

	2. There is a new (argument-less) command named run. It starts periodic
	   temperature reports every second in a CSV format which can be pasted
	   into a spreadsheet file (I guess). You stop the reports by entering
 	   any command.

	Wrote a trivial praxis for my septic tank sensor (PROPRIETARY/ST).
	Previously, I was using eco_demo which 1) was an overkill, 2) required
	a PC for the readouts. Now I can tell what is going on just by looking
	at the LEDS of the "master node".

	Fixed the permission script to classify files staring with #!/usr...
	as executables. Previously, only files starting with #!/bin... were
	classified as such.

	Fixed a minor and irrelevant bug in piter.

PG121027A:

	Extended the XML (xml.tcl) package to provide for accurate parsing of
	text (an element body) with interspersed other elements. We haven't
	needed that so far (because our XML data sets never used text items
	where the interpretation of inner elements would affect the text) until
	now (for the IRAP kiosk project). The version label for the XML package
	says PG111008A. There is no such commit (the modification didn't
	warrant one), so this is just the modification date of the XML package.

	Added a null-modem option to the access point (AP) praxis, i.e., two
	access points talking to each other. This is nothing really, except
	that one of the two AP should not operate the AB link in active mode.

	The first tentative version of the REFLOW praxis for Gerry. The praxis
	is in PROPRIETARY/REFLOW. A brief document is included.

	I have created a PWM driver (files pwm_driver.c pwm_driver.h). The idea
	is to have an actuator whose value determines the width of a software
	controlled pulse in a not-too-fast (and not too precise) setup. This is
	accomplished by a process which pulls a pin one way, then delays for
	the pulse width interval (a number of PicOS milliseconds, then pulls
	the pin the other way, and delays for the remaining interval of the
	period. The default period is one second (1024 ticks). See pwm_driver.c
	for details. The PWM driver is handy for the REFLOW praxis (or we shall
	see).

	A few permission fixes (Cygwin sucks).

PG121102A:

	Two commands added to the BlueTest praxis as per Wlodek's request:

		W line

		The command periodically writes to the BT module the specified
		line (akin to a beacon). The default period is 1024 PicOS msecs
		(or 1 sec). The beacon stops when you enter any command.

		The default period can be changed with:

		I n

		where n is the number of msecs. If the number is less than 256
		(considered the minimum period), 256 is substituted instead.

	A few cleanups in the PiComp doc. Described the caveats discovered by
	Wlodek.

PG121104A:

	Gerry discovered that writing to the BT UART when the BT module is not
	connected interferes with connection attempts. I have added code to the
	UART driver to ignore writes to a BT UART when blue_ready is false.
	This is a bit trickier than it sounds, because sometimes (in particular
	in the BlueTest and BlueScan praxes) we HAVE to be able to write to the
	BT UART (also when disconnected) in order to set up the module.

	The way it works is that there is a constant defined in board_options.h
	to declare the transparent mode of BT over UART, e.g., this (for
	WARSAW_BLUE):

		#define	BLUETOOTH_TRANSPARENT	1

	The 1 means that the BT UART is UART 1, i.e., the second UART. The same
	constant is set to 0 in CC430W_BLUE. When this constant is defined,
	both the UART driver, as well as phys_uart (for modes N and L), will
	ignore all writes to the device until blue_ready (the connected signal
	from the module) becomes true.

	Praxes BlueTest and BlueScan switch that off (so they can issue
	commands to the module) by undefining the constant in their private
	options.sys. Note to Gerry: if you want to test connections in the
	transparent mode, you can remove the #undef command from options.sys 
	(commenting out #undef BLUETOOTH_TRANSPARENT). You can then issue W
	and so on, testing connection attempts, but you won't be able to
	re-initialize the module until you put the #undef statement back.

PG121106A:

	Fixed a problem with the PWM driver/actuator configuration for the
	REFLOW praxis. The oven actuator didn't work, but it should be OK now.

PG121106B:

	Added the -H argument for PiComp (see the doc) as a hook allowing PIP
	to request the inclusion of board_options.sys for VUEE compilation.

PG121107A:

	The transparent BT mode has been made switchable from the praxis. I 
	have removed the constant BLUETOOTH_TRANSPARENT (introduced in
	PG121104A) replacing it with BLUETOOTH_UART (which now merely indicates
	which UART is connected to the BT module). There is no need to play
	tricks with this constant in BlueTest (to operate the UART in
	non-transparent mode). The praxis issues this call:

		ion (UART_BT, CONTROL, (char*)(&mode), UART_CNTRL_TRANSPARENT);

	where mode is an int value. If that value is zero, the UART/BT is put
	into non-transparent mode, so the praxis can control the module. If
	mode is nonzero, the (default) transparent mode is resumed. This extra
	CONTROL request is only available when a BT module is configured into
	the system.

	I have added a command to BlueTest to toggle the transparent mode (see
	the document). Gerry, you don't have to worry about anything. Things
	work as before (by default). There is no need to recompile BlueTest
	for tests with commented out #undef BLUETOOTH_TRANSPARENT. You can
	switch the transparent mode on and off from the praxis.

PG121113A:	3 6	VUEE >= PG121113A, SIDE >= PG121113A, PIP >= PG121113A

	A few rather messy changes in the way VUEE gets its options. First of
	all board options are now included (implicitly) in front of every
	program file compiled for VUEE, but only if the praxis (project) has
	been configured for real-life compilation.

	Local options files are also included following the board options. This
	is the same as for real-life compilation and allows the local options
	to override the board options. Note that previously only the single
	options.sys file was used by VUEE, regardless of whether the praxis was
	single- or multi-program. Now it is the same as for PicOS, i.e.,
	"labeled" options is tried first, and if the file is missing,
	options.sys provides a fallback.

	Note that local options files are now optional also for VUEE (they
	have been optional for PicOS for some time). VUEE doesn't need them
	any more for identifying the optionally compiled modules or the radio.
	The former is guessed based on the content of the parsed programs,
	the latter can be found in the board files to the same extent that
	it can be done for PicOS compilation. Of course, if you don't want to
	configure your project for real-life boards, you have to provide the
	required "hardware" options (like the radio module selection) in local
	options.

	Legacy praxes can still be compiled by hand, but they have to provide
	options.sys (the single file regardless of whether the praxis is
	multi-program or not). Please move! About half of my effort related to
	this modifiaction was related to maintaining legacy compatibility.

	Some heuristics are involved, because for a multi-program praxis, the
	hardware options (applicable globally to the shared "engine") are
	derived from the options files of all the requisite boards. So there
	better be no weird conflicts.

	If the board directory contains a file named node.xml (see WARSAW for
	an example), that file provides a supplementary default for node
	definitions in the standard data file. This is a bit messy, but
	I didn't want to turn everything upside down. This is described (in a
	lame sort of way) in the VUEE doc. I don't know how to describe it
	"nicely". Perhaps it doesn't make sense? The modification took me two
	days and I hate it. Note that there are implications for udaemon,
	because, e.g., the visualization data must be inherited properly.

	I am not sure if we will not backpedal on this little revolution.

PG121114A:

	A new version of the REFLOW praxis for Gerry. Read the doc in
	Apps/PROPRIETARY/REFLOW.

PG121115A:

	Fixed a couple of stupid glitches in Gerry's REFLOW praxis.

PG121203A:

	A (completely) new version of the REFLOW praxis, this time with GUI.
	Read the doc in Apps/PROPRIETARY/REFLOW.

	A few cosmetic changes along the way. Added Tcl packages to Scripts:
	boss.tcl, tooltips.tcl, autoconnect.tcl.

	Fixed picomp not to use 8.5 features to make sure it still runs with
	Tcl 8.4 on older versions of Cygwin.

PG121216A:	VUEE >= PG121216A

	Implemented a new version of the BOSS plugin (see Serial.pdf). Also,
	cleaned up VNETI (TCV) fixing a bit here and there (see VNETI.pdf).
	Headers of some plugin function have changed which forced me to look up
	and modify (mostly mechanically) all our current plugins. I even fixed
	them in some of the archived praxes, but not all.

	Some of the changes were inspired by BOSS, especially the need to
	differentiate the processing of urgent and regular packets before
	buffer space allocation by tcv_wnp/tcv_wnpu. The two wnp functions
	have been replaced by one with the old functions accessible as macros
	for backward compatibility. A few other functions have been turned into
	macros as well.

	I will write a separate notebook document about the BOSS plugin to vent
	some of my confusion.

	A few miscellaneous cleanups here and there.

PG121220A:	VUEE >= PG121220A

	Fixed a bug(oid) (mostly in VUEE) causing that some standard options
	set in local options.sys were not perceptible by the respective modules
	when compiled for VUEE. A couple of minor cleanups.

PG121225A:	VUEE >= PG121225A

	I have integrated modsyms.h (for VUEE) with options.h (for PicOS), so
	we have just one place where symbols affecting the compilation of the
	various modules, including the modules shared by VUEE, should be put.
	The old options.h has been reorganized and renamed modsyms.h. The very
	same file is linked as modsyms.h in VUEE/PICOS.

	It works like this (as viewed from the VUEE end):

	First of all, modsyms.h is included (in its entirety) by sysio.h (of
	VUEE as well as of PicOS). Thus, the file should include all those
	global (praxis-visible) definitions that should be shared by the two.
	If there is something that VUEE shouldn't (doesn't have to) see, it
	can be encapsulated into #ifndef __SMURPH__.

	Note, however, that the values of option symbols are (or at least can
	be) determined by the configurations of options.sys file of the praxis.
	In modsyms.h, those symbols are encapsulated into #ifndef ... #endif,
	e.g.,

		#ifndef TARP_RTR
		#define TARP_RTR    0
		#endif

	providing deafult definitions which can be easily overriden.

	When a praxis file is compiled, picomp just formally prepends all the
	definitions from the respective options.sys files (there can be up to
	two such files per program, i.e., board_options.sys from the BOARD
	definition + one provided by the praxis) to the program, so they can
	override the defaults in modsyms.h. For a module (internal) file, the
	situation is more complicated, because, even if the praxis consists of
	multiple programs, there is just a single compiled version of the
	module file. So the potential multitude of various options.sys files
	(belonging to the different programs and possibly boards) must be
	somehow made sense of and turned into a single set of non-colliding
	definitions for the module configuration symbols mentioned in them.

	For that, picomp reads modsyms.h and extracts from it the part from
	the first occurrence of //-> (at the beginning of a line) up to the
	first occurrence of #ifndef __SMURPH__. Then that piece is parsed.
	The symbols marked with //-> are interpreted as module selectors. They
	are looked up in all the system header files included by the praxis.
	When a symbol like that is defined anywhere, it means that the
	respective module, considered optional, should be compiled in. For
	example, VUEE_LIB_PLUG_NULL selects the NULL plugin module. This
	applies to several modules that need not be always compiled into the
	model.

	Any regular configuration symbol located by picomp in the selected
	part of modsyms.h is looked up in all the options.sys files of all
	the programs of the praxis. I have tried to come up with some logic,
	but failed, so the way it works is that the definition of the symbol
	assumed by the first program (in the compilation order) is going to
	be applied to the (single-compiled) set of modules. In practice, it
	is strongly recommended that all programs come up with the same
	configuration values for the modules.

	Then, picomp puts together all the definitions determined this way
	and prepends them to the modules, so they can override the (default)
	definitions in modsyms.h. What that means is that only those symbols
	defined in options.sys that are mentioned in modsyms.h are in fact
	seen by the modules. Note that praxis programs, in contrast, see
	everything from options.sys.

	---

	Gerry detected a bug in the library mode build causing that the library
	includes were not prescanned by mkmk together with the praxis files as
	they should be. That bug has been fixed. I have tested library
	compilation with eco_demo and it seems to work fine.

	---

	A few irrelevant cosmetics.

PG121229A:

	A rather minor modification to the REFLOW praxis extending the range of
	Span to 0 - 1024 (previously it was 10 - 1024). Gerry, you may want to
	try the Span setting of 0 (with the remaining parameters set to zero as
	well), to check how the oven fares under the simple binary control (on,
	off).

	A cosmetic change in modsyms.h: RADIO_LBT_RETRY_LIMIT is no longer
	used.

PG130105A:

	A few enhancements to the Spectrum Analyzer. Connection should now be
	faster and more reliable, fixed a bug causing that some registers were
	not written properly. I haven't done anything about the problems
	signalled by Wlodek, because I don't know what to do. I believe that
	some characteristics of the sampling process can be improved (or at
	least changed) by modifying some registers (e.g., affecting the
	selectivity), so we can do those experiments without modifying the
	praxis or the OSS script.

	Wlodek says that once you modify the frequency (by adjusting the
	slider), then it is impossible to get back to the previous exact
	setting. This is not true. For fine adjustment, click in the area to
	the right or left of the slider's handle. I did consider once adding a
	straightforward numerical entry field, but gave up having discovered
	how to make fine adjustments at the full granularity.

	Previously the praxis would reset the board on every new request. I
	have made it less drastic, as the reset was probably not necessary.

	A few cosmetics here and there. I have added a function to the BOSS
	package to change the acknowledgment timeouts. The essence of the trick
	to improve OSS connectivity to the SA praxis was to reduce the timeouts
	during the handshake phase.

PG130108A:

	A few more additions/modifications to SA in my attempts to (at least
	partially) appease Wlodek:

	Better "Stop". I don't think it will timeout anymore (at least not so
	notoriously). Also, I try to do a much better clean up when the script
	is exited during a scan (as to leave the node in the stopped/reset
	state).

	The node is now hard reset before every scan (as it used to be, but I
	reverted that [compilation] option in the previous commit). Hopefully,
	this will help the problems with missing packets. I would like to hear
	more.

	There is a button to toggle the description of the signal level scale
	between RSSI and dB. RSSI is the default. dB is RSSI but relative to
	the ground level. In short, dB is baloney (and it cannot be anything
	else). Don't trust the dBm shown by the TI scanner.

	Band scan now shows the running maximum numerically in the left upper
	corner.

	The log can now be cleared.

	When the script is called from a command line, you can give it as
	arguments the explicit devices (or just port numbers) to be scanned.
	Then it will only scan those. To Wlodek: multiple devices doing
	different things (and talking to different scripts via boss) can be
	autoscanned reliably, as they exhibit different signatures (there is a
	provision for that in the [autoconnect] protocol). The problem with
	autoconnection that you fear only concerns multiple devices of the same
	kind.

	A few other less visible things.

PG130114A:

	Updated piter to allow for a reconnection from the same window. The old
	version of GUI was added as a rather quick and ugly hack to the command
	line script, and it wasn't very natural.

PG130211A:	3 7 	VUEE >= PG130211A, SIDE >= PG130211A

	Sampled channel model added (see the VUEE doc). This is probably not
	the final word (we will continue working on the model), but it has
	inspired quite a few changes.

	First, the data format has changed slightly (see the VUEE doc, the
	parts in blue). The "propagation" component has been encapsulated and
	separated from the rest, so it can be easily exchanged.

	Directory Apps/DataLib is intended for storing globally useful XML data
	snippets. There is a new option of SIDE (see the doc) whereby you can
	declare a number of such directories (the deploy script creates just
	one, i.e., Apps/DataLib); note that it may have subdirectories. At
	present, I have stored there a few channel models which also illustrate
	the new channel description format.

	I have gone through ALL data sets and updated them, so they should
	agree with the present expectations of VUEE. For the majority of
	active projects, I have made the channel parts of the data sets point
	to the new (recommended) channel definitions in Apps/DataLib/CHANNELS.
	Needless to say, those definitions are still provisional and will
	likely change, but at least there is now one place where this can
	be (safely and authoritatively) done. The channels presently described
	in the central repository are:

	tabulated.xml

		A table-driven propagation function derived from the recent
		experimental data (courtesy of Wlodek and Gerry). For distances
		up to 50m, I used RSSI values (converted to dBm according to
		the CC1101 doc), for farther distances it was semi-educated
		guessing.

		Note that this kind of propagation function is a special case
		of the sampled function (see below) assumed when the file with
		samples is absent.

	sampled.xml

		A sample-driven propagation function. The present set of
		samples (file samples.txt in DataLib/CHANNELS) has been
		generated by a naive program (see Linux/SAMPLES) and is there
		solely for illustration.

	shadowing.xml

		A new version of the old shadowing model, which I tried to
		reconcile with the recent experiments and observations.

	legacy.xml

		This is the standard old vanilla shadowing channel that we have
		been using so far.

	legacy_short.xml

		This is the standard shadowing channel with the fading exponent
		increased from 3.0 to 3.7. We have been using it in data for
		eco_demo and il_demo, because it was giving us a more realistic
		propagation range.

	legacy_very_short

		The standard old shadowing channel with the exponent increased
		to 5.1 to give a very short propagation range (for testing
		multi hopping and/or proximity-based praxes, I suppose).

	The legacy channels should be avoided and eventually eliminated. For
	all our standard praxes, the recommended blanket channel model is
	tabulated.xml.

PG130214A:	VUEE >= PG130214A

	A small change to the "sampled" and "tabulated" RF channel models to
	illustrate per-distance sigma.

PG130222A:

	A new (experimental) version of the CC1100 driver. I have removed the
	numerous obsessive sanity checks and resets on every slightly
	suspicious event. My understanding is that the problems that led me to
	incorporate those checks were poorly understood at the time of their
	occurrence, and that most (if not all) of those desperate "remedies"
	were unnecessary. We shall see. Note that this is the first version of
	the driver, extremely poorly tested and not (yet) recommended for
	production. But this will be driver to be further developed (with the
	old driver frozen at its present stage). In particular, any WOR
	features will be implemented in the new driver only (the structure of
	the old driver was not conductive to this kind of work).

	I may write a brief document (or an addition to the old documentation
	of the driver) once things become stable. This is the summary for now:

	To select the experimental driver, put this:

		#define CC1100_EXPERIMENTAL_DRIVER

	in options.sys. Note that no value is needed.

	Major user-level differences:

	1. By default, the power level is hardwired at 7 (max) and not
	   changeable, i.e., a SETPOWER request (also GETPOWER) will cause a
	   syserror. To make it changeable, put this:

		#define RADIO_POWER_SETTABLE 1

	   into options.sys. Note that for the previous driver, the default
	   power level was 2 and the xmit power could always be set
	   dynamically.

	2. By default, the channel number is not changeable and hardwired at 0
	   (SETCHANNEL/GETCHANNEL will cause a syserror). To make it
	   changeable, put this:

		#define RADIO_CHANNEL_SETTABLE 1

	   into options.sys.

	3. By default, the transmission rate is not changeable and hardwired at
	   10000, i.e., option 1 (SETRATE/GETRATE will cause a syserror). To
	   make it changeable, put this:

		#define RADIO_BITRATE_SETTABLE 1

	   into options.sys. When you do that, you will get the same four 
	   options as before.

	   Note that you can change the defaults without making the parameters
	   dynamically changeable, e.g.,

		#define RADIO_DEFAULT_BITRATE 	38400
		#define	RADIO_DEFAULT_POWER	4
		#define	RADIO_DEFAULT_CHANNEL	128

	4. Operation RESET takes no argument. In the old version, the optional
	   argument could point to a register table with substitute register
	   values (that was RADIO_OPTIONS bit 0x40). Owing to the unpredictable
	   resets during "normal" operation, you couldn't change a register
	   value without storing that change in some "supplement" table (to be
	   mechanically reapplied at every reset). There is no request yet to
	   change an arbitrary register to an arbitrary value, but I will
	   (probably) add later something amounting to it. At present, the chip
	   is only reset at the beginning (at initialization) and upon an
	   explicit request (RESET) from the praxis.

	5. RADIO_OPTIONS 0x40 and 0x20 (obsessive consistency checks) have been
	   removed. Options 0x10 (the Guard process) has been redefined to
	   eliminate some parameter (sanity) checks normally done on startup.
	   There is no Guard process now (originally that process was
	   introduced to mitigate some problems at RFM).

	Except for the above differences, the logical functionality of the
	driver should appear as before.

	I haven't checked CC430 with the new driver yet.

PG130224A:

	Fixed a bug in LOCATION/params.c. The tag attribute of <dis> was not
	read correctly.

	Added an option to the new (experimental) CC1100 driver to set
	registers. It works similar (but different) to the old driver. If
	RADIO_OPTIONS includes 0x40, a RESET with an argument causes no reset,
	but the argument is interpreted as a pointer to a list of pairs:
	[register, value] as before. The difference is that the list is not
	stored as a "supplement", but applied once and that action is not
	followed by a reset. To reset the chip, you have to issue an
	argument-less RESET request, which will just reset the chip to the
	state after initialization, with any later register updates removed.
	This is probably how it will look in the target version of the driver.

	I have tested CC430 with the new driver. It seems to work fine, except
	that my prototype board is experiencing some strange hangups (which may
	be unrelated to the radio). I will keep testing.

PG130225A:

	A minor adjustment to the new CC1100 driver to fix a problem that
	probably caused the occasional hangups with CC430 (tests in progress).
	Modified PATABLE for the new driver according to my tests. This is
	described in a separate note. Briefly: the highest power entry replaced
	with 0xE0, entry 0xC6 removed (not sure how it ever got there), then
	the remaining entries shifted up and entry 0x00 added at the bottom.
	That one gives the lowest (ever receivable) transmit power.

	Added a few DEBUG messages to locengine to verify the calculations.

PG130301A:

	Fixed a problem in LOCATION/locengine.c causing that the exponential
	weights for final coordinate averaging were not scale invariant.

PG120305A:

	WOR option added to the new (aka experimental) CC1100 driver. For now,
	it is a preliminary solution with fixed-length rounds: 113.4 seconds
	with 0.391% duty cycle. I will write a detailed description after I
	am done with preliminary tests.

	A few minor cleanups here and there.

PG120307A:

	The new CC1100 driver has been made the "official" driver. The old
	driver can still be selected by:

		#define	CC1100_OLD_DRIVER

	put, e.g., in options.sys. To avoid confusion, I have temporarily
	included these definitions at the top of (new) cc1100.h:

		#ifndef	RADIO_POWER_SETTABLE
		#define	RADIO_POWER_SETTABLE	1
		#endif

		#ifndef	RADIO_BITRATE_SETTABLE
		#define	RADIO_BITRATE_SETTABLE	1
		#endif

		#ifndef	RADIO_CHANNEL_SETTABLE
		#define	RADIO_CHANNEL_SETTABLE	1
		#endif

		#ifndef	RADIO_CAV_SETTABLE
		#define	RADIO_CAV_SETTABLE	1
		#endif

	They make sure that (by a temporary default) the new driver offers
	roughly the same assortment of physopt calls as the old one.

	WOR slightly upgraded and tested. Read cc1100.pdf in Doc. Amazingly, it
	seems to work, at least across my table (I had 100% packet reception
	rate, one way, for 1000 packets), although the exact current
	consumption still has to be determined, together with the optimum
	setting of the WOR parameters for our networks (which clearly affects
	the current consumption).

	I have decided to change the way the driver decides to issue a long
	(waking) preamble in front of a transmitted packet. Originally that was
	done for all packets sent while the receiver was logically in WOR (off)
	state. That would make little sense, as the situation is usually
	asymmetric, i.e., the (waking) transmitter doesn't want its receiver to
	operate in WOR mode. So now, the praxis has to make a packet urgent to
	tell the driver that it is a waking packet, i.e., to be preceded by a
	long preamble. There is no other use for urgent packets in the driver,
	so that is OK, I guess.

PG130308A:

	Changed the default values of some WOR parameters:

	WOR_RX_TIME 6 (was 5) reduces the duty cycle without visibly impairing
	the reception rate (in my lame experiments).

	WOR_EVT1_TIME 0 (was 5) doesn't seem to be making any difference for
	the quality of communication, but it may further reduce the duty cycle
	a bit.

	WOR_PQ_THR 5 (was 6) reduces the preamble quality threshold (with a
	chance of avoiding missing some packets) with no false wakeups.

	Cleaned up the documents a bit: cc1100 and the RFTEST doc. We are ready
	for more serious tests.

PG130310A:

	A cosmetic fix to the WOR mode of the CC1100 driver. When you set the
	RSSI threshold to 0 (WOR_RSSI_THR), the RSSI threshold bit in MCSM2 is
	cleared for neatness.

PG130313A:

	Fixed a bug in the new CC1100 driver causing that SETPOWER 0 was
	treated as SETPOWER 7 (which, for example, caused the patable check
	in RFTEST not to work).

	RFTEST can now compile and run under VUEE. Some commands do not work,
	however. Notably, WOR has no VUEE model yet. We shall do something
	about it as soon as the implementation settles down a bit.

PG130322A:

	Wlodek's modifications to RFTEST made official (it should be Wlodek's
	commit, really). I have only changed slightly the format of the output
	line (for the PATABLE test) to make the output better readable by
	spreadsheet programs (CSV).

	Fixed a minor bug in piter causing errors when you tried to input
	something into a disconnected window.

	Added tldebug.c/tldebug.h to Libs/Lib. This is a simple (and
	undocumented) tool to debug interrupt service routines, like delayed
	diag of sorts. I need it in my struggle with CC430 regarding WOR.

	A few mode changes after running "permissions".

	I think I have tagged this as PG120322A by mistake.

PG130401A:

	Modifications (extensions) to accommodate WOR on CC430 (unsuccessful
	so far). See my Unfuddle notes. The best I can get is working WOR with
	power down level 1, i.e., LPM1_bits, yielding about 300uA current.
	For some reason, WOR refuses to work when the CPU goes into any deeper
	low power mode during the cycle regardless of the clock settings. I
	think I have tried everything, including increasing the crystal drive
	strength, sourcing clocks from different oscillators (ignoring the
	crystal altogether), reducing the CPU clock rate, etc. Nothing has
	worked except for raising the CPU power level during the cycle to level
	1. I have even tried implementing software WOR, but the timed RX
	operation doesn't seem to work outside the WOR cycle. Of course, a
	pure software implementation is possible, and I may return to it later,
	but for now I need a break.

	A few cleanups related to CC1100 (the new driver) and CC430. Note: if
	you want to try WOR on CC430, make sure to set:

		#define	LOW_POWER_SLEEP_MODE 	LPM1_bits

	in options.sys. That will make sure that the low power mode of the CPU
	is raised properly, so WOR won't reset the CPU.

	BTW: it is now possible to run crystal-less CC430 boards by setting:

		#define	LF_CRYSTAL_ABSENT	1

	in options.sys. In such a case, the low-power internal oscillator
	(running approximately at 32768 Hz) will be used.

	Defined a new board, OLIMEX_CCRF, to accommodate our recent purchase.

	Retired the 0x01 option in RADIO_OPTIONS, which was confusing. Whatever
	used to be covered by it falls now under 0x02.

	Added a few debugging commands to RFTEST, undocumented for now, but not
	extremely useful, except in emergencies.

PG130402A:

	WOR seems to work on the Olimex board with MSP430F5137. The trick was
	to increase the spin delay after turning on RX. Note that this is 5137;
	the problems with 6137 are of a completely different nature.

	1. Increased the delay after switching on RX in WOR cycle (CC430 only)
	   to ~900us.

	2. Fixed portnames.h to account for the fact that there is no P4 on
	   5137. It should be more flexible now, as we do not assume any ports
	   that are present on all CPUs.

	3. Updated the RFTEST document.

PG130429A:

	Updated the CC1100 document.

	But this is more important:

	After the longish break I have tried to get back to the issue of WOR on
	MSP430F6137. So I have set up the same testbed as before and ... this
	time everything seems to work just fine. The board has been running for
	one full day now and there's no trace of the previous problem.

	It may be too early to get excited, but, mind you, the second XCC430
	board used to fail immediately on the first transition to WOR. Now both
	boards seem to work just fine. In fact, it is the second one that has
	been running happily through the night.

	Note that owing to the largish parameter space, I cannot swear that I
	ever ran the test before with the present values of all the parameters.
	For example, the slight adjustment of the spin delay after the RX
	switch in the WOR cycle, combined with setting WOR_EVT1_TIME to 7 may
	have done the trick. Or something.

	Anyway, even if this is just some fluke, let me do the commit first,
	without trying to answer any questions, so we have the thing saved
	for reference.

PG130430A:

	Added a new board definition, WARSAW_PMTHA, which is slightly massaged
	ARTURO_PMTH including CMA3000 as an additional sensor. This is a demo
	board for Gerry. We still need some praxis to demonstrate the board,
	I guess. For now, Gerry can use Apps/TESTS/CMA3000 to test the CMA3000
	on the board.

	Note that I don't have a specimen of the board, so my modifications
	are blind. Don't be surprised if it doesn't work out of the box.

PG130507A:

	Added a new board definition, OLIMEX_CCRFLCD, and a driver for the LCD
	on the board (files lcd_ccrf.[hc]).

PG130509A:

	Some cosmetics (well, a bit more than that) related to econnect and
	vsen_demo:

	- econnect (the generic version in Scripts): Slightly modernized. The
	  previous code for selecting the UART and connecting to it reorganized
	  using the unames package (which we have been using in piter and
	  udaemon for some time).

	  Wlodek, if you are still using XP, could you please check if the
	  present option of prescanning COM ports works efficiently? I mean
	  the econnect now only lists those ports that can be (in principle
	  opened). I recall it used to take a long time on XP. If it still
	  does, it can be disabled by resetting PM(AUA) to 0 (line 573 of
	  econnect.tcl).

	- The snippets package (affecting piter_plug.tcl in vsen_demo): Fixed
	  a bug causing that repeated intialization (snip_parse) would trigger
	  errors on duplicate snippet names. Re-intialization is now allowed,
	  as it should be.

	- A truly cosmetic fix in piter.

	- Fixed options.sys in vsen_demo to undefine some of the symbols before
	  re-setting them in the file, so VUEE compiles without errors.

PG130520A:

	A new compilation option added to the CC1100 driver. Here is the
	relevant excerpt from the CC1100 document:

	RADIO_RECALIBRATE (default setting 0) tells whether the the module's
	frequency synthesizer should be periodically recalibrated if nothing
	happens in the meantime that would trigger automatic recalibration.
	Normally, when RADIO_CALIBRATE is zero, the synthesizer is recalibrated
	automatically in these circumstances:

	1. before switching on RX (including after every packet reception)

	2. before switching on TX, but only if the receiver (RX) has been
	   inactive (OFF); this includes the case of transmitting in the OFF
	   mode, or powering the chip ON (switching the receiver ON) after OFF

	Theoretically, if no packet is received for a long time while the chip
	remains in the RX state, the synthesizer may lose its calibration. The
	praxis can always trigger recalibration explicitly by powering the
	module down (going OFF) and then back ON, but the driver can also do it
	periodically (and more efficiently) if RADIO_RECALIBRATE is nonzero.

	If nonzero, RADIO_RECALIBRATE tells the number of seconds after which
	the synthesizer will be forcibly recalibrated if the module remains in
	RX and there has been no reception. The maximum duration of the
	recalibration interval is 63 seconds.

	If RADIO_RECALIBRATE is nonzero, then automatic recalibration is also
	forced after every packet transmission (including the situation when
	the receiver is ON). This is accomplished by switching the module to
	IDLE and then back to RX after every transmission. Note that the driver
	doesn't use the explicit calibration strobe (SCAL) which is messy and
	probably not much more efficient than going through the IDLE state.

	gennodes.tcl included in Scripts.

PG130605A:

	A minor fix to the location engine: the usage of fac in calculating
	inter-sample distance didnt' make a lot of sense.

	A couple of tweaks to the CC1100 driver (irrelevant from the viewpoint
	of a production praxis) to facilitate tests:

	- important events can be optionally seen on indicated pins

	- RADIO_OPTIONS bit 0 (0x01) causes the driver to insert into word 1
	  of every outgoing packet the amount of backoff (in PicOS
	  milliseconds) suffered by the packet

	The RFTEST praxis tweaked accordingly.

PG130606A:	VUEE >= PG130606A

	dbg_level added to modsyms to make the definitions of dbg_x(...)
	consistent across program and library files (in VUEE models).

	Location doc file renamed (correcting my stupid mistake).

PG130606B:

	Two scripts: mksvm (make standalone vuee model) and runmodel.tcl added
	to Scripts. With mksvm (executed from within a project directory) you
	can create a standalone Windows-executable model pack. The single
	optional argument is interpreted as the path to the target directory
	(which need not exist). By default it is VUEEPACK in the current (i.e.,
	project's) directory. The script assumes that:

	- your Cygwin version is reasonably recent
	- PICOS and friends have been deployed
	- executable fullwrap is available (as the Tcl wrapper)

	I have checked that packs generated under Windows 7 can be executed
	on Vista (and on Windows 7, of course).

	A minor fix to picomp to allow macros with arguments in MODSYMS.

PG130721A:

	Added a sensor-mode implementation of buttons. This needs documenting.
	I have looked into the PinOps doc, where these issues probably belong,
	and noticed that the document is somewhat dated (to put it mildly). In
	my spare time, I will try to document things like pin access, buttons,
	sensors, and so on, bringing PinOps up to date.

	For now, the sensor-mode implementation of buttons is illustrated in
	CHRONOS. if you reset BUTTONS_DRIVER to 0, e.g., putting:

		#undef  BUTTONS_DRIVER
		#define	BUTTONS_DRIVER 0

	into options.sys, you will get the sensor implementation. These praxes:
	TESTS/CHRONOS/RFTEST and TESTS/CHRONOS/CMATEST are prepared for that
	and they will automatically accommodate the new mode.

	In a nutshell:

		byte bb [2];
		...
			...
			wait_sensor (SENSOR_BUTTONS, BP);
			...
		state BP:

			read_sensor (BP, SENSOR_BUTTONS, (adddress)bb);
			if (bb[1] & BUTTON_M1) ...
			if (bb[1] & BUTTON_M2) ...

	The constants BUTTON_... are defined in board_pins.h. Note that they
	are bits selecting pins on P2. The reason why you refer to bb[1] is
	that bb[0] is for P1 and bb[1] is for P2 (and the buttons are on P2).
	Perhaps I will make it nicer some day (didn't want to inflate the code
	for no good reason).

	Note that the buttons are not debounced in the sensor mode, which 
	(unfortunately) shows. You may want to add delays after servicing a
	button (read_sensor) and before looping to wait_sensor, which may act
	like some debouncing. Please let me know.

	A minor fix in the CMA3000 driver.

PG130724A:	VUEE >= PG130724A

	You can now switch off CRC calculation/checking for UART_TCV_MODE_N by
	setting UART_TCV_MODE_NOCHECKSUM to 1. This is intended to facilitate
	the planned simple binary OSS interface where the praxis may want to
	calculate a much simpler, lightweight checksum (parity) on its own.

PG130808A:

	Cleaned up various bits and pieces of pin operations (see the PinOps
	doc). Added analog actuators (don't ask me why, probably for some 
	misplaced sense of duty, completeness, and neatness, if these
	adjectives are applicable to the mess).

	Anyway, the pin sensor (see PG130721A) now works differently (I mean
	PG130721A no longer holds - see PinOps, which I have rewritten
	completely). For CHRONOS, if you undefine BUTTONS in options.sys, as
	in:

		#undef BUTTONS

	you will get the sensor implementation. The TESTS/CHRONOS/RFTEST praxis
	shows you how.

PG130818A:

	The first working version of drivers for BMA250 and BMP085 (the new
	acceleration and pressure sensors in CHRONOS_WHITE). I want to commit
	them (because they work), although I am not happy with these versions
	(especially BMA250) and they will probably change. Documentation in
	preparation.

PG130820:

	The first official version of the drivers for BMA250 and BMP085. Read
	bma250.pdf for BMA250 and forget about BMP085 for a while.

PG130822A:

	Fixed a bug in picomp causing that structs/unions containing
	expressions in declarations were considered erroneous.

PG130829A:

	Fixed a problem with CC430 (CHRONOS) causing chip hangups while
	transmitting with RXOFF.

	Caveat emptor: I don't understand what I am doing. I've tracked the
	problem down to one place in the driver where I'm invoking SFRX after
	power up (entering IDLE, then setting PATABLE, then entering RX before
	a transmission). The SFRX strobe hangs unless I insert a delay before
	it. 125us worked fine in my tests, while 60 us was too small. So I have
	settled for 200 us, and my tests (as well as Wlodek's) seem to be doing
	fine.

	Changed the settings for CHRONOS (and CHRONOS_WHITE) to auto reset on
	syserror.

	RFTEST can now be compiled for and uploaded into CHRONOS.

PG130906A:

	ALPHATRONICS board added. Apps/TESTS/WARSAW extended by the optional
	test of BMA250, so the same test can be used for ALPHATRONICS (the
	name WARSAW only sticks by tradition).

	Cosmetic corrections to some CC430 boards reflecting the recent changes
	and options in the implementation of buttons.

	A cosmetic change to the treatment of DIAG_MESSAGES == 0 replacing the
	void specification of function diag with a NULL macro.

	A (slightly more than) cosmetic adjustment to the BMA250 driver.

PG130917A:

	Fixed a problem signaled by Wlodek causing a confusing behavior of the
	UART with CRYSTAL2_RATE set to nonzero when the device was put into
	powerdown mode.

	Note that the confusion is mostly in the eyes of the beholder. Here is
	a description of the problem (note that it only applies to the CPUs
	accepting a second high-speed crystal, which means MSP430F1xx in our
	case):

	If CRYSTAL2_RATE was nonzero, then SMCLK and, consequently, the UART
	were driven by the second (high-speed) crystal oscillator. That was
	intended (basically) to enable UART rates in excess of 9600 bps. On the
	other hand, powerdown must turn the second oscillator off (to attain
	the kind of power savings that are worth attaining). Thus, with
	CRYSTAL2_RATE set, the UART would not work in powerdown mode.

	Wlodek's problem was that CRYSTAL2_RATE was not unset in local
	options.sys (from the default for the WARSAW board), which he only
	noticed after some painful search. The outcome was the loss of UART
	I/O whenever the program went into powerdown mode.

	Now, the role of CRYSTAL2_RATE was exactly that: to drive SMCLK (and
	implicitly the UART) from the fast oscillator, if it happened to be
	available (so the rates were not bounded by 9600 bps). The idea was
	that if you didn't care, you could just set CRYSTAL2_RATE to zero
	disabling the second oscillator, which would limit the UART rate to
	9600, but allow it to work in powerdown. Inspired by Wlodek's e-mail, I
	noticed that the condition for feeding the UART's clock from the fast
	crystal could be weakened to prevent this kind of mishap in the future,
	so this is how it works now:

	If CRYSTAL2_RATE is set (to nonzero), then SMCLK is driven from the
	fast (second-crystal) oscillator. This is to make sure that those
	peripherals that need CRYSTAL2_RATE (and use SMCLK) can be driven by
	the fast oscillator (this is the whole purpose of CRYSTAL2_RATE). The
	UART is only driven by SMCLK if its rate is explicitly set (UART_RATE)
	in excess of 9600 bps, OR the rate is declared as "settable" (constant
	UART_RATE_SETTABLE is nonzero). Otherwise, the UART is driven by ACLK,
	which means that it won't be disabled when the second oscillator is
	switched off (as in powerdown).

	Note that the primary (by a large margin) use of CRYSTAL2_RATE is to
	enable high UART rates, so if the condition from the previous paragraph
	does not hold, then you can (mostly) as well set CRYSTAL2_RATE to zero,
	which will take care of everything and also eliminate some (rather
	trivial) amount of code. However, formally, the two things are
	separate: you can have some modules other than the UART that need the
	second oscillator (SPI, ADC sampler). Then, you should be aware that
	those modules will not work when you powerdown the CPU. So I am not
	sure if the fix simplifies things or makes them more complicated.

	Added a "silent" mode to TESTS/WARSAW whereby the activities of
	transmitter/receiver do not cause any output to the UART. This may be
	useful for Gerry's solar power tests.

	A minor fix to the Serial document.

	Schematics included in BOARDS/WARSAW_NEW and WARSAW_NEW_REVISED. I
	never knew which one was which.

	Added noss.tcl to Scripts. This is a Tcl plugin for implementing N-mode
	based binary OSS interfaces. A step towards the new grand, unified, and
	simplified OSS interface.

PG130919A:

	Added a new board, OLIMEX_CCRF_EETEST, which is the LCD-less CC430
	OLIMEX board with the new EEPROM (AT45DB041E) attached. I have used
	the board to test the new EEPROM chip.

	A few rather cosmetic changes inspired by the test. For one thing,
	the new EEPROM has the so-called "ultra-deep power-down" mode with
	the current drain of order nanoamps. I have made sure that when the
	EEPROM is closed, that mode is in fact assumed.

	NOTE: on those boards on which the EEPROM admits (any) power-down
	mode, which includes our standard WARSAW boards, the lowest current
	usage in powerdown (I mean system powerdown) is attained when the
	EEPROM has been explicitly closed, i.e., first opened and then closed.
	The difference is not much, order 2uA, which doesn't really matter for
	the WARSAW board.

	The test indicates that the EEPROM works fine when the power supply
	voltage gets down to about 2.3V. It probably also works at a lower
	voltage, but the notorious leaks through the UART dongle make it
	impossible for the voltage to controlably drop below that (i.e., when
	I try, the CPU begins to misbehave).  Anyway, my conclusion is that the
	chip is OK. Note that the chip is compatible with the old driver, but
	the driver can be probably simplified for the chip (we shall see to it
	when we get to using the chip in production).

PG131015A:

	Added a new praxis, Apps/TESTS/OSSTEST, to test my obscure OSS
	interface scripts (still being developed).

	A few irrelevant cosmetics:

	- fixed a glitch in raw_cc1101.c as to make it compile wit SA
	- fixed a minor problem with piter's window (it now resizes better)
	- fixed a minor problem with deploy (replacing exec ls with glob)
	- ...

PG131021A:

	The first commit of my OSS hacks. Perhaps it is too early to get
	excited about it (the document is still incomplete, so I didn't
	bother to create a PDF version), and not everything has been tested,
	but I want to commit it anyway, as my backup habits have become less
	than exemplary these days.

	So there is this script named oss.tcl (oss when it gets into bin) which
	is now being deployed with PICOS. There is also a praxis (EXAMPLES/OSS)
	which illustrates how to program the node and how to write "plugins"
	for the script. The principles of operation are explained in
	Docs/SOURCE/oss.odt), but (as I said) it may be too early to devour on
	it. Just give me a day or two.

	Fixed gennodes.tcl as (implicitly) requested by Wlodek.

PG131024A:

	A presentable (and documented - sort of) version of my OSS hacks. Note
	that presentable doesn't mean free of bugs.

PG131026A:

	Fixed a couple of bugs in oss.tcl related to UART packet timeouts.
	Updated Tcl packages: NOSS, BOSS, AUTOCONNECT, VUART and the scripts
	using them, notably piter.

	Notably, I have changed the size attribute of blob to word, mostly to
	get around the different alignment rules in VUEE and mspgcc.

	Praxis TESTS/DHT11TEST (probably temporary) to play with voltage
	step-up converters and logic voltage convertes to see how easily we
	can accommodate 5V sensors.

PG131031A:

	The gennodes script modified as requested by Wlodek (see the comment
	in the scripts header).

	A few irrelevant cosmetics, e.g., neutrino propagation model added to
	Apps/DataLib/CHANNELS/.

PG131106A:

	Praxis TESTS/BVSHIFT for Gerry to test the battery bumper. Read
	README.txt in the praxis directory.

PG131107A:

	The oss script integrated with pip (in a way that should be more or
	less obvious).

	Some program call arguments added to oss (see the document).

PG131110A:

	Fixed deploy to use Active Tcl for oss when the native version is below
	8.5 (Gerry has an old version of Cygwin).

PG131115A:	3 8

        I have made PicOS run with the new official mspgcc package (downloaded
	from http://sourceforge.net/projects/mspgcc/files/Windows/).

	Note: the current "experimental" version (mspgcc-20120911-experimental)
	doesn't seem to work, so I have used mspgcc-20120406, which seems to be
	fine. But beware that I have only tested it on RFPing_u and managed to
	compile eco_demo (without loading it into nodes).

	For a known problem, pin operations do not compile yet with CC430 CPUs.

	Also note that PicOS can now compile with both versions of mspgcc,
	i.e., our version, as well as the official one. That was more
	difficult to accomplish that it might seem at first sight. There have
	been a few rathes essential changes in header files. Also, the
	official version is for Windows (sans Cygwin), so it can only deal
	with DOS-style paths (with forward slashes).

	You can easily keep both versions and rename the directories. I might
	add something to PIP to do it for you, but it would be rather kludgy.

	The new compiler generates shorter (!) code (it used to generate
	longer code, so we were not eager to adopt it). Here's some numbers:

		Program		Size (old)		Size(new)
		RFPing_u	      545E		     4C54
		eco (peg)	      9DB8		     9122
		eco (tag)	      8308		     7170
		eco (cus)	      9478		     886E

	so the savings are not insignificant.

PG131115B:

	Pin operations now do compile with CC430 CPUs.

PG131203A:

	Added two Alphatronics boards + a set of test programs. Fixed a small
	problem in the CC1100 driver causing hangups with Alphatronics boards.
	Hard to tell if that was a driver problem, a generic hardware problem,
	or a hardware problem with the Alphatronics boards. I had to increase
	some delay and reshuffle the code a bit. There is a sizeable chunk of
	black magic in all those rituals; the driver just needed a new spell.

	Some irrelevant cosmetics here and there.

PG131212A:

	Two more ALPHATRONICS boards: the base (aka AP321) + PANIC (AP320)
	emulated using OLIMEX_CCRF.

	A few modification to ALPHATRONICS tests.

	Fixed the scripts connecting to VUEE over a virtual UART (the vuart
	package) to work with Tcl8.6 from ActiveState. Previously they would
	hang on -async sockets.

	Rewritten the Installation doc in preparation for a REPO cleanup.

	Removed UTILS.zip from Scripts. The stuff in there was mostly obsolete.
	The updated contents of UTILS.zip (whatever is still relevant) will be
	available from the REPO.

PG131215A:

	Circumvented a problem with USB/UART/Tcl interface on Linux running as
	guest in VirtualBox causing piter window hangups when waiting for
	readable event on the UART.

	Note1: the present mode of interacting with the UART assumed by piter
	when on VirtalBox consists in invoking a callback every 400 msec with
	the interval being shortented when there is a frequent supply of I/O
	events. This appears to cause stress for the virtual machine increasing
	the CPU usage on the host. Within the virtual machine itself, the
	process appears to be doing fine. Increasing the interval doesn't seem
	to reduce the stress, which suggests that some kind of fundamental
	problems is in fact there.

	Note2: the fact the piter is running in VirtualBox is recognized by
	checking if /dev/vboxuser or /dev/vboxguest is present.

	Note3: the U-U mode in udaemon, when one of the UARTs is a real device,
	may still suffer from this problem.

PG131216A:

	Introduced a generic way of passing parameters from deploy to scripts,
	meaning all scripts that might be interested in such parameters. The
	primary inspiration was the need to tell piter that it should be using
	polling instead of the readable event for asynchronous UART input. As
	Wlodek informed me, checking for /dev/vbox* is not a sure way to tell
	that we are running in VirtualBox. Besides, some other scripts may not
	want to miss the fun.

	So this is how it works. All parameters passed to deploy (whatever they
	are) are stored in the picospath script and can be produced by running:

		picospath -d

	Any argument will do for now, but we kind of reserve -d for this
	purpose, in case we ever want to add more features to picospath. Recall
	that picospath without arguments returns the path to PICOS.

	Any script that wants to learn something from deploy can execute
	picospath -d to see the arguments. For now,

		deploy -p n

	is interpreted as the request to use polling for UART input, that is
	if n is > 0. In such a case, n is interpreted as the maximum polling
	interval in milliseconds. The way it works is that any input shrinks
	the interval to zero and then, on every failure, the interval gets
	incremented by 1 towards the maximum.

		deploy -p

	means polling with the default max interval, which is 40 msecs.

	Without this parameter, the script will do some heuristics (including
	checking for /dev/vbox*) to guess whether polling is needed. The
	default interval for heuristically guessed VirtualBox is 400 msecs.

		deploy -p 0

	kills the heuristics and forces non-polling, event-driven, input.

	The most recent scripts talking to the UART, like boss, noss, oss, and
	also econnect (the one in Scripts/EcoNet) do implement the checks,
	although I haven't really tested them. We shall do the testing as need
	arises.

	I have reorganized the Scripts directory moving all "packages" to a
	separate subdirectory. There is a script named inspackages called:

		inspackages file file ...

	which makes sure that the versions of all our standard packages
	embedded into the specified scripts agree with the most recent versions
	in Scripts/Packages. Doing that by hand has become painfull and error
	prone.

	Theoretically, we could set up a formal library of those packages for
	Tcl, and so on, but I am afraid that with all the multitude of features
	and platforms that would create considerably more confusion.

	Note that the previous -l argument to deploy is still fine. For
	example, when you go:

		deploy -l -p 0

	(under Cygwin), then picospath -d will return -l -p 0, i.e., all the
	arguments that were passed to deploy. -l has been interpreted by
	deploy (to select the ActiveState Tcl for the GUI scripts) with the
	complete argument string saved and made available via picospath.

PG140109A:

	Added a new mode to the UART PHY. The E (for escaped) mode conforms to
	the Alphatronics spec (or so I think). This new mode has been 
	amalgamated into piter (see the Serial doc).

	A few new tests added to Apps/PROPRIETARY/ALPHATRONICS.

PG140121A:

	Modified and updated versions of ALPHATRONICS tests
	(Apps/PROPRIETARY/ALPHATRONICS/ONEHOP) as they were sent to Bert.

	Fixed PicOS/modsyms.h to make sure that RADIO_USE_LEDS from
	options.sys/board_options.sys is properly conveyed to VUEE.

PG140130A:

	Updated version of ALPHATRONICS tests as per Bert's last clarification.

	Defined a new board: OLIMEX_CCRF_BMA250 reflecting Gerry's recent
	addition of BMA250 to OLIMEX_CCRF.

	Fixed a minor glitch in supplement_sys.h causing spurious references
	to the non-existent port P4 for CC430F5137 (under new mspgcc).

PG140131A:

	Fixed a problem with the OLIMEX_CCRF_BMA250 board: the interrupt
	service for sensor events was missing. As it turns out, the PS pin
	cannot be driven from a pin if the power supply for the chip
	isn't, because the pin is too late with its state. I have added an
	option to the board to power the sensor from a pin. The option is off
	now (and Gerry should solder PS to ground), but it may be useful for
	future experiments.

	Modified mkmk to "touch" some files in my (largely futile) attempts
	to appease the broken Cygwin on my new laptop. I have no clue what is
	going on, but I will experiment some more. These modifications are
	harmless.

	Modified the permissions script to make it a bit more intelligent and
	general. I've used it to clean up permissions in all my files that I
	moved from Ubuntu to Windows 8 on my new laptop.

PG140216A:

	Modified ezlcd_item in ez430_lcd to simplify the interpretation of the
	second argument. I have compressed the valid character codes (I mean
	those that can be sensibly displayed) into a continuous range. There is
	no need to preserve any ASCII interpretation. This means that the
	caller now has to do a more elaborate job preparing the argument, but
	the simple cases (like digits, for example) are simpler. The codes are:

		0  -  9		decimal digits 0 - 9
		10 - 35		characters A-Z

	Note that W doesn't show and is replaced by -.

	I have searched for and modified all invocations of ez430_lcd in praxes,
	including Wlodek's praxes.

	ALPHATRONICS boards modified to change the RF frequency to 868 MHz.

	The desperate tweak in mkmk to appease broken Cygwin on my new laptop
	revoked - it is not needed after all (specifically, after Cygwin has
	been reinstalled).

	The preliminary version of my planned elaborate test of CHRONOS_WHITE
	intended for the new "shock detection" application. For now, the test
	(see Apps/TESTS/CHRONOS/SHOCK) encompasses a simple settable watch.

PG140305A:

	A comprehensive test praxis for CHRONOS (white), see
	Apps/TEST/CHRONOS/SHOCK.

	Drivers for BMA250 and BMP085 revised (see the respective documents).

	In WOR mode for CC110x, you can now use PHYSOPT_SETPARAMS to change
	the waking preamble length and the RX on time (without having to
	provide all the other intricate parameters as well).

	Pipe error status was not properly detected by mkmk. I have split the
	pipe using an intermediate file to correct the problem.

	Preprocessor errors in picomp (for VUEE) made fatal; also added
	#error interception.

	Added -time to oss_parse in oss.tcl

	A few cosmetics here and there.

PG140306A:

	A few fixes to the CHRONOS/SHOCK praxis.

	Added .mop to inProgress/spot (which Wlodek forgot to put there).

PG140310A:

	Fixed picomp to give a slightly less confusing diagnostics when an
	FSM state symbol causes conflicts. The problem is with SIDE's smpp
	which requires a rather serious overhaul to account for VUEE's
	anomalies. It can be done, but can wait.

	Added node.xml to CHRONOS and CHRONOS_WHITE. Tested with Wlodek's
	spot and it seemed to work fine. Wlodek, I didn't touch your data
	sets.

	A minor adjustment to the SHOCK test praxis for CHRONOS_WHITE.

PG140311A:

	Fixed a bug in the previous commit. I accidentally committed the wrong
	version of picomp.

PG140314A:	VUEE >= PG140314A

	The test praxis for Alphatronics cleaned up and turned into a nice
	VUEE model. For that I had to improve mksvm, runmodel.tcl, clean up
	board definitions, add node.xml data to boards, and more.

PG140401A:

	The first version of piter plugin for testing the Alphatronics praxis +
	a few cleanups. Note that the RF bit rate for Alphatronics boards has
	been changed to 38400. I have fixed that in nodes.xml (for the Alpha
	boards), but it seems that we have been using wrong rate settings in
	some models (defaulting to 0 = 4800 bps).

	The plugin is in Apps/PROPRIETARY/ALPHATRONICS/ONEHOP/piter_plug.tcl
	A brief document is in Doc in the same directory.

PG140406A:

	Fixed a bug in piter causing errors in plugins when an unprocessed
	binary line was left for default formatting.

	A new test praxis (RFUART) to serve as a pattern for testing single-
	UART boards over RF (when the UART is occupied). Needed to test Gerry's
	new board design.

	Header files for the BMA250 and BMP085 drivers tweaked to provide a
	rudimentary interface for VUEE models: sensor value view + specific
	operations (the latter translating into EMUL calls). These same header
	files are now included in VUEE/PICOS/sysio.h, so the model can
	reference the sensor operations in the same way as the real-life
	program.

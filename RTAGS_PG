PG100628A:

	First for some git-related cleanups:

	1. I propose to use separate RTAG files for the different developers
	   (all two of them ;-). This is RTAGS_PG. I am leaving the original
	   RTAGS file as it was (for the record). I have also created a new
	   file named Version holding the system version to be used by mkmk.

	2. I have modified mkmk (see above), so grab the new version and copy
	   it to your bin. The script fetches the system version from Version
	   and then scans all RTAGS_... selecting the most recent release tag.
	   Tags are expected to contain six digits (according to our tacit
	   standard, e.g., 100628), but may also contain arbitrary other
	   characters, e.g., WO100629A:

	3. We should be using commit messages for meaningful comments. Also, we
	   shouldn't shy away from many small commits (not all of them being
	   necessarily tagged our way), equating pushes (which should be
	   tagged - the last commit before a push) with previous CVS commits.
	   Note that present commits are lighter weight than old CVS commits.

	=======================================================================

	The four values returned by PHYSOPT_ERROR for CC1100 redefined. Here is
	the description from phys_cc1100.cc

	0 - receptions (all events when receiver is awakened to check for a
	    pkt)

	1 - successfully received packets; note that with hardware CRC +
	    AUTOFLUSH, 0 and 1 will be equal

	2 - LBT/congestion indicator: EMA d(n) = 0.75 * d(n-1) + 0.25 * b,
	    where b is the backoff experienced when trying to access the
	    channel for TX; this is counted over all attempts to access the
	    channel and maxed at 0x0fff, i.e., 4095

	3 - the maximum accumulated backoff time suffered by a single packet so
	    far

	Also read doc.odt from Apps/VUEE/RFTEST.

	The RFTEST Praxis, which I wrote for Gerry a few weeks ago, has been
	brought to a PiComp-compatible form.

	Simplified utimer_set in kernel.c (insignificantly). I have been 
	searching there for weird reasons why a transmit queue might get
	stuck on LBT. One of them would be a stuck utimer, but it doesn't
	seem plausible at all.

	I have done some tests with RFTEST. It seems that setting XMIT queue
	size limit in TCV, say #define TCV_LIMIT_XMT 8 (in options.sys) may be
	a good idea. I did see a few memory problems under the outgoing packet
	rate of 4 pkts/sec (nodes becoming unresponsive to UART because of
	choked up malloc) which diappeared after I introduced the limit. It
	appears that the reception queue size is not a problem.

PG100629A:

	Fixed file permissions. Cygwin creates a lot of mess with file
	permissions (which get screwed up when copying, archiving, untarring,
	etc.). Unfortunately (or rather fortunately, but not in this case),
	when you change the permissions of a file, git recognizes the file as
	modified, which occasionally becomes annoyoing.

	The upshot:

	There is script in Scripts, named permissions, which has been there
	for a while (and I have been using it every now and then). I recommend
	to run it:

		cd PICOS
		Scripts/permissions

	whenever you suspect that file permissions may have been messed up
	(git status shows modified files that haven't really been modified).
	It runs through the tree and sets the right permissions of files (which
	are mostly guessed, but mostly correctly and, most importantly,
	deterministically). In particular, you should do it before checking the
	status, adding, and/or committing.

PG100630A:

	Converted Apps/VUEE/survey to PiComp. Perhaps "converted" is not a good
	word, as the job consists in undoing the previous VUEE hooks. Along the
	way, detected (and fixed) one problem with PiComp: when tokenizing
	initializers, PiComp would split constructs like << into < < (i.e.,
	introducing a space between the two characters).

	Also, PiComp now parses crunning. The case of crunning (NULL) was
	impossible to handle in a macro (so it didn't work under VUEE), as the
	(non-NULL) argument of crunning had to be converted to a SIDE process
	type ID, i.e.,

	#define	_pt_id_(pt)	(&zz_!!THREADNAME(pt)!!_prcs)
	#define	crunning(pt)	zz_crunning (_pt_id_ (pt))

	So when you said crunning (NULL), the macro would produce nonsense. To
	do it right, I would have to remove the macro (crunning) and parse
	crunning in PiComp into zz_crunning recognizing the special case of a
	NULL (generally non-symbol) argument. That, however, would cause
	problems for the old VUEE-compliant praxes (which are not handled by
	PiComp and must rely on the macro).

	As the macro is expanded before PiComp sees the code, I handle two
	cases:

	crunning -> zz_crunning (not used now, waiting for the macro to
	disappear)

	zz_crunning -> zz_crunning (fixing the problem introduced by the macro
	for a non-symbol argument)

	Note that this requires a modification in VUEE. Please use VUEE with
	the same (or higher) release tag, if you want to have crunning working
	correctly with the PiComp-compatible praxes.

PG100705A:	VUEE >= PG100705A, SIDE >= PG100705A

	Introducing type lint (along the line of sint) intended to be PicOS's
	replacement for long. While it is not absolutely required to use this
	type (instead of long) in praxes, it is recommended in order to avoid
	problems with VUEE, especially on 64-bit machines. This required a
	modification in VUEE (PG100705A), which was directly inspired by the
	recent problem signaled by Nick (and his fix). That in turn required
	a (very slight) modification to SIDE. So you should get them all.

	I am not sure if I have fixed Nick's second problem. Nick, please let
	me know.

	I have gone through the source, including most praxes, replacing
	long with lint. Note that the problem of eliminating int and
	replacing it with sint everywhere is a bit more complicated. One reason
	why you have to be careful there is that PicOS (and consequently VUEE)
	uses int for some handles, notably PIDs, which are in fact addresses
	(using type word to store event numbers is another messy feature).
	This may change in the future. Probably, we should have two more types
	(or maybe just one) to take care of process and event handles. This
	cannot be done quickly as a lot in VUEE depends on the assumption that
	PID is an int derived from an address. Note that any problems caused by
	this "overloading" of types will be amplified on 64-bit systems.

	A minor cleanup in kernel.c (code for killing processes improved a
	bit).

	A few fixes to PiComp. Line count (for error diagnostics) would go off
	after an #if(def) or #else, for one thing. For another, PiComp now
	(when compiling for VUEE) recognizes and compiles out heapmem (it
	could not be eliminated by a null macro because of the weird syntax).

	Apps/VUEE/RFPING un-converted from manual VUEE to PiComp
	Apps/TESTS/ToySimple made PiComp-compatible

PG100706A:	3 1	SIDE >= PG100706A, VUEE >= PG100706A

	There is a new script, named deploy, located in this directory (i.e.,
	PICOS). It takes no arguments. When called, it will:

	1. verify whether the versions of all three packages (PICOS, SIDE,
	   VUEE) match,

	2. install/setup all three packages; this includes compiling mks/vuee
	   of SIDE, setting up links in VUEE/PICOS, and copying mkmk and picomp
	   from PICOS/Scripts to bin or BIN

	For 1, it is now possible to declare version (RTAG) dependencies, e.g.,
	see the present tag (i.e., 13 lines up). This particular tag says (in
	addition to providing a release number) that:

	1. the PicOS official system version is now 3.1

	2. PicOS requires SIDE and VUEE to be at least at the same RTAG level

	Similar specifications can be inserted into RTAG files in SIDE and
	VUEE, except that the version numbers in those packages are defined
	differently (and you normally don't care about them). I have also
	unified a couple of things:

	1. In all packages, RTAGs are stored in files named RTAGS..., where ...
	   is an arbitrary suffix (allowing for multiple files, e.g., used by
	   different developers). ALL files with such names are examined and
	   the LAST (most recent or highest-valued) RTAG is selected from
	   amongst them all as the effective release tag. What counts to a
	   tag's value is its number and the (optional) single letter following
	   that number, e.g., WO100711A > WO100711B > PG100710C.

	2. Not all tags must specify dependencies (or system version numbers
	   for PicOS). The version dependency of a package is determined from
	   the most recent tag that actually specifies a dependency. For
	   example, suppose that we have this chronological sequence of most
	   recent tags for PICOS:

	   WO100706A:	SIDE >= PG100704A
	   ...
	   WO100711A:	VUEE >= PG100709A
	   ...
	   PG100712A:
	   ...

	   The system requires VUEE at 100709A (or newer) and SIDE at 100704A
	   (or newer). Note that VUEE and SIDE may declare their own
	   dependencies on the other packages, although SIDE normally does not
	   depend on PICOS.

 	3. I have removed the (short-lived) Version file from PICOS. Its role
	   is now assumed (or resumed) by RTAGS (mostly as it was before our
	   move to git, except that then there was a single RTAGS file).

	4. Each of the three packages now has two scripts at the top level:
	   deploy (to deploy the particular package) and cleanup (to clean it
	   up). They must be called from their respective directories.
	   PICOS/cleanup invokes cleanup from the Apps directory followed by
	   Scripts/permissions, while VUEE/cleanup removes the links from
	   VUEE/PICOS (and executes permissions as well). SIDE/deploy accepts
	   two arguments (defaulting to bin and SOFTWARE/VUEE/PICOS) specifying
	   the destination directory of the mks/vuee compiler and the extra
	   library containing VUEE stuff.

	The PICOS's version of deploy is a bit different from the other two,
	because it calls them to set up the whole thing. So normally you will
	be only invoking deploy in PICOS. This is the recommended thing to do
	after updating any of the packages.

PG100714A:

	Board WARSAW_NEW_BLUE added (includes interface to LinkMatik 2.0 which
	I used for testing Bluetooth connections with the Android). See also
	Apps/TEST/BlueTest.

	Minor cosmetics:

	The deploy script now shows also the version number (not just the
	RTAG release) of PICOS.

	There is an -all option in the cleanup script that cleans up all
	three packages.

PG100716A:	VUEE >= PG100716A

	Naming of "hidden" variables and functions cleaned up (such names now
	begin with __pi_) in preparation for the upcoming revision of PICOS's
	implementation of strands.

	Eliminated the distinction between system and user events (the ETYPE
	attribute of events has been removed from the kernel). I have spent
	some time contemplating this step. It does simplify a lot of things in
	the kernel and appears generally safe. The implication for a praxis
	programmer is that event identifiers should be always derived from
	addresses as to make them unique. Note that generally, even if those
	identifiers are not abolutely unique, there should be no problem, as
	long as we always follow the standard paradigm of re-checking the
	respective condition after receiving an event. One exception (and a
	potential source of problems) is process termination (for join and
	joinall), because the events awaited for those operations are always
	assumed to be authoritative.

	I will explain all this in the new edition of the manual, which will
	probably materialize later, after strands have been redone. You may
	want to know, for example, that the event awaited by join is the PID
	of the child process. Thus, the praxis shouldn't deliver (trigger)
	such an event (unless it knows what it is doing). Note that PIDs are
	basically addresses of data structures in the kernel, so they cannot
	be confused for addresses in the praxis area. Similarly, the event
	awaited by joinall is the address of the process's code function.
	Previously, even though those events were represented in the same
	way, they had an extra attribute differentiating them from user/praxis
	events.

	OK, so the bottom line is this: use addresses for event identifiers,
	pretty much as you have been doing so far. Those addresses may point
	to your static data or code, except that the addresses of process code
	functions trigger joinall. The standard practice of using the addresses
	of global/static variables is always safe.
	
	I have simplified some operations (and even removed some of them)
	eliminating those "features" that have never been used in praxes.
	Again, it will be all described in detail in the new manual, but
	here is an approximate list:

	- Zombies have been eliminated. I introduced them originally in order
	  to provide for foolproof handshakes whereby, say, strand A formally
	  terminates (delivering a join/joinall event), but remains present
	  for a while (as a zombie) until some other (joining) process B
	  is given a chance to see it (or its data). Scenarios like this
	  have never been used, and, if needed, they can be implemented using
	  extra events.

	- Operations kill, killall, join, joinall, trigger, ptrigger used to
	  return values (which nobody ever used). Now they return nothing.

	- Operation status has been eliminated.
	  
	Fixed deploy to correctly handle locations outside the HOME directory
	tree on cygwin.

	The new versions of mkmk and picomp can now handle eCOG compilation
	(the makefile variant). I don't think Cyan SDK projects will ever be
	compatible with picomp. Who cares!

	There is a new option for picomp. With -e it will simply run vuee on
	the existing VUEE_TMP (without recompiling the original sources).
	Any errors from picomp are now stored in a special file in VUEE_TMP
	(named __status__, if you are curious). Using both -e and -n you can
	see those errors without running picomp again. Previously picomp would
	refuse to run vuee after warnings from the C preprocessor. Now, it
	can beter tell warnings from fatal errors.

PG100718A:

	As it turns out, hardware CRC on CC1100 shouldn't be used with the
	AUTOFLUSH mode, as it hangs the chip. Apparently, the chip gets into
	the "received" state (its status changes to IDLE) without properly
	presenting the reception/FIFO status (FIFO is empty unless the CRC
	is correct, which is probably the confusing factor). I have tried
	several (three to be exact) events signaled on GDO0 (1, 7, 15) and
	none of them really works as the correct indication of what has
	happened.

	For now, I am disabling that option, i.e., if you select RADIO_CRC_MODE
	= 2 or 3, you will get compilation errors. I don't want to remove it
	altogether, because there is a chance that the problem has been
	eliminated in newer versions of the chip.

	I have added a few sentences at the end of the document (doc.odt) in
	Apps/VUEE/RFTEST explaining how you can use the praxis to determine
	a good PATABLE setting (by trial and error). Coming up: a command to
	do this automatically.

PG100720A:

	A new command added to praxis RFTEST (Apps/VUEE/RTFEST) allowing you
	to collect statistics correlating PATABLE settings with perceived RSSI
	(for CC1100). Read doc.odt in Apps/VUEE/RFTEST.

PG100721A:	VUEE >= PG100721A

	Hooks and timers in TCV/VNETI (cleaned, redone, and tested). The delay
	is now in (PicOS) milliseconds (not in seconds, as stated in the
	manual). TCV timers have been integrated with the kernel delay
	mechanism.

	Praxis Apps/VUEE/HOOKS (or rather the acknowledging plugin that comes
	with it) illustrates how to use the hooks and timers.

	Irrelevant cosmetics in PiComp.

PG100722A:

	Praxis Apps/VUEE/TIMERS is better than Apps/VUEE/HOOKS. I am removing
	Apps/VUEE/HOOKS. TCV_HOOKS is probably redundant (as an option) and not
	needed.

	Fixed a serious bug in PiComp causing two 'shared' variables with the
	same name in the same file (used by different processes) to be mapped
	into one.

	A minor fix to CC1100 driver. Admitting RX chip state after a
	reception (nonempty FIFO), which may result from two packets being
	received (almost) back to back. While the second packet will not
	always succeed in such circumstances, it doesn't absolutely have to
	fail.

PG100723A:

	RADIO_OPTIONS & 0x80 (together with ENTROPY_COLLECTION) initializes
	entropy (for rnd) from the air when the node resets (CC1100 only).
	The driver 1) enters RX mode, 2) delays for 1 msec, 3) collects RSSI,
	4) appends four least significant bits of the RSSI to entropy,
	5) enters IDLE. This procedure is repeated 8 times to collect 32 bits.
	Optical inspection convinces me that the randomness of a thusly
	collected value is very good.

	Praxis Apps/VUEE/TIMERS modified slightly to facilitate some tests.
	For example, I have added there a command to produce a sequence of
	random numbers, which I am going to subject to formal conformance
	tests.

	A minor fix to tcvp_settimer (in tcv.c). Things should be a tiny bit
	more efficient.

PG100723B:

	Sorry, sorry, sorry! PG100722A is crap. Mea culpa. The HOOKS are
	required after all. The present version of Apps/VUEE/TIMERS contains
	my last word (so far ;-). I forgot that TCV/VNETI can drop packets
	silently (when TX goes off) in which case the plugin will not now that
	its hooked packets are gone (unless it is using TCV_HOOKS).

	By the same token, the plugin cannot have an internal tally of hooked
	packets, so I have removed the variable NFreeHooks, along with the
	event supposedly triggered when a hook becomes free. There can be no
	such thing unless we add something (like an extra plugin function) to
	convey the message. Do we need it? Probably not. So there's now a
	function that you can call to get the number of free hooks, which are
	counted explicitly on each request.

	Upgraded uf.tcl (in Scripts) to make it possible to copy the UART
	output to a file. This is much better than Terminal, especially that
	I am now working with Linux.

PG100724A:

	The random number generator improved. If entropy fails to collect, it
	will fall back to a decent linear congruential 32-bit based generator
	with a long cycle.

	Cosmetics in phys_cc1100 to appease the compiler.

	Fixed a problem in tcv.c causing a compilation error with VUEE.

PG100724B:

	tcvp_unhook(p) accepts p == NULL (and does nothing in such a case).

	The random number generator improved even more. We now have two RNGs:

		word rnd ()
		lword lrnd ()

	basically for the price of one. They are both available with options:

		#define RANDOM_NUMBER_GENERATOR 1

	as well as 
	
		#define RANDOM_NUMBER_GENERATOR 2

	Recall that the second option selects a better quality generator (the
	first option sucks, but is more efficient, and, probably, with entropy
	collection:

		#define	ENTROPY_COLLECTION 1

	will not be perceptibly worse than 2.

PG100725A:

	tcv_drop(p) accepts p == NULL (and does nothing in such a case). This
	is a logical consequence of the last mod to tcvp_unhook.

	Fixed a problem in TCV/VNETI concerning packets that have been removed
	from the buffer pool with their timers (and hooks) dangling.
	This relates to two operations: tcv_rnp and tcvphy_get. Each of them
	produces a packet that:

	1. FAPP has been extracted (eliminated) from the buffer pool
	2. has not been deallocated yet
	3. it may have to remain available for processing beyond the state
	   in which it has been acquired

	Thus, if the packet has a timer set, and the timer goes off while the
	packet is being handled after its extraction, we are likely to get into
	a mess. Note that this also concerns hooks, which can also be handled
	asynchronously (by other threads) yielding races.

	The fix consists in making sure that a packet returned by tcv_rnd and
	tcvphy_get has its timer cleared and its hook removed.

PG100727A:	VUEE >= PG100727A

	Correction: hooks are left intact with tcv_rnp and tcvphy_get (while
	timers are cleared). This makes more sense.

	New functions added to TCV/VNETI (to be documented, as lots of other
	things):

	Boolean tcvp_isqueued (address packet);
	Boolean tcvp_issettimer (address packet);
	address *tcvp_gethook (address packet);

	I have introduced a tentative fix into Wlodek's LicComms/tarp.c (to be
	revised and cleaned up by Wlodek).

	Some prerequisite cleanups for improving the parameterization of LBT,
	mostly for CC1100, but not only. Don't be concerned about the large
	number of modified files. These are mostly renames of different
	constants with the same meaning, so they are consistent across all
	drivers.

	CC1100 driver augmented by options to better control LBT. This is still
	half cooked. The size of the array returned by PHYSOPT_ERROR increased
	to 6 words. See PicOS/cc1100.h for their description as well as for 
	new driver options. Note that there will be more coming up shortly.

	Praxis VUEE/RFTEST modified for the new version of PHYSOPT_ERROR, but
	untested yet.

PG100727B:

	A few minor (but essential) fixes to the CC1100 driver (I have tested
	it [roughly] and it seems OK). I have started writing a doc explaining
	its workings and parameters, but it will take me a couple of days
	(being a low-priority task). If desperate, see PicOS/cc1100.h for
	hints.

PG100729A: VUEE >= PG100729A

	Headers of the new functions added to tcv.c included in tcvplug.h
	(I forgot to put them there).

	A few cosmetic cleanups of little consequence. I am tagging because a
	matching VUEE version is required (one extra constant must be defined
	in VUEE's sysio.h).

PG100730A:

	A few cleanups in the CC1100 driver mostly related to option constants.
	The options are described in Docs/PICOS/cc1100.odt.

PG100804A:

	A minor correction to the counters (PHYSOPT_ERROR) in phys_cc1100.c.
	Previously, the transmission counter (2) would stop on MAX; now, it
	wraps around resetting the failure counter (3) to zero. This is the
	same behavior as for counters 0 and 1.

	New commands added to VUEE/RFTEST: C and P (see the doc).

	The declaration of guide_rtr in Libs/LibcComms/tarp_hooks.h made
	conditional on TARP_RTR (non-TARP_RTR praxes wouldn't compile for
	VUEE without that).

	Modified picomp: the declaration parser made a bit smarter in
	preparation for the upcoming reimplementation of strands.

	Irrelevant cosmetics here and there.

PG100806A:	3 2 	VUEE >= PG100806A

	I was going to introduce considerably more consequential modifications
	to the implementation of strands (i.e., threads with private data), and
	had them almost ready, but backed off. They sucked. Even though, from
	some elevated methodological point of view, being able to declare
	"context" variables in a strand might seem a nice idea, the implied
	automatic memory allocation/deallocation in the kernel for strand
	contexts would in fact get in the way of many simple solutions
	(involving trivial private data areas) which are quite natural and
	effective. 

	So I was torn for a while between:

	1. complicating the issue by introducing a de facto third process type;

	2. putting up with the increased complexity of strands for the alleged
	   high-level benefits (which I find difficult to appreciate in our
	   practical setup);

	before deciding to abandon the idea. In my rather trivial and pretty
	much pathetic attempt to make the contexts a bit more friendly, I did
	this:

	1. The type argument for a strand, i.e., in "strand (fun, type)" or
	   "fsm fsm_name (type)" now stands for itself, rather than for a
	   pointer to whatever you've put in there. This means that when you
	   say, e.g.,

	   	fsm dowol (int) { ...

	   the data variable available to the process function will be of type
	   int, not int*. Then, if you want to have a char pointer, you should
	   say:

	   	fsm dowol (char*) { ...

	   instead of:

	   	fsm dowol (char) { ...

	   as before. I have gone through all the relevant praxes and made the
	   requisite changes occasionally simplifying things (like removing
	   weird and clumsy casts).

	2. There is now a system variable pointing to the current process's
	   data which, for example, allows it to be referenced directly from a
	   non-process function. I am not sure if this is useful at all.
	   Here is an example:

		typedef struct { ... } pcs_data_t;
		...
		fsm dowol (pcs_data_t*) {	// Note the '*'
			...
			...
			val = fun ();
			...
		}
		...
		int fun () {
			context pcs_data_t *data;
			// data refers to the current process's data object
			...
			data->something = U;
			...
		}

	   In other words, the data area of the currently running strand
	   can be directly accessed by functions via the context construct
	   (handled by picomp). This isn't extremely helpful, as you can
	   always pass it through an argument, but it comes for free.

	3. I have removed the limits on the number of process instances that,
	   in old days, you could specify as an argment of endprocess, e.g.,
			
		endprocess (4)

	   With the introduction of threads and strands, there was an implied
	   limit of 1 for a thread, and no limit (0) for a strand. There are
	   no limits now. I do not think any of our praxes has ever depended on
	   those limits (except for some weird examples of mine), so this
	   change shouldn't affect anything, but you may want to check to make
	   sure.

	You can pretty much ignore all these "revolutionary" enhancements and
	just remember one thing: the type argument of a strand now stands for
	itself, rather than a pointer to itself.  Before introducing any more
	changes of any substance, I will try to catch up on the documentation.

PG100811A:

	The type name for fsm can now include a variable replacing the default
	"data", e.g.,

		fsm dowol (char *msg) {

	Makes more sense, doesn't it? Except that this isn't compatible any
	more with the old macro strand, i.e.,

		strand dowol (char *msg) {

	won't work (for pretty obvious reasons).

	Fixed eCOG/main.c for the new fsm/process layout.

	The way picomp generates code around states now makes it possible to
	insert local declarations there, as in:

		state STATE_1:
			word a, b;
			... some code ..

	which practically obviates the need for having auto (non-shared
	declaration at the fsm header. I am contemplating forcing all such
	declarations to be shared, thus eliminating the need for the shared
	type qualifier.

	You can now use sameas (like in SIDE), instead of proceed, e.g.,

		state STATE_1:
			... do something ...
		state STATE_2:
			... do something else ...
			sameas STATE_1;
		...

	which behaves like a goto, i.e., the scheduler is not involved. This
	should only be used if you are worried that the possible preemption by
	another process is harmful.

PG100816A:

	The biggest news is that I have eliminated the "shared" type qualifier.
	This keyword is no more. Sorry about all this confusion. This is how it
	works now:

	1. A variable declared locally at the top of an FSM declaration, e.g.,

		fsm foo {
			word var;

	   is AUTOMATICALLY "shared", i.e., non-volatile. From the viewpoint
	   of the FSM function, it is declared as static.

	2. If you want to have automatic, state-local (volatile) variables, you
	   should declare them at states, e.g.,

		entry MY_STATE:
			word var;

	Note that previously you couldn't declare variables at states, not
	without introducing blocks, i.e., { ... }, which wasn't natural.
	Now picomp creates such blocks automatically, which means that you can
	"naturally" declare variables there. This pretty much obviates the
	need for declaring such (i.e., automatic) variables at the top of the
	FSM function (I couldn't think of a single reason to keep them around).
	Consequently, it makes now perfect sense to assume that if you declare
	a variable at the top of an FSM, you want it "shared", i.e., static.

	This works for all praxes respecting the new format, i.e., those using
	the fsm construct (and being compiled by picomp), including their VUEE
	models, but, of course, not for the old ones. Thus, if you want to
	convert an old-style praxis to the new format, make sure to move all
	declarations of automatic variables to the states that need them, as
	otherwise they will become static.

	I have edited and fixed all the present new-format praxes (including
	new_il_demo). Or at least I think so ;-).

	===

	Note that the keywords "state" and "entry" are equivalent. My (not so
	strong) opinion is that "entry" should be phased out (no hurry).

	===

	Many cleanups in picomp, e.g.,

	References to fsm functions (addresses), e.g., turning them into
	events, like this:

		fsm foo ...
		...
			when (foo, SOME_STATE);

	are now handled correctly by picomp (for VUEE). So are multiple fsm
	announcements per line, e.g.,

		fsm foo (const char*), muka, bar (struct d_t *u);

	The script now avoids interpreting special keywords (like entry or
	state) in the context of a remote reference to a struct/union
	attribute, e.g.,

		ptr->state or str.state

	===

	Similar to mkmk, options.sys is now optional for VUEE.

	===

	CyanIDE project files generated by the new version of mkmk could not be
	opened by the SDK because of the quotes around the options.sys include.
	I have converted those quotes to the proper XML escapes, and it now
	seems to work. We haven't used CyanIDE SDK for a longish while, so
	nobody noticed.

	===

	Still working on the doc.

PG100827A:	3 3	VUEE >= PG100827A

	Updated documentation: PicOS, PiComp, mkmk, VNETI, Serial, Installation.
	Added new document: Internals (separated from PicOS).

	The context construct has been removed. It was useless and stood in the
	way.

	Changed the way a strand gets hold of its data pointer. Now, the data
	pointer appears as a true local variable, which can be reset in the
	strand, the change being valid until the strand leaves its current
	state. VUEE mimics this correctly.

	The argument of unwait removed (it didn't make sense).

	uf.tcl has been renamed to piter (PIcos TERminal emulator).

	If you have Tcl8.5 form ActiveState (and it is on your PATH), deploy
	will now copy piter and udaemon to your bin directory correctly setting
	it for execution with Tcl/Tk 8.5.

	Fixed the board definition for CHRONOS (it missed a minor upgrade to
	the LEDs interface).

	Miscellaneous cosmetics here and there.

PG100830B:

	Added new options for organizing the scheduler queue. Here is how it
	works (this is also described in PicOS.odt):

	MAX_TASKS > 0
	As before. There is a table of PCB slots MAX_TASKS entries long.

	MAX_TASKS == 0
	PCBs are malloc'ed and linked. There is no explicit limit on the number
	of processes. New processes are added at the end, so the oldest process
	has the lowest priority.

	MAX_TASKS < 0
	Like MAX_TASKS == 0, except that new processes are inserted at the
	front of the list, so the oldest process has the highest priority.

	I have tentatively set the default to MAX_TASKS == 0. Those praxes that
	expect the number of processes to be well bounded (like survey, for
	example) have to define MAX_TASKS in their options.sys (survey does).

	I have also updated the PicOS document (not much) to describe the
	options.

	Note that crunning (NULL) with MAX_TASKS <= 0 doesn't work (it always
	returns 0).

	The gcc optimization option for MSP430 changed from -O2 to -Os, which
	seems to give slightly shorter code.

PG100909A:

	Macro tcvp_isdetached(p) added to tcvplug.h. Its role is to tell
	whether the packet is (not) present in any queue, including the timer
	queue (if TCV_TIMERS is nonzero). Fixed the tarp plugin (tarp.c) to
	use that macro (instead of calling tcvp_issetimer and tcvp_isqueued),
	which looks a bit better.

	I discovered a weird behavior of the piter script (when installed by
	deploy) apparently resulting from some incompatibilities between Cygwin
	and ActiveState Tcl (which, as we remeber, is intended for plain
	Windows). Some arguments passed to the script would have CR characters
	appended to them; also, the hardcopy file produced by the script would
	have superfluous blank lines. It seems that I have fixed those
	problems, but without understanding what I was doing.

	A few cosmetics.

PG100915A:

	Sorry, the previous commit had a semi-intentional bug in tcvplug.h (the
	thing wouldn't compile with TCV_TIMERS == 0).

	Nothing new, except for a few changes to Apps/TESTS/CLOCK_TEST/ - to
	test for the alleged bug in timers/hooks reported by Wlodek. BTW: my
	tests have discovered no problem.

PG101016A:

	Added new board: WARSAW_IR250LP looking like WARSAW_ILS, except that:

	1. the IR sensor has reverse polarity (i.e., it is active low)
	2. there is no analog IR sensor (number 3).

	Added new board: WARSAW_BLUE which is the old WARSAW board with
	LinkMatik 2.0 (BlueTooth) connected via the second UART.

PG101019A:	VUEE >= PG101019A

	A slight modification to PiComp for compatibility with the newest fix
	to VUEE.

PG101107A:

	LBT for the CC1100 modified (read Docs/PICOS/cc1100.odt). I have
	removed the previous (complicated) combination of staging (i.e.,
	decreasing the sensitivity of thresholds) with limiting the number
	of retransmissions. The LBT mode is now determined by a single
	constant, RADIO_LBT_MODE, which can be 0-3:

	0 - LBT completely switched off, all transmissions are blind

	1 - only check (and refuse access) if receiving a packet

	2 - refuse access if receiving a packet or RSS above threshold(s),
	    with the thresholds described (as before) by RADIO_CC_THRESHOLD
	    and RADIO_CC_THRESHOLD_REL

	3 - try up to 8 times gradually decreasing LBT sensitivity; the last
	    attempt is carried out with LBT completely switched off

	Previously, I was under the impression that you can switch off the
	thresholds completely without setting CCA_MODE to 0 by storing the
	smallest threshold values in AGCCTRL1 (this is what the document says). 
	Apparently, as Wlodek's problems indicate, this is not the case. His
	setups seem to suffer some strange interference which makes it
	impossible to acquire the channel for a very long time unless you set
	CCA_MODE to 2 (or 0).

	Improved the recognition of Tcl location by the deploy script (esp.
	under Linux)

PG101127A:

	CMA3000 driver for EZ-CHRONOS fixed to make sure that the sensor is
	always initialized properly. Previously, the acceleration sensor would
	not initialize on some watches on the first try. Persistent
	initialization until the configuration register reads correctly seems
	to do the trick.

PG101210A:

	Flash definitions modified to account for the "non-standard" FIM setup
	on CC430 (4 blocks x 64 words). Note that this requires the new fixed
	version of mspgcc (the flash definitions for cc430 were incorrect).
	I will be shortly putting the Cygwin source package into:

		http://www.olsonet.com/REPO/101210_mspgcc_source.tar.gz

	This is for a complete re-installation; it takes time, as the entire
	package is recompiled. There's a simple README file explaining the
	installation procedure.

	If you prefer to upgrade the easy way, then fetch this file instead:

		http://www.olsonet.com/REPO/101210_mspgcc_changes.tar.gz

	Then do:

		zcat 101210_mspgcc_changes.tar.gz | tar -xvf -
		cd 101210_mspgcc_changes
		cp -r * /cygdrive/c/mspgcc/msp430/include/

	which operation will just replace the modified include files. Note that
	flash write/erase operations will not work on the CHRONOS with the
	previous version of mspgcc (although reading is fine).

	The word addresses of the FIM blocks on CC430 are 0 (block D), 64
	(block C), 128 (block B), and 192 (block A). The interesting feature of
	the last block (A) is that its contents survive reflashing the device
	and can only be erased and overwritten by an explicit action of the
	program.

	A minor extension to Scripts/xml.tcl.

PG101224A:

	Added a new option to PiComp. When compiling for VUEE, you can now
	specify -i, which will force all functions that are not explicitly
	declared as static to be implemented as idiosyncratic, i.e., as node
	methods. This is recommended in those cases when a multiprogram praxis
	uses the same names for functions in different programs. Read
	PiComp.pdf.

PG110114A:

	Battery sensor (internal) added to the CHRONOS board definition. As
	requested by Wlodek, this is sensor number 0, with the previous two
	sensors renumbered 1 and 2. It goes like this:

	#define	SENSOR_BATTERY	   0	// Analog internal battery sensor
	#define	SENSOR_MOTION	   1	// CMA3000 acceleration sensor
	#define	SENSOR_PRESSTEMP   2	// SCP1000 pressure/temp. combo

	The value returned by the battery sensor is (Vcc/5.0V)*4096.

PG110122A:

	Our standard setting of the global ADC options included REFOUT to make
	sure that the reference voltage was always available on the respective
	pin. This is not such a terrific idea for CC430 where this function is
	shared, and REFOUT must be combined with the proper redefinition of the
	pin function to make sense (otherwise, if the pin is used for another
	purpose, the ADC may misbehave). So now there is this new option:

	#define ADC_REFERENCE_OUT 1

	with the default setting corresponding to our previous way of handling
	the reference voltage. On CC430-based boards, it should be set to zero
	(which I have done), unless you in fact want the reference voltage to
	go out (and the pin function is properly selected). The option is not
	applicable to eCOG.

	When called with the program tag (for multiprogram praxes), mkmk
	wouldn't clear the previous KTMP_... directory of the program; it
	does now.

PG110123A:

	CMA3000, the acceleration sensor in CHRONOS used for motion detection,
	now has two modes. The new version of the function initializing the
	sensor:

	void cma_3000_on (word mode);

	accepts one argument which can be:

	0 - selecting the old low sensitivity mode, with the sensor operating
	    in the motion detection mode within 8g range. In that mode, the
	    nominal sensitivity is 67mg (milli-G) in any axis. Its advantage
	    is the absolutely minimum energy usage. Being entirely interrupt-
	    driven, it facilitates power-down operation of the CPU. The chip
	    drains about 9uA of current.

	1 - selecting the high sensitivity mode, with the sensor operating in
	    measurement mode within 2g range. The nominal sensitivity is 17mg.
	    The mode requires a constant periodic readout by a special process,
	    which is presently done at 20 msec intervals. The chip itself
	    drains about 70uA.

	I have simplified the return value of the sensor removing the time
	stamp (which was pretty much useless). The third argument of
	read_sensor is now a word pointer. The single returned word value is
	proportional to the perceived amount of movement since the previous
	take (stopping at 0xffff). In mode 0, it counts the interrupts. In
	mode 1, it stores the aggregated difference in perceived acceleration
	summed over all three axes (and tends to be much larger than in mode
	0 - for the same amount of movement, actually showing the amount of
	movement as opposed to its mere occurrence).

PG110204A:

	A few cosmetic adjustments inspired by Wlodek's habitual experiments
	with -Wall in Makefiles. Basically, all compiler warnings can be
	eliminated, although eliminating some of them doesn't warrant the
	effort. This time Wlodek did detect one true problem: the constant
	ccodes in ez430_lcd.c had no explicit type, which defaulted to int,
	whereas it should have been byte. That resulted in some wastage of
	(code) memory (i.e., flash).

	One class of warnings that I cannot eliminate are those generated by
	PiComp-inserted labels of the form __stlab_... corresponding to FSM
	states. Those labels are needed to implement the operation sameas, and
	they will generate warnings when not used (which is most of the time).
	Needless to say, they are completely harmless despite those warnings,
	and eliminating them would require a considerable effort in PiComp,
	which would serve no other purpose.

PG110206A:

	While cleaning up my laptop, switching to Windows 7, reinstalling
	Cygwin and stuff, I went through the Installation document fixing this
	and that. One thing I noticed in the new Cygwin was that the first
	invocation of mkmk would fail because of Cygwin's warning about DOS-
	style paths in execs issued by Tcl (the message went to stderr
	triggerring exec abort in Tcl). Apparently, having issued the warning,
	Cygwin ignores subsequent cases of DOS-style paths, so I simply had to
	make sure that the first error was caught and ignored. Note that this
	is the same Tcl that comes with Cygwin, so the incompatibility is not
	mine.

	To sum it up:

	1. A minor change in mkmk.
	2. Updated Installation.pdf.
	3. Added mspgcc.pdf (Steve Underwood's manual) to Docs, so it is always
	   easy to find.

	I am putting in our REPO (http://www.olsonet.com/REPO) two files which
	now represent our official recommended version of mspgcc:

	mspgcc_source.tar.gz	- the source files to compile (both for Linux
				  and Cygwin)

	mspgcc_linux.tar.gz	- tarred and zipped precompiled /opt/mspgcc for
				  Linux

	These files are referenced in Installation.pdf.

PG110207A:

	As pointed out by Wlodek, the problem described above concerns other
	scripts, notably picomp. In most cases it doesn't show up (or isn't
	very annoying) as after the first failure of ANY script, the remaining
	invocations of all scripts within the current Cygwin session will be
	OK. So this is a more comprehensive fix involving picomp, piter, mkmk,
	and cleanup.

PG110220A:

	Removed (or so I hope) the hangups of CHRONOS detected by Wlodek in
	new_il_demo. Wlodek noticed that the hangups did not occur if the
	RX wasn't switched off and on. Apparently, the problem was caused by
	enter_rx (in phys_cc1100.c) executed after reset to exit the power
	down mode. Inserting a slight delay between two consecutive attempts
	to enter the RX state appears to have helped, although I don't
	understand why. I've been lucky to have found it at all, considering
	the lack of debugging (and very mediocre tracking) capabilities on the
	CHRONOS.

	Fixed a race in phys_cc1100.c causing incorrect setting of the chip
	when the TX and RX status was changed simultaneously. For example,
	in this sequence:

	tcv_control (sfd, PHYSOPT_TXOFF, NULL);
	tcv_control (sfd, PHYSOPT_RXON, NULL);

	if the previous state of TX and RX was both OFF, the RX would not
	switch on properly.

	All this still sucks. Most of the problems are caused by the different
	stages of switching off the transmitter: draining, erasing, holding.
	A question to Wlodek: do we need TXHOLD at all? (It is OK if we do ;-).

PG110226A:

	Nothing of formal relevance. A minor fix to BlueTest (one of the lines
	written to the UART wasn't terminated properly). Added a new data set
	(data8.xml) and a geometry file (geometry8.geo) to Apps/VUEE/RFPing to
	demonstrate pin-controlled node coloring in the ROAMER window. See
	README_PG.txt.

PG110421A:

	Updated the com0com driver included in UTILS.zip to the newest version.
	Have checked it on Windows 7 and it seems to work fine.
	Board WARSAW_BLUE and the praxis BlueTest modified to accommodate
	BTM-182 (a new module to replace LinkMatik). As it turns out, the
	replacement will be short lived (and, probably, another replacement
	will be coming shortly), but the extension was almost trivial.
	The piter script upgraded a bit:
		1 - command "!q" quits the emulator gracefully
		2 - the RTS signal is pulled down on open, which is needed
		    by some exotic UARTs, even with hardware flow control
		    switched off (I needed it to talk to arduino, which you
		    probably don't care about)

PG110519A:

	The OSSI script in eco_demo revived and tested. See README.txt in
	Apps/VUEE/eco_demo/OSSI for a brief case study.

	Note that eco_demo is not picomp-compliant yet (this will be my next
	commit, I guess).

	Voltage sensor (internal) added to BOARDS/WARSAW_BLUE. The sensor
	(number 0) returns (Vcc * 4095) / 5.

PG110522A:

	I have converted eco_demo to a picomp-compliant form (basically undoing
	the old-style VUEE-compatibility mess). The new version is stored in
	Apps/VUEE/new_eco_demo. The old version has been left as it was, except
	that I removed from it the OSSI subdirectory and the docs (which are
	now stored with the new version of the praxis. Note that I haven't
	tested the converted version except for compiling it (in all possible
	ways) and running briefly a large VUEE model (large_eco.xml). Use with
	care.
	
	Fixed a typo in BOARDS/ARTURO/board_pins.h.

PG110529A:

	Macro emul added to make sure that emul calls (see the corresponding
	entry for VUEE) are converted to NOPs by default.

PG110610A:

	A few cosmetic modifications to picomp, mkmk, deploy (as well as some
	adjustments in the documentation: PiComp, mkmk) facilitating the SDA
	(Software Development Assistant) that I have begun to work on. This
	work has a low priority and is likely to be preempted, so don't hold
	your breath. The temporary code name of this project is PiSDA (for
	PicOS Software Development Assistant), but it will certainly not stay
	(it just doesn't sound nice in Polish).

PG110613A:

	Made sure that eco_demo (and new_eco_demo) compiles with WARSAW for
	the aggregator node (i.e., the aggregator doesn't absolutely have to
	be equipped with a voltage sensor or an SD card).

PG110618A:

	Fixed (or rather patched) a problem in the CC1100 driver detected by
	Paul whereby a large fraction of a collector's packets wouldn't make it
	to the aggregator. The problem was caused by multiple status change
	requests that were sent by the praxis to the driver basically in the
	same event (i.e., without letting the driver's thread run in between).
	The way a status change (TXOFF, TXON, RXOFF, RXON, TXHOLD) is handled
	consists of two steps: 1) an immediate action carried out by
	tcv_control (the driver's options function), 2) some action performed
	by the driver's thread in response to the event caused by the first
	action. This is messy because you may, for example, execute TXON and
	later TXOFF (e.g., in the same state) without giving the driver's
	thread a chance to respond to the first change (action 2 must be
	asynchronous). This is allowed and in fact quite natural, as in:

		tcv_control (rfd, PHYSOPT_TXON, NULL);
		tcv_endp (packet);
		tcv_control (rfd, PHYSOPT_TXOFF, NULL);

	However, when the above sequence was followed by:

		tcv_control (rfd, PHYSOPT_RXON, NULL);

	executed before the driver's thread responded to the first sequence, it
	would, with a large probability, quietly abort the transmission in
	progress.

	I (think I) have fixed this for now, but I don't like it. So I will
	think of a way to simplify the matters and implement a better solution.

PG110618B:

	A minor improvement to PG110618A (probably inconsequential for
	eco_demo).

PG110622A:

	BlueTest modified to allow resetting the baud rate of BTM-182 to
	factory setting. README.txt fixed a bit and updated.

PG110806A:

	TESTS/BlueTest completely rewritten (see doc.odt). Added commands to
	automatically configure BT modules for one of two roles: UART or
	SCANNER.

	Added praxis TESTS/BlueScan with a sample scanner function, as
	requisitioned by Wlodek for VeriLoyal. See doc.odt in that directory.

	The default UART rate for WARSAW_BLUE (both BT modules) changed to
	9600. Read doc.odt in TESTS/BlueTest.

	Added (tentatively) board CC430W describing the new Warsaw board.

	CMA3000 sensor driver updated to be compatible with the new Warsaw
	board (where the sensor is connected via regular pins rather than SPI).
	Not tested yet.

	Added board KRAKOW_SHT (required for Wlodek's demo in Krakow). It
	describes a Warsaw board with three sensors: battery voltage + the
	two components of a single SHT sensor.

	Added a couple of potentially useful macros to Libs/Lib/form.h.

	A few minor cleanups in phys_cc1100.c.

	A table of available UART rates (a symbolic constant) is now defined
	in PicOS/MSP430/uart_def.h.

	Option -S added to piter to report the list of available (openable)
	UARTs.

PG110807A:

	Added a driver for an array version of the SHT sensor. Board
	WARSAW_10SHT (see board_pins.h) shows sample defs for such a sensor.
	The idea is that all the multiple SHT sensors share Vdd, Ground, and
	Clk lines. Identical commands are sent to all of them at the same time,
	and data is extracted individually but in unison. The array is visible
	as two sensors (temp + humid, as for the scalar variant), but the value
	returned by read_sensor is actually an array of values.

	For example, WARSAW_10SHT defines 10 SHT sensors, to the pointer passed
	to read_sensor, i.e., val in

		read_sensor (STATE, sensnum, val);

	must be an array of 10 words (the function assumes that there's enough
	room for 10 word values).

	The pins assignment in WARSAW_10SHT is as requested by Gerry, i.e.,

	CLK  = P1.7
	DATA = P2.5, P2.3, P2.4, P6.7, P2.2, P1.6, P6.6, P6.5, P6.4, P6.3

	The above ordering of pins corresponds to the ordering of values in the
	array (0 through 9).

	To test, use the praxis in Apps/ECOPROJECT/SENSOR_TEST (I have modified
	it, so that it can handle arrays of values):

		mkmk WARSAW_10SHT
		make

	Commands:

		s 10	[says that values are arrays of 10 words each]
		r 1	[read the temp array]
		r 2	[read the humid array]

	Each time you do r, you will see as many values as specified in the
	last argument of s (with 1 being the default).

	Note: sensor 0 is the battery (voltage) sensor. It doesn't hurt to view
	it as an array (the unused values are zero).

	Note: if some SHT sensors are disconnected, their values will be
	0xFFFF or 0x0000 (depending on whether the pull up resistor for the
	data pin is present or absent).

PG110815A:

	Added an option to slow down the clock for the array version of SHT
	(see the previous tag). As predicted, there seem to be problems with
	longer cables. You can now set SHTXX_CLOCK_DELAY in options.sys to the
	number of microseconds (roughly) separating two clock ticks, e.g.,

	#define	SHTXX_CLOCK_DELAY 10

	BTW: some files are tagged as modified although they haven't really
	changed. Don't be alarmed: I have fixed a few erroneous permission
	bits.

PG110828A:

	Wlodek is forcing my hand, so a couple of items in this commit are
	incomplete, but that's OK. Nothing serious.

	Added piter_plug.tcl to Apps/VUEE/krk_ned. This is the (tentative)
	conversion plugin to piter. Invoke piter this way (in that directory):

		piter -p ... -P

	The -P is critical. Also, read Serial.pdf (it has been updated),
	especially the part about piter.

	Lots of changes to piter, see above.

	Default setting of SHTXX_CLOCK_DELAY in BOARDS/WARSAW_10SHT changed
	from 0 to 1, as per Gerry's experiments.

	Fixed a problem with picomp whereby the VUEE compiler would ignore
	function declarations and other definitions in "external" (library)
	files, especially those that used non-method functions (like LibXRS).
	The present fix is a crude hack (involving "special sequences" in the
	affected files) and a better solution is called for. I think I know
	what to do and there's no rush.

	Modified the way diag was handled in phys_uart.c (and a few related
	places). One curious feature was that if a diag message started with T,
	that T was discarded.

	Apps/VUEE/ILLUSTRATION/OSSEXAMPLE added to illustrate my new ideas
	about OSS. Still to be described, discussed, and probably revised.
	Stay tuned.

	BOARDS/CC430W in this version is a mess, but I will fix it soon. Just
	got the mended boards from Warsaw.

PG110831A:

	Fixed ossi.tcl in Apps/VUEE/new_eco_demo to properly handle multi-digit
	power specification for collectors.

	A couple of cleanups in BOARDS/CC430W related to my recent testing of
	the new Warsaw board.

PG110902A:

	Apps/VUEE/ILLUSTRATION/OSSEXAMPLE includes an illustration of my
	tentative OSS framework (for discussion with Wlodek). Read notes.odt
	in that directory.

	The plugin mechanism of piter extended by plug_init and plug_reset
	(read Serial.pdf). Fixed a bug in piter rendering the binary mode
	in the PG110828A version inoperable.

	Changed the diag preamble character for phys_uart from 0x00 (introduced
	in PG110828A) to 0x10 (ASCII DLE). With 0x00, binary diags will not 
	work. Does anybody still need them? I don't think so (not with
	phys_uart, anyway), but, in any case, DLE is better for this role than
	0x00.

PG110918A:

	A new version of piter. Here is the note that has been inserted into
	Serial.odt:

	===

	When called without parameters, the script runs in a simple GUI mode
	whereby the terminal is presented in a window (similar to udaemon's
	UART window). The script's parameters (corresponding to command-line
	arguments) are entered in a special dialog, which should be
	self-explanatory. The device (UART) can be selected from a menu (the
	list of available UARTs is determined by the scrip via a scan
	(equivalent to -S). A device that does not appear on the menu can be
	entered manually into the "Other" field (which takes precedence over
	the menu).

	Note that the log file (equivalent to -f or -F) is controlled from the
	terminal window (in a manner similar to udaemon's UART window).
	Logging can be started and stopped on the fly.

	There is an option to save the settings in an "rc" (.piterrc) file in
	the home/user directory. If a saved setting is available, it will be
	assumed as default upon the next call.

	===

	The script can be run through freewrap to become executable as a 
	stand-alone program (it did work for me). Combined with the possibility
	to save the settings (including the locations of plugins and macro
	files), the GUI version should be more convenient than the old
	command-line script.

	One problem: copying to clipboard from the terminal window doesn't
	work (udaemon has the same issue). I am not sure if this isn't a
	fundamental problem with Tcl/Tk on Windows. Will investigate.

	===

	Script "release" included in the root directory. Its purpose is to
	create a clean "platform package" (cleaned up, no .git) to be used for
	creating live USB sticks.

PG110919A:

	A tiny little fix to the deploy script. Piter is now installed in
	$HOME/bin as piter.tcl, which makes it clickable (when clicked, it
	executes in the GUI mode). A symbolic link to piter.tcl is also set
	from $HOME/bin/piter, which makes the old command-line invocation
	available as well.

PG110919B:

	Device scan in piter (GUI mode) made optional (via a special button).		In some cases (Bluetooth ports) the scanning may take a while. A few
	cleanups done along the way.

PG110920A:

	Wlodek discovered that piter was having problems with port numbers > 9
	(on Windows). Hopefully, I have fixed that. Also (which I discovered),
	it would hung on Linux when exiting. Hopefully, not any more.

PG110920B:

	Cleaned up device names in piter (no more weird names like \\.\COM17).
	Hopefully, this is the last one of the quick series of commits inspired
	by the Krakow project.

PG111013A:

	Clipboard selection in piter's terminal window (the GUI version) now
	works. Just drag the text with the left button (as in X-Windows). The
	same applies to the line input area at the bottom. Additionally, the
	middle button in the line input area does the paste (as for X-Windows).

	The TESTS/WARSAW praxis made picomp-compatible.

	Board definition for the present (broken) version of the new Warsaw
	board (BOARDS/CC430W) now corrects for the frequency shift incurred by
	the faulty crystal, so the board can talk to other boards.

	Fixes/corrections to the new Warsaw board included in
	BOARDS/CC430W/FIXED (by way of documentation), so we have a ready
	board definition when the mended version of the actual board
	materializes.

PG111104A:

	Added an option to piter (-C filename) to specify an alternative to the
	"rc" configuration file (i.e., $HOME/.piterrc). This is useful, e.g.,
	for PIP which wants to associate piter configurations with projects.

	Fixed a bug in piter causing incorrect interpretation of arguments
	under Linux.

	A few cosmetics in deploy.

PG111106A:

	Fixed picomp to recognize and diagnose illegal node types (in
	multiprogram praxes) instead of defaulting to something.

PG111207A:

	See this:

		http://www.olsonet.com/REPO/contents.html

	This is our new way of strong things in REPO such that we know what
	is there.

	Files options.nogood, options.satpeg, options.tagall in new_eco_demo
	renamed to options_nogood.sys, etc. to make them formally visible as 
	options files by PIP. I hope Wlodek doesn't mind.

	A few documents upgraded.

	Script usefetdll added (it deploys into bin) to switch the DLLs used
	by gdbproxy - to cater to the different FET programmers: FET430UIF,
	Olimex Tiny, and parallel (practically defunct). This will only work,
	if you download the new (binary) mspgcc set (for Windows) from the
	REPO. Try the binary first. If it doesn't work, compile from the
	source.

	The deploy script modified to account for PIP (you should keep it at
	the same directory level as the rest). It will only work if you fetch
	the new PIP as well.

	Some cosmetic changes to piter and Apps/TEST/WARSAW.

PG111208A:

	Fixed a nasty bug in picomp (introduced in PG111106A) causing 
	segmentation faults when a node type in the data file was unlabeled
	(which is a standard for single program praxes).

	Fixed the trivial VUEE data files for the three INTRO praxes by
	removing the false node type ID, which was harmless before PG111106A,
	but now would cause exceptions.

	Some irrelevant cosmetics in piter.

PG111209A:

	Added a new argument to piter. With -T, PIP can set an identifier in
	piter's window title, so multiple piter windows can be told apart.

PG111213A:

	Fixed the GP pin list in BOARDS/WARSAW and BOARDS/WARSAW_BLUE to
	exclude P2.4, which is used as the soft reset button (and was included
	in the list by mistake). When you set it to output (e.g., during auto
	test, as in Apps/TESTS/WARSAW), it will reset the CPU.

PG111214A:

	I have reorganized the Apps directory rather drastically:

	- VUEE has been eliminated

	- Apps/LEGACY contains all praxes that cannot be handled by picomp,
	  including those manually adapted to VUEE (the old pre-picomp way),
	  except for those that have been put into PROPRIETARY

	- PROPRIETARY contains those praxes that we should never be giving out

	- new_eco_demo/new_il_demo renamed eco_demo/il_demo (old versions
	  put into LEGACY; probably they should be removed altogether)

	- I have removed a few old and irrelevant test praxes

	Note that NOT ALL non-legacy praxes are VUEE-compliant (in the sense
	that they can be immediately compiled into VUEE models), but they are
	all picomp-compliant (except for some praxes in PROPRIETARY). The idea
	is that anything non-proprietary, is either picomp-compliant, or is
	considered LEGACY, which means one of these:

	- old trash that we want to keep around for sentimental reasons (some
	  of it may be deleted after a more thorough investigation)

	- something that is probably needed; we will convert it to a
	  picomp-compliant form as soon as we need a demo
	  
	I don't want to count the old-style, manually converted,
	VUEE-compatible praxes to the "presentable" pool, because they are 
	confusing.

	Modified some docs to reflect the new layout of Apps.

	Wlodek, please have a look and tell me what you think.

PG111222A:

	More reorganizations following Wlodek's suggestions:

	- eco_demo and il_demo made PROPRIETARY

	- Docs reorganized, added PROPRIETARY subdir, old PICOS and VNETI
	  subdirs merged into SOURCE, some documents cleaned (like, for
	  example, updating references to Apps directories, removing
	  references to things that no longer exists)

	Not sure what to do with SimNets. Probably should be removed. I am in
	fact tempted to remove all eCOG stuff (we can always excavate it if
	needed).

PG120103A:

	A new version of the experimental location engine in Linux/LOCATION
	(read the doc).

	The release script modified to include PIP.

PG120105A:

	Fixed a bug in piter (introduced at PG111209A) causing an error when
	piter was called without arguments (outside of pip).

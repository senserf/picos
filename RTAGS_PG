PG100628A:

	First for some git-related cleanups:

	1. I propose to use separate RTAG files for the different developers
	   (all two of them ;-). This is RTAGS_PG. I am leaving the original
	   RTAGS file as it was (for the record). I have also created a new
	   file named Version holding the system version to be used by mkmk.

	2. I have modified mkmk (see above), so grab the new version and copy
	   it to your bin. The script fetches the system version from Version
	   and then scans all RTAGS_... selecting the most recent release tag.
	   Tags are expected to contain six digits (according to our tacit
	   standard, e.g., 100628), but may also contain arbitrary other
	   characters, e.g., WO100629A:

	3. We should be using commit messages for meaningful comments. Also, we
	   shouldn't shy away from many small commits (not all of them being
	   necessarily tagged our way), equatting pushes (which should be
	   tagged - the last commit before a push) with previous CVS commits.
	   Note that present commits are lighter weight than old CVS commits.

	=======================================================================

	The four values returned by PHYSOPT_ERROR for CC1100 redefined. Here is
	the description from phys_cc1100.cc

	0 - receptions (all events when receiver is awakened to check for a
	    pkt)

	1 - successfully received packets; note that with hardware CRC +
	    AUTOFLUSH, 0 and 1 will be equal

	2 - LBT/congestion indicator: EMA d(n) = 0.75 * d(n-1) + 0.25 * b,
	    where b is the backoff experienced when trying to access the
	    channel for TX; this is counted over all attempts to access the
	    channel and maxed at 0x0fff, i.e., 4095

	3 - the maximum accumulated backoff time suffered by a single packet so
	    far

	Also read doc.odt from Apps/VUEE/RFTEST.

	The RFTEST Praxis, which I wrote for Gerry a few weeks ago, has been
	brought to a PiComp-compatible form.

	Simplified utimer_set in kernel.c (insignificantly). I have been 
	searching there for weird reasons why a transmit queue might get
	stuck on LBT. One of them would be a stuck utimer, but it doesn't
	seem plausible at all.

	I have done some tests with RFTEST. It seems that setting XMIT queue
	size limit in TCV, say #define TCV_LIMIT_XMT 8 (in options.sys) may be
	a good idea. I did see a few memory problems under the outgoing packet
	rate of 4 pkts/sec (nodes becoming unresponsive to UART because of
	choked up malloc) which diappeared after I introduced the limit. It
	appears that the reception queue size is not a problem.

PG100629A:

	Fixed file permissions. Cygwin creates a lot of mess with file
	permissions (which get screwed up when copying, archiving, untarring,
	etc.). Unfortunately (or rather fortunately, but not in this case),
	when you change the permissions of a file, git recognizes the file as
	modified, which occasionally becomes annoyoing.

	The upshot:

	There is script in Scripts, named permissions, which has been there
	for a while (and I have been using it every now and then). I recommend
	to run it:

		cd PICOS
		Scripts/permissions

	whenever you suspect that file permissions may have been messed up
	(git status shows modified files that haven't really been modified).
	It runs through the tree and sets the right permissions of files (which
	are mostly guessed, but mostly correctly and, most importantly,
	deterministically). In particular, you should do it before checking the
	status, adding, and/or committing.

PG100630A:

	Converted Apps/VUEE/survey to PiComp. Perhaps "converted" is not a good
	word, as the job consists in undoing the previous VUEE hooks. Along the
	way, detected (and fixed) one problem with PiComp: when tokenizing
	initializers, PiComp would split constructs like << into < < (i.e.,
	introducing a space between the two characters).

	Also, PiComp now parses crunning. The case of crunning (NULL) was
	impossible to handle in a macro (so it didn't work under VUEE), as the
	(non-NULL) argument od crunning had to be converted to a SIDE process
	type ID, i.e.,

	#define	_pt_id_(pt)	(&zz_!!THREADNAME(pt)!!_prcs)
	#define	crunning(pt)	zz_crunning (_pt_id_ (pt))

	So when you said crunning (NULL), the macro would produce nonsense. To
	do it right, I would have to remove the macro (crunning) and parse
	crunning in PiComp into zz_crunning recognizing the special case of a
	NULL (generally non-symbol) argument. That, however, would cause
	problems for the old VUEE-compliant praxes (which are not handled by
	PiComp and must rely on the macro).

	As the macro is expanded before PiComp sees the code, I handle two
	cases:

	crunning -> zz_crunning (not used now, waiting for the macro to
	disappear)

	zz_crunning -> zz_crunning (fixing the problem introduced by the macro
	for a non-symbol argument)

	Note that this requires a modification in VUEE. Please use VUEE with
	the same (or higher) release tag, if you want to have crunning working
	correctly with the PiComp-compatible praxes.

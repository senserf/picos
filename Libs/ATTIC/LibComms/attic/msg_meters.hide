#ifndef __msg_meters_h
#define __msg_meters_h


//	Avoiding bytes and chars, even in the msg buffers

typedef enum {
	msg_null,
	msg_test, msg_testAck, msg_new, msg_newAck,
	msg_master, msg_get, msg_getAck, msg_set,
	msg_report, msg_sms, msg_rpc, msg_fwd
} msgType;

#define APP_METERS	0x0100
#define MSG_ENABLED	0x0300 // METERS plus 0x0200
#define is_msg_enabled(type)	((type) & MSG_ENABLED)
#define is_app_valid(type)	((type) & APP_METERS)

#include "msg_tarp.h"
/*
typedef struct headerStruct {
	word	msg_type;
	word	seq_no;
	lword	snd;
	lword	rcv;
	word	hoc;	// # of hops so far
	word	hco;	// last one from the destination to me
} headerType; // 16 bytes
#define in_header(buf, field)   (((headerType *)buf)->field)
*/

typedef struct msgTestStruct {
	headerType	header;
	lword		target; // hoc in the header is range
} msgTestType;
#define in_test(buf, field)   (((msgTestType *)buf)->field)

typedef struct msgTestAckStruct {
	headerType      header;
	lword           target;
	word		hco;
	word		spare;
	lword		time;
	long		delta;
} msgTestAckType;
#define in_testAck(buf, field)   (((msgTestAckType *)buf)->field)

typedef struct msgNewStruct {
	headerType      header;
	lword           passwd;
} msgNewType;
#define in_new(buf, field)   (((msgNewType *)buf)->field)

typedef struct msgNewAckStruct {
	headerType      header;
	lword           master;
	word		hco;
	word		spare;
	lword           mtime;
} msgNewAckType;
#define in_newAck(buf, field)   (((msgNewAckType *)buf)->field)

typedef struct msgMasterStruct {
	headerType      header;
	lword           mtime;
} msgMasterType;
#define in_master(buf, field)   (((msgMasterType *)buf)->field)

typedef struct msgGetStruct {
	headerType	header;
	lword		passwd;
} msgGetType;
#define in_get(buf, field)   (((msgGetType *)buf)->field)

typedef struct msgGetAckStruct {
	headerType      header;
	lword		host_id;
	lword		ltime;
	long            delta;
} msgGetAckType;
#define in_getAck(buf, field)   (((msgGetAckType *)buf)->field)

typedef struct msgSetStruct {
	headerType	header;
	lword		passwd;
	lword		npasswd;
	lword		host_id;
	lword		mtime;
	lword		node_addr;
} msgSetType;
#define in_set(buf, field)   (((msgSetType *)buf)->field)

typedef struct msgReportStruct {
	headerType	header;
} msgReportType;

typedef struct msgSmsStruct {
	headerType	header;
} msgSmsType;

typedef struct msgRpcStruct {
	headerType      header;
	lword           passwd;
} msgRpcType;
#define in_rpc(buf, field)   (((msgRpcType *)buf)->field)

typedef struct msgFwdStruct {
	headerType      header;
	lword		target;
	lword           passwd;
} msgFwdType;
#define in_fwd(buf, field)   (((msgFwdType *)buf)->field)

#endif

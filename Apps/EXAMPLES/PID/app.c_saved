#include "sysio.h"
#include "ser.h"
#include "serf.h"
#include "sensors.h"
#include "actuators.h"
#include "plant.h"

	// We run the control loop every this many PicOS milliseconds
word	control_interval = 1024;

	// In our arithmetic, the calculations are carried out assuming the
	// coefficients are scaled up by the factor of 100, so we basically
	// view these as percentages. We also use long signed arithmetics in
	// the calculations to make sure we do not accidentally go out of
	// range.
lint	Kp = 0, Ki = 0, Kd = 0;

	// Tells whether the controller is running
Boolean	Active = NO;

	// We assume that the values sent/received over the actuator/sensor are
	// unsigned integers between 0 and 64K (16-bit numbers).

lint decode_plant_output (word out) {

	// Return directly
	return (lint) out;
}

word encode_plant_input (lint inp) {

	word val;

	if (inp < MIN_INPUT)
		inp = MIN_INPUT;
	else if (inp > MAX_INPUT)
		inp = MAX_INPUT;

	return (word)(inp + MIN_INPUT);
}
	
// ============================================================================

lint setpoint = (MIN_OUTPUT + MAX_OUTPUT) / 2,
	setting = (MIN_INPUT + MAX_INPUT) / 2;

// ============================================================================

fsm controller {

	lint derivative, integral, error, output, last_error;

	state START:

		ser_outf (START, "%ld (Kp=%ld, Ki=%ld, Kd=%ld, i=%ld)\r\n",
			setpoint, Kp, Ki, Kd, setting);

		// Initialize
		last_error = integral = 0;

	state SET_ACTUATOR:

		word value = encode_plant_input (setting);
		write_actuator (SET_ACTUATOR, THE_ACTUATOR, &value);
		delay (control_interval, READ_SENSOR);
		release;

	state READ_SENSOR:

		word value;
		lint new_setting;

		read_sensor (READ_SENSOR, THE_SENSOR, &value);
		output = decode_plant_output (value);

		// This can be negative
		error = setpoint - output;
		integral += error;
		derivative = error - last_error;
		last_error = error;

		new_setting = (Kp * error + Ki * integral + Kd * derivative +
			50)/ 100;

		setting = encode_plant_input (new_setting);

	state SHOW_STATE:

		ser_outf (SHOW_STATE, "%lu : %ld -> %ld "
			"[E: %ld, I: %ld, D: %ld, V: %ld]\r\n",
			seconds (),
				output, setpoint, error, integral, derivative,
					setting);

		sameas SET_ACTUATOR;
}

// ============================================================================

fsm root {

	char cmd [64];

	state BANNER:

		ser_out (BANNER,
			"Commands:\r\n"
			"  r sp in [run [setpoint [initial setting]]]\r\n"
			"  s [stop]\r\n"
			"  p v [set Kp]\r\n"
			"  i v [set Ki]\r\n"
			"  d v [set Kd]\r\n"
			"  c v [set control interval]\r\n"
		);

	state UART_INPUT:

		lint a, b;

		ser_in (UART_INPUT, cmd, 64);

		switch (cmd [0]) {

		    case 'r' :

			// Two arguments expected
			a = MIN_OUTPUT;
			b = MIN_INPUT;
			scan (cmd + 1, "%ld %ld", &a, &b);
			// Verify
			if (a < MIN_OUTPUT || a > MAX_OUTPUT ||
			    b < MIN_INPUT  || b > MAX_INPUT )
				sameas ILLEGAL_PARAMETER;

			if (Active)
				sameas RUNNING_ALREADY;

			setpoint = a;
			setting = b;

			runfsm controller;
			Active = YES;
			sameas UART_INPUT;

		    case 's' :

			if (!Active)
				sameas STOPPED_ALREADY;

			killall (controller);
			Active = NO;
			sameas UART_INPUT;

		    case 'p' :

			a = 0;
			scan (cmd + 1, "%ld", &a);
			Kp = a;
			sameas UART_INPUT;

		    case 'i' :

			a = 0;
			scan (cmd + 1, "%ld", &a);
			Ki = a;
			sameas UART_INPUT;

		    case 'd' :
	
			a = 0;
			scan (cmd + 1, "%ld", &a);
			Kd = a;
			sameas UART_INPUT;

		    case 'c' :

			a = 0;
			scan (cmd + 1, "%ld", &a);
			if (a < 128 || a > 32768)
				sameas ILLEGAL_PARAMETER;
			control_interval = (word) a;
			sameas UART_INPUT;
		}

	state BAD_COMMAND:

		ser_out (BAD_COMMAND, "bad command!\r\n");
		sameas BANNER;

	state ILLEGAL_PARAMETER:

		ser_out (ILLEGAL_PARAMETER, "llegal parameter!\r\n");
		sameas BANNER;

	state RUNNING_ALREADY:

		ser_out (RUNNING_ALREADY, "running already!\r\n");
		sameas UART_INPUT;

	state STOPPED_ALREADY:

		ser_out (STOPPED_ALREADY, "stopped already!\r\n");
		sameas UART_INPUT;
}

// ============================================================================

#!/bin/sh
##########################\
exec tclsh "$0" "$@"

#
# Looks up .mop files in the tree and cleans the directories containing them
#

proc cygfix { } {
#
# Issue a dummy reference to a file path to trigger a possible DOS-path
# warning, after which things should continue without any further warnings.
# This first reference must be caught as otherwise it would abort the script.
#
	catch { exec ls [pwd] }
}

proc remove_pip_configs { } {
#
# Remove PIP configuration files
#
	set fl [glob -nocomplain "config.*"]
	foreach f $fl {
		catch { exec rm -f $f }
	}
}

proc do_it { } {
#
# Cleans the current directory
#
	if ![catch { open ".mop" "r" } mfd] {
		if [catch { read $mfd } mop] {
			catch { close $mfd }
		} else {
			catch { close $mfd }
			run_mop $mop
		}
		global PR
		if $PR {
			remove_pip_configs
		}
	}

	# traverse subdirectories
	foreach d [exec ls] {
		if ![file isdirectory $d] {
			continue
		}
		if [catch { file lstat $d vv } ] {
			continue
		}
		if { $vv(type) != "directory" } {
			continue
		}
		array unset vv
		set c [pwd]
		if ![catch { cd [file join $c $d] } ] {
			# dout $c
			do_it
			cd $c
		}
	}
}

proc dout { dn } {

	global SL CL

	set dn [string range $dn $CL end]
	set dl [string length $dn]

	puts -nonewline "\r$dn"
	flush stdout

	while { $SL > $dl } {
		puts -nonewline " "
		incr SL -1
	}

	set SL $dl
}
		
proc run_mop { m } {

	global SDN SDC TFN SLIST

	if [regexp "^#!" $m] {
		# looks like a script
		set m [split $m "\n"]
		if [catch { open $TFN "w" } tfd] {
			puts "couldn't open tmp file $TFN: $tfd"
			catch { file delete -force $TFN }
			exit 99
		}

		fconfigure $tfd -translation lf

		foreach l $m {
			set l [string trimleft $l]
			if [regexp "^(\[^ \t\]+)" $l kwd] {
				# check if match in Scripts
				if { [lsearch -exact $SLIST $kwd] >= 0 } {
					# prepend the path
					set len [string length $kwd]
					set kwd "$SDC/$kwd"
					set l $kwd[string range $l $len end]
				}
			}
			if [catch { puts $tfd $l } err] {
				puts "couldn't write to tmp file: $err"
				catch { close $tfd }
				catch { file delete -force $TFN }
			}
		}
		catch { close $tfd }
		catch { exec chmod +x $TFN }
		if [catch { exec sh $TFN } err] {
			puts "Warning: .mop <script> failed in '[pwd]': $err"
			catch { file delete -force $TFN }
			return
		}
		catch { file delete -force $TFN }
	} else {
		# assume this is command name in Scripts
		set m [string trim $m]

		if { $m == "" } {
			set m "cleanapp"
		} elseif [regexp "\[\n\r \t\]" $m] {
			puts "Warning: .mop <cmd> in '[pwd]' doesn't look right"
			return
		}

		if [catch { exec sh [file join $SDN $m] } err] {
			puts "Warning: .mop <cmd = $m> failed in '[pwd]': $err"
		}
	}
}

proc locate_scripts { } {
#
# Locate the path to Scripts from where you have been called
#
	global SDN SDC SLIST TFN

	set SDN ""

	if ![catch { eval exec sh picospath } dir] {
		# use this way to locate Scripts
		set dn [file normalize [file join $dir "Scripts"]]
	} else {
		# look it up backwards (only works for a subdirectory of
		# Apps)
		set dir "."
		set pdn ""
		for { set i 0 } { $i < 32 } { incr i } {
			set dn [file normalize [file join $dir "Scripts"]]
			if { $dn == $pdn } {
				# no change
				set dn ""
				break
			}
			set pdn $dn
			if [file isdirectory $dn] {
				# got it
				break
			}
			# go up
			set dir "../$dir"
		}
	}

	if { $dn == "" } {
		puts stderr "couldn't locate Scripts directory, sorry!"
		exit 1
	}

	set SDN $dn
	if [regexp -nocase "^(\[a-z\]):" $SDN jnk dl] {
		set SDC "/cygdrive/[string tolower $dl]"
		append SDC [string range $SDN 2 end]
	} else {
		set SDC $SDN
	}
	if [catch { exec ls $SDC } SLIST] {
		puts stderr "couldn't list Scripts directory, sorry!"
	}
	set TFN "/tmp/pic_mop_[pid]"
}

cygfix

if { [string first "-p" [lindex $argv 0]] == 0 } {
	# clean project files
	set PR 1
} else {
	set PR 0
}

locate_scripts
set SL 0
set CL [string length [pwd]]
incr CL

do_it

/* ==================================================================== */
/* Copyright (C) Olsonet Communications, 2002 - 2006                    */
/* All rights reserved.                                                 */
/* ==================================================================== */

#include "sysio.h"
#include "tcvphys.h"
#include "plug_null.h"

heapmem {10, 90};

#include "ser.h"
#include "serf.h"
#include "form.h"

#include "phys_dm2200.h"

#define	PACKET_LENGTH		32
#define	IBUFLEN			64

static	word	CntSent = 0, CntRcvd = 0, SPA;

static int sfd;
static word SendInterval = 2048;
static byte Action = 0, Mode = 0, spaf = 0;

/* ======================================================================= */

#define	RC_WAIT		0
#define	RC_DISP		1

process (receiver, void)

	static address packet;
	word len, pow;

	nodata;

  entry (RC_WAIT)

	packet = tcv_rnp (RC_WAIT, sfd);

  entry (RC_DISP)

	len = tcv_left (packet) - 2;
	pow = packet [len >> 1];

	diag ("+++: %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x",
		packet [ 0],
		packet [ 1],
		packet [ 2],
		packet [ 3],
		packet [ 4],
		packet [ 5],
		packet [ 6],
		packet [ 7],
		packet [ 8],
		packet [ 9],
		packet [10],
		packet [11],
		packet [12],
		packet [13],
		packet [14],
		packet [15]
	);

	tcv_endp (packet);
	CntRcvd++;
	proceed (RC_WAIT);

endprocess (1)

#define	SN_SEND		00

process (sender, void)

	address packet;
	int i;
	word w;

	nodata;

  entry (SN_SEND)

	packet = tcv_wnp (SN_SEND, sfd, PACKET_LENGTH);

	packet [0] = 0;
	packet [1] = CntSent;
	if (spaf) {
		w = SPA;
	} else {
		w = CntSent & 0xff;
		w = w | (w << 8);
	}
	for (i = 2; i < PACKET_LENGTH/2; i++)
			packet [i] = w;

	diag ("SND: %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x %x",
		packet [ 0],
		packet [ 1],
		packet [ 2],
		packet [ 3],
		packet [ 4],
		packet [ 5],
		packet [ 6],
		packet [ 7],
		packet [ 8],
		packet [ 9],
		packet [10],
		packet [11],
		packet [12],
		packet [13],
		packet [14],
		packet [15]
	);

	tcv_endp (packet);
	CntSent++;
	delay (SendInterval, SN_SEND);

endprocess (1)

void do_start (int mode) {

	if (mode & 2) {
		if (!running (receiver))
			fork (receiver, NULL);
		tcv_control (sfd, PHYSOPT_RXON, NULL);
	}

	if (mode & 1) {
		if (!running (sender))
			fork (sender, NULL);
		tcv_control (sfd, PHYSOPT_TXON, NULL);
	}
}

void do_quit () {

	tcv_control (sfd, PHYSOPT_RXOFF, NULL);
	tcv_control (sfd, PHYSOPT_TXOFF, NULL);
	killall (receiver);
	killall (sender);
}

#define	RS_INIT		00
#define	RS_RCMD		10
#define	RS_SOI		20
#define	RS_DON		30
#define	RS_SYI		40
#define	RS_SCC		50
#define	RS_SCI		60
#define	RS_SRC		62
#define	RS_SPA		65
#define RS_RPC		67
#define RS_SPC		68
#define RS_BID		69
#define	RS_STA		70
#define	RS_CPA		71
#define	RS_BND		73
#define	RS_DUM		75
#define	RS_ECO		78
#define	RS_SEC		80
#define	RS_SMO		86
#define	RS_SRE		87
#define	RS_PDO		95
#define	RS_FLW		100
#define	RS_FLR		110
#define	RS_FLE		120
#define	RS_SPI		130
#define	RS_GPI		140
#define	RS_ADC		150
#define	RS_CNT		160
#define	RS_SCN		170
#define	RS_SCM		180
#define	RS_NOT		190
#define	RS_CNS		200
#define	RS_FRE		210

process (root, int)

	static char *ibuf;
	int n;

  entry (RS_INIT)

	ibuf = (char*) umalloc (IBUFLEN);
	phys_dm2200 (0, PACKET_LENGTH + 4);
	tcv_plug (0, &plug_null);
	sfd = tcv_open (NONE, 0, 0);
	if (sfd < 0) {
		diag ("Cannot open tcv interface");
		halt ();
	}

	if (Action)
		do_start (Action);

  entry (RS_RCMD-2)

  	ser_outf (RS_RCMD-2,
	"\r\nS-R Test\r\n"
	"Commands:\r\n"
	"i n      -> set send interval (msec) [%u]\r\n"
	"s n      -> start (0-stop, 1-send, 2-rcv, 3-both [%u]\r\n"
	"x x      -> send a specific hex pattern\r\n"
	"y        -> cancel\r\n"
	"e        -> reset packet counters\r\n"
	"p        -> show packet counters [%u, %u]\r\n"
	"o n      -> set mode [%u]\r\n"
	,
		SendInterval, Action, CntSent, CntRcvd, Mode
	);

  entry (RS_RCMD)
  
	ibuf [0] = ' ';
	ser_in (RS_RCMD, ibuf, IBUFLEN-1);

	if (ibuf [0] == 'i')
		proceed (RS_SCI);
	if (ibuf [0] == 's')
		proceed (RS_STA);
	if (ibuf [0] == 'x')
		proceed (RS_SPA);
	if (ibuf [0] == 'y')
		proceed (RS_CPA);
	if (ibuf [0] == 'e')
		proceed (RS_RPC);
	if (ibuf [0] == 'p')
		proceed (RS_SPC);
	if (ibuf [0] == 'o')
		proceed (RS_SMO);

  entry (RS_RCMD+1)

	ser_out (RS_RCMD+1, "Illegal command or parameter\r\n");
	proceed (RS_RCMD-2);

  entry (RS_SCI)

	n = -1;
	scan (ibuf + 1, "%d", &n);
	if (n <= 0)
		proceed (RS_RCMD+1);
	SendInterval = n;
	proceed (RS_DON);

  entry (RS_STA)

	n = 0;
	scan (ibuf + 1, "%d", &n);
	if (n < 0 || n > 4)
		proceed (RS_RCMD+1);
	Action = (word) n;
	do_quit ();
	if (n != 0)
		do_start (n);
	proceed (RS_DON);

  entry (RS_RPC)

	CntSent = CntRcvd = 0;
	proceed (RS_DON);

  entry (RS_SPC)

	ser_outf (RS_SPC, "Sent = %u, Received = %u\r\n", CntSent, CntRcvd);
	proceed (RS_RCMD);

  entry (RS_SMO)

	n = -1;
	scan (ibuf + 1, "%d", &n);

	if (n < 0 || n > 7)
		proceed (RS_RCMD+1);
	Mode = (byte) n;
	tcv_control (sfd, PHYSOPT_SETMODE, (address)(&n));
	proceed (RS_DON);

  entry (RS_DON)

	diag ("DONE");
	proceed (RS_RCMD);

  entry (RS_SPA)

	SPA = 0;
	scan (ibuf + 1, "%x", &SPA);
	spaf = 1;
	proceed (RS_DON);

  entry (RS_CPA)

	spaf = 0;
	proceed (RS_DON);

endprocess (1)

/* ==================================================================== */
/* Copyright (C) Olsonet Communications, 2002 - 2006                    */
/* All rights reserved.                                                 */
/* ==================================================================== */

#include "sysio.h"
#include "tcvphys.h"
#include "tcvplug.h"
#include "plug_null.h"

heapmem {10, 90};

#include "ser.h"
#include "serf.h"
#include "form.h"

#if	CC1100
#include "phys_cc1100.h"
#endif

#if	DM2200
#include "phys_dm2200.h"
#endif

#if	DM2100
#include "phys_dm2100.h"
#endif

#include "pinopts.h"

#define	IBUFLEN			48
#define	MIN_PACKET_LENGTH	20
#define	MAX_PACKET_LENGTH	32
#define	MAXPLEN			48

#define	SER(a)	((a) [1])

static int sfd;

static word 	SendInterval = 1024,
		RcvQSize = 0,
		SentCnt = 0;

static word gen_packet_length (void) {

	return ((rnd () % (MAX_PACKET_LENGTH - MIN_PACKET_LENGTH + 1)) +
			MIN_PACKET_LENGTH) & 0xFFE;
}

#define	RC_WAIT		0

process (receiver, void)

	static address packet;
	word len, pow;

	nodata;

  entry (RC_WAIT)

	if (RcvQSize && tcv_qsize (sfd, TCV_DSP_RCV) < RcvQSize) {
		// Wait until the queue size reaches the limt
		delay (32, RC_WAIT);
		release;
	}
	packet = tcv_rnp (RC_WAIT, sfd);
	len = tcv_left (packet) - 2;
	pow = packet [len >> 1];
	diag ("RCV: <%x> len = %u, sn = %u", pow, len, SER (packet));
	tcv_endp (packet);
	proceed (RC_WAIT);

endprocess (1)

#define	SN_SEND		00
#define	SN_NEXT		10

process (sender, void)

	static word PLen, Sernum;
	address packet;
	int i;
	word w;

	nodata;

  entry (SN_SEND)

	PLen = gen_packet_length ();
	if (PLen < MIN_PACKET_LENGTH)
		PLen = MIN_PACKET_LENGTH;
	else if (PLen > MAX_PACKET_LENGTH)
		PLen = MAX_PACKET_LENGTH;

  entry (SN_NEXT)

	packet = tcv_wnp (SN_NEXT, sfd, PLen);
	// Network ID
	packet [0] = 0;

	SER (packet) = SentCnt;

	for (i = 4; i < PLen; i++)
		((byte*) packet) [i] = (byte)i;

	tcv_endp (packet);

	diag ("SNT: %u [%u]", SentCnt, PLen);
	SentCnt++;
	delay (SendInterval, SN_SEND);

endprocess (1)

#define	RS_INIT		00
#define	RS_RCMD		10
#define	RS_READ		15
#define	RS_DON		20
#define	RS_IGN		30
#define	RS_SCI		40
#define	RS_SPR		50
#define	RS_RPR		60
#define	RS_SDE		70
#define	RS_RDE		80
#define	RS_QLI		90
#define	RS_ERA		95
#define	RS_QSI		100
#define	RS_FRE		110

process (root, int)

	static char *ibuf, *rptr;
	int n;
	static int a, b;

  entry (RS_INIT)

	ibuf = (char*) umalloc (IBUFLEN);
#if CC1100
	phys_cc1100 (0, MAXPLEN);
#endif
#if DM2200
	phys_dm2200 (0, MAXPLEN);
#endif
#if DM2100
	phys_dm2100 (0, MAXPLEN);
#endif
	tcv_plug (0, &plug_null);
	sfd = tcv_open (NONE, 0, 0);
	if (sfd < 0) {
		diag ("Cannot open tcv interface");
		halt ();
	}

  entry (RS_RCMD-2)

	diag (
	"Commands:\r\n"
	"i n      -> send interval\r\n"
	"s 0/1    -> xmt off/on\r\n"
	"r 0/1    -> rcv off/on\r\n"
	"S 0/1/2  -> XMT off/on/hold\r\n"
	"R 0/1    -> RCV off/on\r\n"
	"q n      -> rcv queue lim\r\n"
	"Q        -> show qsize\r\n"
	"e 0/1    -> erase rcv/xmt\r\n"
	"F i      -> freeze\r\n"
	);

  entry (RS_RCMD)
  
	ibuf [0] = ' ';
	rptr = ibuf;

  entry (RS_READ)

	io (RS_READ, UART_A, READ, rptr, 1);
	if (rptr == ibuf) {
		if (*rptr < 0x20)
			proceed (RS_READ);
	}
	if (*rptr == '\n' || *rptr == '\r') {
		*rptr = '\0';
	} else {
		rptr++;
		proceed (RS_READ);
	}

	if (ibuf [0] == 'i')
		proceed (RS_SCI);
	if (ibuf [0] == 's')
		proceed (RS_SPR);
	if (ibuf [0] == 'r')
		proceed (RS_RPR);
	if (ibuf [0] == 'S')
		proceed (RS_SDE);
	if (ibuf [0] == 'R')
		proceed (RS_RDE);
	if (ibuf [0] == 'q')
		proceed (RS_QLI);
	if (ibuf [0] == 'Q')
		proceed (RS_QSI);
	if (ibuf [0] == 'e')
		proceed (RS_ERA);
	if (ibuf [0] == 'F')
		proceed (RS_FRE);

  entry (RS_RCMD+1)

	diag ("Illegal command or parameter");
	proceed (RS_RCMD-2);

  entry (RS_DON)

        diag ("Done");
        proceed (RS_RCMD);

  entry (RS_IGN)

	diag ("Ignored");
	proceed (RS_RCMD);

  entry (RS_SCI)

	n = -1;
	scan (ibuf + 1, "%d", &n);
	if (n <= 0)
		proceed (RS_RCMD+1);
	SendInterval = n;
	proceed (RS_DON);

  entry (RS_SPR)

	n = 0;
	scan (ibuf + 1, "%d", &n);
	if (n) {
		// Start
		if (running (sender))
			proceed (RS_IGN);
		fork (sender, NULL);
		proceed (RS_DON);
	}
	// Stop
	if (running (sender)) {
		kill (running (sender));
		proceed (RS_DON);
	}
	proceed (RS_IGN);

  entry (RS_RPR)

	n = 0;
	scan (ibuf + 1, "%d", &n);
	if (n) {
		// Start
		if (running (receiver))
			proceed (RS_IGN);
		fork (receiver, NULL);
		proceed (RS_DON);
	}
	// Stop
	if (running (receiver)) {
		kill (running (receiver));
		proceed (RS_DON);
	}
	proceed (RS_IGN);

  entry (RS_SDE)

	n = 0;
	scan (ibuf + 1, "%d", &n);

	if (n == 0) {
		// OFF
		tcv_control (sfd, PHYSOPT_TXOFF, NULL);
		proceed (RS_DON);
	}
	if (n == 1) {
		// ON
		tcv_control (sfd, PHYSOPT_TXON, NULL);
		proceed (RS_DON);
	}
	// HOLD
	tcv_control (sfd, PHYSOPT_TXHOLD, NULL);
	proceed (RS_DON);

  entry (RS_RDE)

	n = 0;
	scan (ibuf + 1, "%d", &n);

	if (n == 0) {
		// OFF
		tcv_control (sfd, PHYSOPT_RXOFF, NULL);
		proceed (RS_DON);
	}
	// ON
	tcv_control (sfd, PHYSOPT_RXON, NULL);
	proceed (RS_DON);
	
  entry (RS_QLI)

	n = 0;
	scan (ibuf + 1, "%d", &n);
	RcvQSize = n;
	proceed (RS_DON);

  entry (RS_QSI)

	a = tcv_qsize (sfd, TCV_DSP_RCV);
	b = tcv_qsize (sfd, TCV_DSP_XMT);
	diag ("R = %d, X = %d", a, b);
	proceed (RS_RCMD);

  entry (RS_ERA)

	n = 0;
	scan (ibuf + 1, "%d", &n);
	tcv_erase (sfd, n ? TCV_DSP_XMTU : TCV_DSP_RCVU);
	proceed (RS_DON);

  entry (RS_FRE)

	n = 0;
	scan (ibuf + 1, "%u", &n);
	freeze (n);
	proceed (RS_DON);

endprocess (1)
